---
title: Activity高级部分
tag: Android权威指南
top: 88
---

## Activity XML属性详解

### 设置Activity的基本信息

​		android:name是＜activity＞标签中唯一必须设置的属性，该属性表示窗口类的名称。

​		android:label和android:icon属性分别用于设置窗口标题的文本和图像。

​		＜application＞标签也同样有android:label和android:icon属性。

### 屏幕方向切换（android:screenOrientation）

​		android:screenOrientation属性值为枚举类型，默认值是unspecified。

​		ActivityInfo类提供了一些常量用来与android:screenOrientation属性值一一对应。

![](D:\博客记录\Android开发权威指南\Activity高级部分\1.png)

![](D:\博客记录\Android开发权威指南\Activity高级部分\2.png)

​		如果要在声明窗口时指定屏幕旋转方向，需要使用＜activity＞标签的android:screenOrientation属性，如果用Java代码设置窗口的屏幕旋转方向，需要调用Activity. setRequestedOrientation方法，该方法只有一个参数，参数值就是表中给出的在ActivityInfo类中定义的常量。

### 阻止Activity销毁和重建（android:configChanges）

​		android:configChanges属性值为枚举类型，无默认值。

​		onConfigurationChanged方法只有一个newConfig参数，从该参数中可以获取配置变化后的值，例如，屏幕旋转后是横屏，还是竖屏。屏幕尺寸变化后的屏幕宽度和高度。

​		android:configChanges属性可以设置一个或多个配置，这些配置都用字符串描述，如果设置多个配置，中间用“|”分割，“|”与配置字符串之间不能有空格、Tab等字符。

```xml
android:configChanges="orientation|screenSize"
```

![](D:\博客记录\Android开发权威指南\Activity高级部分\4.png)

```xml
<activity
          android:name=".MainActivity"
          android:configChanges="orientation|screenSize"
          android:exported="true">
    <intent-filter>
        <action android:name="android.intent.action.MAIN" />

        <category android:name="android.intent.category.LAUNCHER" />
    </intent-filter>

    <meta-data
               android:name="android.app.lib_name"
               android:value="" />
</activity>
```

```kotlin
class MainActivity : AppCompatActivity() {

    private var name = "default"

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        Log.d("invoked method", "onCreate")
    }

    override fun onDestroy() {
        Log.d("invoked method", "onDestroy")
        super.onDestroy()
    }

    fun onClick_SetVar(v:View){
        name = "android"
    }

    override fun onConfigurationChanged(newConfig: Configuration) {
        super.onConfigurationChanged(newConfig)
        if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE){
            Log.d("orientation", "landscape")
        } else if (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT){
            Log.d("orientation", "portrait")
        }

        Log.d("screen_width_dp", newConfig.screenWidthDp.toString())
        Log.d("screen_height_dp", newConfig.screenHeightDp.toString())

        Log.d("name", name)
    }
}
```

​		当窗口的旋转方向改变时并没有调用onDestroy和onCreate方法，这也就意味着当前窗口对象并没有销毁和重新创建。而后面的日志信息是在onConfigurationChanged方法中输出的，这也充分说明了在屏幕旋转方向变化后仍然使用原来的窗口对象，并调用了该窗口对象的onConfigurationChanged方法。

### 允许Activity被实例化（android:enabled）

​		android:enabled属性值为布尔类型，默认值是true。

​		要实例化Android应用中的某个窗口，该窗口对应的＜activity＞标签的android:enabled属性值必须为true。该属性的默认值是true。

### 在最近应用列表中显示（android:excludeFromRecents）

​		不想让自己的Android应用程序在该列表中显示，需要将主窗口的＜activity＞标签的**android:excludeFromRecents**属性设为true即可。该属性的默认值为false。

### 允许其他程序访问当前窗口（android:exported）

​		android:exported属性值为布尔类型，默认值是true。

### 硬件加速（android:hardwareAccelerated）

​		**android:hardwareAccelerated**属性值为布尔类型，默认值是false。

​		将android:hardwareAccelerated属性设为true（该属性的默认值为false），表示当前窗口在Canvas、Paint、Xfermode、ColorFilter、Shader和Camera上的大多数操作将被加速。加速的结果就是使动画和滚动更平滑，并且拥有更快的响应速度。这里的OpenGL硬件加速并不需要显式地调用OpenGL API，系统会自动进行处理。代价是要占用更多的内存和CPU计算时间.

### 在多进程中创建窗口实例（android:multiprocess）

​		**android:multiprocess**属性值为布尔类型，默认值是false。

​		默认情况下，窗口类的所有实例都运行在窗口类所在的应用程序的进程中，也就是说窗口类的所有实例只能运行在一个进程中，该进程通常是包含窗口类的应用程序的进程。但如果将android:multiprocess属性的值设为true，则窗口类的实例可以运行在多个进程中。

### 无法返回的Activity（android:noHistory）

**android:noHistory**属性值为布尔类型，默认值是false。

​		在默认情况下，一个窗口被显示，都会将该窗口类的实例放入回退栈的栈顶，只有在栈顶的窗口才能显示并获得焦点。当显示了另外一个窗口（可以是另一个程序的窗口，如接听电话时的窗口），或按“Home”键切换到桌面后。再恢复到原来的程序后，这个在栈顶的窗口又会重新显示。

​		不过将android:noHistory属性值设为true时，这时系统不再保留窗口显示的历史，也就是说尽管也会显示android:noHistory属性值为true的窗口，但并**不会将该窗口对应的窗口类对象放入回退栈**。当窗口停止（执行Activity.onStop）后，就不会恢复到原来的窗口。

### 指定要返回的窗口（android:parentActivityName）

**android:parentActivityName**属性值为字符串类型，无默认值。

​		android:parentActivityName属性主要用于Action Bar。当按下Action Bar的回退按钮后，系统会回退到android:parentActivityName属性值指定的窗口。如果android:parentActivityName属性指定的窗口在回退栈中不存在，系统还可以使用TaskStackBuilder和android:parentActivityName属性值。

### 使窗口受到权限的保护（android:permission）

​	**android:permission**属性值为枚举类型，无默认值。该属性值可输入的内容为Android支持的权限。

​		在默认情况下，只要为＜activity＞标签指定了一个Action，就可以在其他程序中不受限制地使用隐式方式显示＜activity＞标签声明的窗口。不过我们可以用android:permission属性为这些窗口添加一些权限。

​		＜application＞与＜activity＞标签一样，也有一个android:permission属性。如果＜activity＞标签未指定android:permission属性，但＜application＞标签指定了android:permission属性，那么＜application＞标签中声明的所有窗口都会应用该权限。如果＜application＞与＜activity＞标签都指定了android:permission属性，以＜activity＞标签的android:permission属性值为准。

### 改变窗口所在的进程（android:process）

​		**android:process**属性值为字符串类型，无默认值。

​		默认情况下，一个Android应用程序（apk文件）只建立一个进程（进程名为当前应用程序的包名），该程序中的所有组件（Acitivty、Service等）都运行在这个进程中。Android系统允许为程序中的某个组件单独建立一个进程（为了使组件之间保持相对的独立性），也允许不同应用程序中的多个组件共享一个进程（为了节省内存空间和共享数据）。通过＜activity＞标签的android:process属性来完成。

​		android:process属性的值有如下两种类型的值。

1. 以冒号（:）开头，如android:process= " :new_process"。系统会为当前组件在当前应用程序中创建一个私有的进程。
2. 以小写字母开头，如android:process="new_process"。系统会使当前组件运行在android:process属性指定的全局进程中，但要注意，这个全局进程必须存在，否则程序无法安装在Android设备上。

​      如果未设置＜activity＞标签的android:process属性，也可以用＜application＞标签的android:process属性为所有的组件指定同一个进程。

### 不保存窗口的状态（android:stateNotNeeded）

​		**android:stateNotNeeded**属性值为布尔类型，默认值是false。

​		如果android:stateNotNeeded属性值为true，窗口不管在任何情况下都不会保存状态，在窗口重新显示后，也不会恢复到原来的状态。如果该属性为false，系统会在适当的时候保存窗口的状态，该属性的默认值是false。通常情况下，窗口在临时关闭后（停止状态），会调用Activity.onSaveInstanceState方法。该方法将窗口的状态存储在了Bundle对象中。当窗口重新显示时会调用onCreate方法，这个保存了窗口原来状态的Bundle对象会通过onCreate方法的参数传入窗口对象。如果将android:stateNotNeeded属性设为true，Activity.onSaveInstanceState方法将永远不会被系统调用，而这时传入onCreate方法的参数值就是null。

### 窗口的主题（android:theme）

android:theme属性值为字符串类型，无默认值。还可以使用Activity.setTheme方法设置动态设置窗口主题。

### 扩展窗口UI（android:uiOptions）

android:uiOptions属性值为枚举类型，默认值是none。

android:uiOptions属性可以设置的值:

![](D:\博客记录\Android开发权威指南\Activity高级部分\5.png)

### 设置输入法显示模式（android:windowSoftInputMode）

该属性用于设置当前窗口如何与输入法软键盘进行交互。设置该属性会对软键盘和窗口有影响:

1. 软键盘的状态。也就是说当窗口处于焦点状态时软键盘是隐藏还是显示。
2. 对当前窗口进行调整。也就是说当软键盘窗口显示后，当前窗口的大小是否做出调整，以及窗口上当前获得焦点的控件是否仍然处于可视状态（控件整体会上移）。

android:windowSoftInputMode属性必须设置一个或多个值，如果设置多个值，中间用“|”连接，该符号两侧不能有空格、Tab等字符。

![](D:\博客记录\Android开发权威指南\Activity高级部分\6.png)

## Activity从创建到销毁的过程

### 任务（Task）与回退栈（Back Stack）

​		Activity的生命周期离不开两个概念：任务与回退栈。**每一个Android应用在运行时都会创建和维护一个属于自己的任务。一个任务包含了一个堆栈数据结构，该堆栈用于保存当前Android应用中所有已经创建的窗口对象。该堆栈称为回退栈（Back Stack）。**位于回退栈栈顶的窗口会处于焦点状态。当Android应用开始运行时，系统为该应用建立任务和回退栈后，会将主窗口对象添加到该回退栈中，作为回退栈的第一个元素。当显示新的窗口时，会首先将该窗口的对象入栈。那么该窗口对象就位于当前程序的回退栈的栈顶，而位于栈顶的窗口会显示在最前面（获得焦点，可以与用户交互）。当关闭该窗口，系统会首先将该窗口对象出栈，并销毁该窗口对象。

​		**Android应用的启动伴随着回退栈的创建和主窗口入栈的过程，程序的终止则伴随着回退栈的清空和销毁的过程。**

​		**不管是显示内部的窗口，还是显示其他应用程序的窗口，都会将显示的窗口对象压入当前应用程序的回退栈。当关闭窗口时，会将窗口对象从回退栈弹出。**

​		**每一个Android应用在启动的时候都会建立一个任务，回退栈就包含在这个任务中。当进行应用程序之间的切换时，也就是应用程序对应的任务之间的切换。这里的切换并不是指任务的创建和销毁，而是指将任务移到前台（foreground）或后台（background）运行。只有在前台运行的任务中的回退栈栈顶的窗口才能获得焦点。而同时只能有一个任务在前台运行，所以同时只能有一个窗口获得焦点。**

​		回退栈并不会将已经存在于栈中的窗口对象移动到栈的其他位置，而只会执行窗口对象的入栈和出栈的操作。按“Home”键的过程也就是当前窗口与Home窗口之间切换的过程，相当于在当前应用程序中调用另外一个程序中的窗口。

### 保存窗口（Activity）状态

​		当两个任务切换时，被移到后台运行的任务的回退栈栈顶的窗口会被停止，这时系统会自动保存窗口的状态，等该任务重新切换到前台运行后，该窗口恢复焦点的同时也会恢复所有的状态。

​		但在这些被停止的窗口对象并不意味着会永久地驻留在内存中。当Anroid设备的内存耗得差不多时，或某些Android应用急需大量内存时，Android系统会销毁长期被停止的窗口对象（包括该窗口对象被系统保存的所有状态）。当然，尽管窗口对象被销毁了，这并不意味着窗口对象会从回退栈中弹出。被释放的窗口对象仍然占着回退栈原来的位置，只是该对象并不指向任何一个窗口对象。当系统将该任务重新移到前台运行时，就应该将该窗口恢复焦点和状态。但由于该窗口对象已经被系统销毁，所以系统只能重新创建该窗口对象，这就意味着窗口原来的状态全部丢失。因此会需要在窗口对象释放之前保存要恢复的状态，等窗口对象重建时再恢复这些状态。

​		当窗口对象被系统销毁之前，就会调用该对象的onSaveInstanceState方法。用户可以通过onSaveInstanceState方法的参数保存任意多的变量值。通常会通过Activity.onCreate方法的savedInstanceState参数获取被保存的状态变量值。savedInstanceState参数值只在窗口对象重新创建时传入，窗口对象第一次创建时savedInstanceState参数值为null。

```kotlin
class MainActivity : AppCompatActivity() {
    //定义value变量，并设置了默认值
    private var value = "default"

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        //判断当前窗口对象是否第一次创建，如果savedInstanceState为null，
        if (savedInstanceState!=null) {
            //当前窗口对象第一次创建，这时使用value变量的默认值，否则恢复value变量的值
            value = savedInstanceState.getString("value").toString()
        }
    }

    //设置value字段值”按钮的单击事件方法，用于设置value变量的值
    fun onClick_SetFieldValue(v:View){
        value = "newValue"
    }

    //“输出value字段值”按钮的单击事件方法，用于将value变量的值输出到LogCat视图
    fun onClick_OutputFieldValue(v:View){
        Log.d("value", value)
    }

    /**
     *  该方法用于保存状态变量，当前对象被系统销毁之前会调用该方法
     */
    override fun onSaveInstanceState(outState: Bundle) {
        super.onSaveInstanceState(outState)
        outState.putString("value",value)
    }
}
```

### 管理任务和回退栈

＜activity＞标签中与任务和回退栈相关的属性：

**taskAffinity：**指定窗口属于哪一个任务。

**launchMode：**设置窗口的创建模式。

**allowTaskReparenting：**允许当前窗口移到taskAffinity属性指定的任务中的回退栈的栈顶。

**clearTaskOnLaunch：**要求回退栈保持初始状态。

**alwaysRetainTaskState：**要求回退栈保持最近的状态，也就是说系统不会自动释放回退栈中的窗口对象。

**finishOnTaskLaunch：**功能与clearTaskOnLaunch类似，只是针对的是单个窗口，而不是针对整个回退栈。该属性指定某一个窗口只在当前会话有效。如果任务被换到后台运行后又回到前台，该窗口不会再显示。

如下几个标志可以通过Java代码对窗口的行为进行设置:

- FLAG_ACTIVITY_NEW_TASK：相当于launchMode属性的singleTask模式。
- FLAG_ACTIVITY_SINGLE_TOP：相当于launchMode属性的singleTop模式。
- FLAG_ACTIVITY_CLEAR_TOP：如果要显示的窗口已经在回退栈中，压在该窗口上面的所有窗口对象将全部被销毁，该窗口会被设为栈顶并显示。该标志在＜activity＞标签中没有对应的属性。

### Activity的4种创建模式

​		默认情况下，每调用一次startActivity方法，就会创建一个新的窗口对象，并将该窗口对象压入当前任务的回退栈中。

使用＜acitivty＞标签的launchMode属性修改窗口的默认创建模式:

![](D:\博客记录\Android开发权威指南\Activity高级部分\7.png)

![](D:\博客记录\Android开发权威指南\Activity高级部分\8.png)

​		singleInstance与singleTask模式的唯一区别是存放singleInstance模式窗口对象的回退栈不能有其他任何窗口对象。因此，在任何情况下，**只要显示singleInstance模式的窗口，并且该窗口不存在，一定会新建立任务的**。如果该窗口已经存在，仍然会切换到该任务来显示singleInstance模式的窗口。

### 用Java代码设置窗口创建模式

​		窗口的创建模式不仅可以在声明窗口时通过launchMode属性指定，也可以通过Intent.setFlags方法指定一个或多个标志进行设置:

- FLAG_ACTIVITY_SINGLE_TOP。
- FLAG_ACTIVITY_CLEAR_TOP。
- FLAG_ACTIVITY_NEW_TASK。
- FLAG_ACTIVITY_CLEAR_TASK。
- FLAG_ACTIVITY_REORDER_TO_FRONT。

​      5个标志并不都是与launchMode属性的值对应，这些标志需要组合使用才能完全符合某一个launchMode属性值所满足的窗口创建模式。

#### FLAG_ACTIVITY_SINGLE_TOP标志

​		该标志与singleTop模式的作用相同。如果要显示的窗口正好处于当前回退栈的栈顶，则不再创建新的窗口对象，而是调用该窗口对象的onNewIntent方法。

```kotlin
//如果同时设置了launchMode属性和标志，标志动作将优先于相应的launchMode属性值。
//例如，如果声明IntentFlagActivity类时＜activity＞标签的launchMode属性值设为了singleInstance，
//使用下面的代码仍然按照singleTop方式处理。
fun onClick_ShowIntentFlagActivity_SingleTop(v:View){
    val intent = Intent(this,IntentFlagActivity::class.java)
    //设置FLAG_ACTIVITY_SINGLE_TOP标志
    intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)
    startActivity(intent)
}
```

#### FLAG_ACTIVITY_CLEAR_TOP标志

​		该标志用于释放回退栈中处于要显示窗口前面的所有窗口，可分如下两种情况使用（假设要显示的窗口为MyActivity）。

1. MyActivity的launchMode属性值是standard，并且没有将FLAG_ACTIVITY_SINGLE_TOP与FLAG_ACTIVITY_CLEAR_TOP一起使用。在这种情况下，不仅压在MyActivity上面的所有窗口会被释放，而且MyActivity也将被释放，然后重新创建该窗口对象并压栈，也就是说不会调用onNewIntent方法。
2. MyActivity的launchMode属性值是除了standard的其他3个值，或与FLAG_ACTIVITY_ SINGLE_TOP标志同时使用。在这种情况下相当于显示**程序内部的singleTask模式**的窗口，也就是说MyActivity前面的所有窗口将被出栈（释放），并调用栈顶窗口对象的onNewIntent方法。

```kotlin
fun onClick_CloseAllMyActivity(view: View?) {
    val intent = Intent(this, IntentFlagActivity::class.java)
    //intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);
    //  相当于将IntentFlagActivity设为singleTask模式
    intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_SINGLE_TOP
    startActivity(intent)
}
```

#### FLAG_ACTIVITY_NEW_TASK标志

​		如果只使用该标志，相当于显示**另一个Android程序中singleTask**模式的窗口。

#### FLAG_ACTIVITY_CLEAR_TASK标志

​		FLAG_ACTIVITY_CLEAR_TASK标志用于**释放当前回退栈中所有的窗口对象（包括要显示的窗口对象），然后再重新创建要显示的窗口对象**。

​		FLAG_ACTIVITY_CLEAR_TASK必须和FLAG_ACTIVITY_NEW_TASK标志一起使用才起作用。

#### FLAG_ACTIVITY_REORDER_TO_FRONT标志

​		只要当前回退栈中的任何位置有要显示的窗口对象，就不再为该窗口创建新对象，而是将栈中该窗口的对象提到栈顶，而窗口前面的窗口对象并不出栈（自然也不会释放这些窗口对象）。

​		例如，当前回退栈中有4个窗口对象：A、B、C、D，其中D是栈顶元素。现在要创建一个B窗口对象，如果在显示B窗口时通过Intent.setFlags方法设置了FLAG_ACTIVITY_REORDER_TO_FRONT标志，回退栈仍然包含4个窗口对象，但顺序却变为A、C、D、B，然后会调用B窗口对象的onNewIntent方法。

### 窗口的乾坤大挪移（affinity）

＜activity＞标签的两个属性:

​		**taskAffinity：**字符串类型，默认值是当前应用程序的package名称。该属性**指定当前窗口对象要使用哪个回退栈**。

​		**allowTaskReparenting：**布尔类型，默认值是false。该属性允许窗口对象在不同回退栈之间移动。

#### taskAffinity属性

​		如果在A.apk中使用FLAG_ACTIVITY_NEW_TASK标志显示B.apk中的MyActivity窗口，当MyActivity窗口不存在时，会新创建一个任务，当MyActivity窗口存在时，会直接切换到MyActivity窗口所在的任务。MyActivity窗口并不在A.apk的默认回退栈中，如果从桌面切换到A.apk所在的任务，MyActivity是不会再显示的，切换到B.apk的任务时才会显示MyActivity。

​		要实现一个完全相反的功能，也就是说切换到A.apk会显示MyActivity，而切换到B.apk不会显示MyActivity，就像MyActivity属于A.apk一样（实际上MyActivity属于B.apk）。就将MyActivity窗口的taskAffinity属性值指向A.apk的任务名,**Android应用程序的默认任务名称就是该应用程序的package名**，在AndroidManifest.xml文件的＜manifest＞标签的package属性中指定。

​		＜activity＞和＜application＞标签都有taskAffinity属性。如果＜activity＞标签未设置taskAffinity属性，而＜application＞标签设置了taskAffinity属性，那么＜application＞标签中声明的所有窗口都会使用＜application＞标签的taskAffinity属性指定的任务。

#### allowTaskReparenting属性

​		如果某窗口的allowTaskReparenting属性值为true，当该窗口所在的任务被切换到后台时，一旦有另一个与该窗口具有相同affinity的任务切换到前台，那么该窗口会从原来的任务移到新的任务。

​		尽管allowTaskReparenting属性会造成窗口对象在任务之间的移动，但并不会调用窗口对象的onCreate或onNewIntent方法，只是简单的Java对象迁移，而且不管该任务中有多少窗口对象，都会移动到另外一个任务。

### 销毁不再使用的窗口

​		如果用户长时间离开某个任务（该任务长时间处于后台休眠状态），系统就会销毁该任务中除了根窗口[插图]外的所有窗口。当用户再次回到该任务时，无论以前回退栈有多少个窗口，都会只显示根窗口。

＜activity＞标签的属性来改变系统的默认行为:

#### alwaysRetainTaskState属性

​		如果要用户系统无论离开当前任务多长时间都不会销毁回退栈中的任何窗口，那么就将alwaysRetainTaskState属性设为true。alwaysRetainTaskState属性的默认值为false。

#### clearTaskOnLaunch属性

​		该属性与alwaysRetainTaskStates属性正好相反，只要当前任务被切换到后台，哪怕是很短的时间，系统都会销毁除了根窗口外的所有窗口。该属性仅对根窗口有意义。clearTaskOnLaunch属性的默认值为false。

#### finishOnTaskLaunch属性

​		该属性与clearTaskOnLaunch类似，只不过该属性只针对一个窗口，而clearTaskOnLaunch针对整个任务中的所有窗口（不包括根窗口）。例如，回退栈（所在任务是TaskA）中有3个窗口：A-B-C，C是栈顶窗口。如果将C的finishOnTaskLaunch属性设为true，当TaskA在切换到后台时只有C被销毁。现在回退栈中包含的窗口对象及其顺序是A-B，所以当前显示的是窗口B，该属性不会作用于根窗口。finishOnTaskLaunch属性的默认值是false。

## Activity的别名

Activity别名使用＜activity-alias＞标签声明。

```xml
<application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@drawable/cross"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.ActivityAlias"
        tools:targetApi="31">
        <activity
            android:name=".TestActivity"
            android:exported="false">
            <meta-data
                android:name="android.app.lib_name"
                android:value="" />
        </activity>
        <activity-alias
            android:name=".TestActivityAlias"
            android:targetActivity=".TestActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.TEST_ACTION" />

                <category android:name="android.intent.category.DEFAULT" />
            </intent-filter>
        </activity-alias>

        <activity
            android:label="MyActivity"
            android:name=".MyActivity"
            android:icon="@drawable/calculator"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>

            <meta-data
                android:name="android.app.lib_name"
                android:value="" />
        </activity>
        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>

            <meta-data
                android:name="android.app.lib_name"
                android:value="" />
        </activity>

        <activity-alias
            android:name=".AliasMain"
            android:exported="true"
            android:icon="@drawable/umbrella"
            android:label="AliasMain"
            android:targetActivity=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity-alias>
    </application>
```

acitivity:

```kotlin
class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        //　比较窗口类名
        if (".MainActivity".equals(componentName.shortClassName)){
            title = "使用了<activity>标签"
            Log.d("TAG","$taskId")
        } else if (".AliasMain".equals(componentName.shortClassName)){
            title = "使用了＜activity-alias＞标签"
            Log.d("TAG","$taskId")
        }
    }

    fun onClick_ShowTestActivity(view: View?) {
        val intent = Intent("android.intent.action.TEST_ACTION")
        startActivity(intent)
    }
}
```

![](D:\博客记录\Android开发权威指南\Activity高级部分\9.png)

​		Activity别名除了前面的应用外，还可以为任何一个窗口定义别名。例如，如果某一个窗口定义了若干个Action，而且要单独控制某一个Action是否可以被其他应用程序调用，这也要使用Activity别名。

```xml
<activity
          android:name=".TestActivity"
          android:exported="false">
    <meta-data
               android:name="android.app.lib_name"
               android:value="" />
</activity>
<activity-alias
                android:name=".TestActivityAlias"
                android:targetActivity=".TestActivity"
                android:exported="true">
    <intent-filter>
        <action android:name="android.intent.action.TEST_ACTION" />

        <category android:name="android.intent.category.DEFAULT" />
    </intent-filter>
</activity-alias>
```

