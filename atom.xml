<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>余一</title>
  
  <subtitle>纸上得来终觉浅，绝知此事要躬行。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hluck.github.io/"/>
  <updated>2023-01-02T02:03:50.018Z</updated>
  <id>https://hluck.github.io/</id>
  
  <author>
    <name>余一</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android控件详解</title>
    <link href="https://hluck.github.io/2022/12/29/Android%E6%8E%A7%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
    <id>https://hluck.github.io/2022/12/29/Android%E6%8E%A7%E4%BB%B6%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-12-29T08:15:44.373Z</published>
    <updated>2023-01-02T02:03:50.018Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="字符串资源补充"><a href="#字符串资源补充" class="headerlink" title="字符串资源补充"></a>字符串资源补充</h2><h3 id="用占位符格式化字符串"><a href="#用占位符格式化字符串" class="headerlink" title="用占位符格式化字符串"></a>用占位符格式化字符串</h3><p>​        String.format（String, Object…）方法可以格式化带占位符的字符串。因此，只要在字符串资源中插入占位符就可以使用String.format方法格式化字符串资源。format方法要求占位符用%1、%2、……%n表示。其中第n个占位符与format方法的n+1个参数值对应。</p><p>带占位符的字符串资源:</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- $s表示该占位符要求传入字符串，$d表示该占位符要求传入整数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"welcome_messages"</span>&gt;</span>Hello, %1$s! You have %2$d new messages.<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>格式化字符串资源的Java代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Resources res = getResources();</span><br><span class="line">String text = String.format(res.getString(R.string.welcome_messages),<span class="string">"lining"</span>,<span class="number">18</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="用HTML标签格式化字符串资源"><a href="#用HTML标签格式化字符串资源" class="headerlink" title="用HTML标签格式化字符串资源"></a>用HTML标签格式化字符串资源</h3><p>​        字符串资源支持一些HTML标签，因此，可以直接在字符串资源中使用这些HTML标签格式化字符串。</p><p>用HTML标签格式化的字符串资源:</p><a id="more"></a><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"welcome"</span>&gt;</span>Welcome to <span class="tag">&lt;<span class="name">b</span>&gt;</span>Android<span class="tag">&lt;/<span class="name">b</span>&gt;</span>!<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="字符串资源支持如下的HTML标签。"><a href="#字符串资源支持如下的HTML标签。" class="headerlink" title="字符串资源支持如下的HTML标签。"></a>字符串资源支持如下的HTML标签。</h4><ul><li>&lt; b&gt;：粗体字</li><li>&lt; i&gt;：斜体字</li><li>&lt; u&gt;：带下划线的文字。</li></ul><p>​     使用String.format方法格式字符串，会忽略字符串中所有的HTML标签。为了使format方法可以格式化带HTML标签的字符，需要使用<strong>Html.fromHTML</strong>方法先处理一下字符串。</p><h4 id="同时包含HTML标签和占位符的字符串资源："><a href="#同时包含HTML标签和占位符的字符串资源：" class="headerlink" title="同时包含HTML标签和占位符的字符串资源："></a>同时包含HTML标签和占位符的字符串资源：</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"welcome_messages"</span>&gt;</span>Hello, %1$s! You have <span class="symbol">&amp;lt;</span>b&gt;%2$d new messages<span class="symbol">&amp;lt;</span>/b&gt;.<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​        由于需要使用Html.fromHTML方法处理字符串，因此，HTML标签中的“＜“需要使用“&amp;l t;”表示（“＞”可以直接使用）。</p><p>使用字符串资源的Java代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Resources res = getResources();</span><br><span class="line">String text = String.format(res.getString(R.string.welcome_messages),<span class="string">"lining"</span>, <span class="number">20</span>);</span><br><span class="line">CharSequence styledText = Html.fromHtml(text);</span><br></pre></td></tr></tbody></table></figure><p>​        如果format的某个参数值包含HTML的特殊字符，如“＜”、“&amp;”，可以使用下面的代码先格式化这个参数值，再使用format方法格式化字符串。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String escapedUsername = TextUtil.htmlEncode(username);</span><br><span class="line">Resources res = getResources();</span><br><span class="line">String text = String.format(res.getString(R.string.welcome_messages),escapedUsername, mailCount);</span><br><span class="line">CharSequence styledText = Html.fromHtml(text);</span><br></pre></td></tr></tbody></table></figure><h2 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h2><h3 id="显示富文本（URL、不同大小、字体、颜色的文本）"><a href="#显示富文本（URL、不同大小、字体、颜色的文本）" class="headerlink" title="显示富文本（URL、不同大小、字体、颜色的文本）"></a>显示富文本（URL、不同大小、字体、颜色的文本）</h3><p>​        在TextView类中预定义了一些类似HTML的标签，通过这些标签，可以使TextView控件显示不同颜色、大小、字体的文字。下面是几个比较常用的标签。</p><ul><li>＜font＞：设置颜色和字体。</li><li>＜big＞：设置大号字。</li><li>＜small＞：设置小号字。如果＜big＞和＜small＞都没有，表示正常字号。</li><li>＜i＞：斜体。</li><li>＜b＞：粗体。</li><li>＜tt＞：等宽字体（Monospace）。</li><li>＜br＞：换行（行与行之间没有空行，相当于“\n”）。</li><li>＜p＞：换行（行与行之间有空行，相当于“\n\n”）。对于带标签的文本，直接使用“\n”无法换行，只能使用＜br＞或＜p＞。</li><li>＜a＞：链接地址。</li><li>＜img＞：插入图像。</li></ul><p>这些标签虽然和HTML的标签类似，但并不具备HTML标签的全部功能。例如，＜font＞标签只支持color和face两个属性。</p><p>​        在使用这些标签时不能将带这些标签的字符串直接使用TextView.setText方法进行设置，而需要使用Html.fromHtml方法将带标签的字符串转换成CharSequence对象，然后再使用TextView.setText方法进行设置。</p><p>​        如果想在显示的文本中将URL地址、E-mail地址、电话等特殊内容高亮显示，并在单击时触发相应的动作（URL地址会调用浏览器显示该网址，电话会直接在拨号界面显示电话号），可以设置＜TextView＞标签的<strong>android:autoLink</strong>属性：</p><p><img src="/2022/12/29/Android%E6%8E%A7%E4%BB%B6%E8%AF%A6%E8%A7%A3/1.png" alt=""></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--　用于显示不同颜色、字体、大小的文字　--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:id</span>=<span class="string">"@+id/tv1"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:padding</span>=<span class="string">"20dp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--　用于显示带URL地址、E-mail地址、电话号的文本　--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:id</span>=<span class="string">"@+id/tv2"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:textSize</span>=<span class="string">"20sp"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:autoLink</span>=<span class="string">"all"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:padding</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:text</span>=<span class="string">"@string/link_text"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>activity:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class MainActivity : AppCompatActivity() {</span><br><span class="line">    lateinit <span class="keyword">var</span> binding: ActivityMainBinding</span><br><span class="line">    <span class="function">override fun <span class="title">onCreate</span><span class="params">(savedInstanceState: Bundle?)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        binding = ActivityMainBinding.inflate(layoutInflater)</span><br><span class="line">        setContentView(binding.root)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> html = <span class="string">"&lt;font color='red'&gt;I love Android.&lt;/font&gt;&lt;br&gt;"</span></span><br><span class="line">        html += <span class="string">"&lt;font color='#0000FF' &gt;&lt;big&gt;&lt;i&gt;I love Android.&lt;/i&gt;&lt;/big&gt;&lt;/font&gt;&lt;p&gt;"</span></span><br><span class="line">        html += <span class="string">"&lt;font color='@"</span> + R.color.white + <span class="string">"' &gt;&lt;tt&gt;&lt;b&gt;&lt;big&gt;&lt;u&gt;I love Android.&lt;/u&gt;&lt;/big&gt;&lt;b&gt;&lt;/tt&gt;&lt;/font&gt;&lt;p&gt;"</span></span><br><span class="line">        html += <span class="string">"&lt;big&gt;&lt;a href='http://hluck.gitee.io'&gt;我的博客&lt;/a&gt;&lt;/big&gt;"</span></span><br><span class="line"></span><br><span class="line">        val charSequence = Html.fromHtml(html)</span><br><span class="line">        binding.tv1.text = charSequence</span><br><span class="line">        <span class="comment">//　下面的语句非常重要，没有该语句，无法单击链接调用浏览器显示网页</span></span><br><span class="line">        binding.tv1.movementMethod = LinkMovementMethod.getInstance()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> text = <span class="string">"URL.http://51happyblog.com\n"</span></span><br><span class="line">        text += <span class="string">"Email.abcd@126.com\n"</span></span><br><span class="line">        text += <span class="string">"我的电话：+86 024-12345678"</span></span><br><span class="line">        binding.tv2.text = text</span><br><span class="line">        binding.tv2.movementMethod = LinkMovementMethod.getInstance()</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​        ＜a＞标签是链接，因此，需要使用LinkMovementMethod.getInstance方法获得MovementMethod对象。该对象可以使单击链接时调用浏览器显示指定的网页。如果不设置MovementMethod对象，虽然可以正常显示＜a＞标签指定的链接，但单击链接后无任何反应。</p><p><img src="/2022/12/29/Android%E6%8E%A7%E4%BB%B6%E8%AF%A6%E8%A7%A3/2.png" alt=""></p><h3 id="用＜img＞标签在TextView控件上显示图像"><a href="#用＜img＞标签在TextView控件上显示图像" class="headerlink" title="用＜img＞标签在TextView控件上显示图像"></a>用＜img＞标签在TextView控件上显示图像</h3><p>​        ＜img＞标签只有一个src属性，该属性原则上应该指向一个图像地址或可以找到某个图像资源的唯一标识。解析src属性值的工作需要在ImageGetter.getDrawable方法中完成。</p><p>使用过Html.fromHtml方法的如下重载形式：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Spanned <span class="title">fromHtml</span><span class="params">(String source, ImageGetter imageGetter,TagHandler tagHandler)</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>有如下3个参数:</p><ul><li>source：包含Html标签（上一节介绍的标签）的字符串。</li><li>imageGetter：ImageGetter对象。当系统解析到＜img＞标签时就会调用ImageGetter.getDrawable方法，并将src属性值传入getDrawable方法。</li><li>tagHandler：TagHandler对象。这个参数并不常用，当系统处理每一个标签时都会调用TagHandler.handleTag方法。如果不使用该参数，可将该参数值设为null。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">class MainActivity : AppCompatActivity() {</span><br><span class="line">    <span class="meta">@RequiresApi</span>(Build.VERSION_CODES.N)</span><br><span class="line">    <span class="function">override fun <span class="title">onCreate</span><span class="params">(savedInstanceState: Bundle?)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        val tv = findViewById&lt;TextView&gt;(R.id.tv)</span><br><span class="line">        tv.setTextColor(Color.BLACK)</span><br><span class="line">        tv.setBackgroundColor(Color.WHITE)</span><br><span class="line">        tv.setTextSize(<span class="number">20F</span>)</span><br><span class="line">        <span class="keyword">var</span> html = <span class="string">"图像1&lt;img src='image1'/&gt;图像2&lt;img src='image2'/&gt;图像3&lt;img src='image3'/&gt;&lt;p&gt;"</span></span><br><span class="line">        html += <span class="string">"图像4&lt;a href='http://51happyblog.com'&gt;&lt;img src='image4'/&gt;&lt;/a&gt;图像5&lt;img src='image5'/&gt;"</span></span><br><span class="line">        <span class="comment">//　调用Html.fromHtml方法处理＜img＞标签，将src属性值转换为图像（Drawable对象）</span></span><br><span class="line">        val charSequence = Html.fromHtml(html, ImageGetter { source -&gt;  </span><br><span class="line">             val drawable = resources.getDrawable(getResourceId(source))</span><br><span class="line">            <span class="comment">//　第3个图像文件按50%等比压缩显示（24 * 24）</span></span><br><span class="line">            <span class="keyword">if</span> (source.equals(<span class="string">"image3"</span>)){</span><br><span class="line">                drawable.setBounds(<span class="number">0</span>,<span class="number">0</span>,drawable.intrinsicWidth/<span class="number">2</span>,drawable.intrinsicHeight/<span class="number">2</span>)</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                <span class="comment">//其他的图像文件按原大小显示</span></span><br><span class="line">                drawable.setBounds(<span class="number">0</span>,<span class="number">0</span>,drawable.intrinsicWidth,drawable.intrinsicHeight)</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span><span class="meta">@ImageGetter</span> drawable</span><br><span class="line">        },<span class="keyword">null</span>)</span><br><span class="line"></span><br><span class="line">        tv.text = charSequence</span><br><span class="line">        <span class="comment">//　只要使用了＜a＞标签，就需要设置MovementMethod对象，否则＜a＞标签除了显示效果，并不起任何作用</span></span><br><span class="line">        tv.movementMethod = LinkMovementMethod.getInstance()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">getResourceId</span><span class="params">(name: String?)</span>: Int </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//　根据资源ID名（也就是图像资源的文件名）获得Field对象</span></span><br><span class="line">            val field: Field = R.drawable::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>.<span class="title">getField</span>(<span class="title">name</span>)</span></span><br><span class="line"><span class="class">            //取得并返回资源<span class="title">ID</span></span></span><br><span class="line">            return field[null].toString().toInt()</span><br><span class="line">        } <span class="keyword">catch</span> (e: Exception) {</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/Android%E6%8E%A7%E4%BB%B6%E8%AF%A6%E8%A7%A3/3.png" alt=""></p><h3 id="为指定文本添加背景"><a href="#为指定文本添加背景" class="headerlink" title="为指定文本添加背景"></a>为指定文本添加背景</h3><ol><li><p>将原字符串转换成<strong>SpannableString</strong>或<strong>SpannableStringBuilder</strong>对象。</p></li><li><p>获得要设置样式的子字符串在原字符串中的开始位置和子字符串后面的字符的位置，也就是start和end。</p></li><li><p>创建一个Span对象（所有android.text.style包中的XxxSpan类创建的对象的统称，Xxx表示URL、BackgroundColor字符串）。</p></li><li><p>使用setSpan方法设置一个Span对象，也就是说，将要设置样式的子字符串转换成Span对象。</p></li><li><p>用处理完的SpannableString或SpannableStringBuilder对象设置相应的控件（如TextView、EditText、Button等）。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> tv = findViewById&lt;TextView&gt;(R.id.tv)</span><br><span class="line">        <span class="keyword">val</span> str = <span class="string">"没有背景黄色背景"</span></span><br><span class="line">        <span class="comment">//　第1步：将字符串转换成SpannableString对象</span></span><br><span class="line">        <span class="keyword">val</span> spanString = SpannableString(str)</span><br><span class="line">        <span class="comment">//　第2步：确定要设置的子字符串的start和end</span></span><br><span class="line">        <span class="keyword">val</span> start = <span class="number">4</span></span><br><span class="line">        <span class="keyword">val</span> end = <span class="number">8</span></span><br><span class="line">        <span class="comment">//　第3步：创建BackgroundColorSpan对象</span></span><br><span class="line">        <span class="keyword">val</span> bgColorSpan = BackgroundColorSpan(Color.YELLOW)</span><br><span class="line">        <span class="comment">//　第4步：使用setSpan方法将指定子字符串转换成BackgroundColorSpan对象</span></span><br><span class="line">        spanString.setSpan(bgColorSpan,start,end,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)</span><br><span class="line">        <span class="comment">//　第5步：用SpannableString对象设置TextView控件</span></span><br><span class="line">        tv.text = spanString</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><p>​       BackgroundColorSpan只能设置文字的背景色，为了更加通用，需要编写一个ColorSpan类，使其同时可以设置<strong>文字颜色</strong>和<strong>背景色</strong>（android.text.style.ForegroundColorSpan类可以设置文字颜色，但并没有可同时设置背景和文字颜色的Span类）。</p><p>​        在ColorSpan类中实现了CharacterStyle.updateDrawState方法。该方法在系统开始绘制要设置样式的字符串之前调用，以便修改绘制文字的属性，例如，文字颜色、背景颜色等。其中TextPaint是Paint的子类。Paint类用于描述绘制的属性，如画笔的颜色、画笔的粗细等。现在同时使用BackgroundColorSpan和ColorSpan类设置文字和背景颜色。</p><p>spanString.setSpan(bgColorSpan,start,end,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE):</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.参数start为闭区间，end为开区间。即本例中的0，8实际代表从0～7的长度。  </span><br><span class="line">2.int flags：取值有如下四个  </span><br><span class="line">  Spannable.SPAN_EXCLUSIVE_EXCLUSIVE：前后都不包括，即在指定范围的前面和后面插入新字符都不会应用新样式   </span><br><span class="line">  Spannable.SPAN_EXCLUSIVE_INCLUSIVE：前面不包括，后面包括。即仅在范围字符的后面插入新字符时会应用新样式  </span><br><span class="line">  Spannable.SPAN_INCLUSIVE_EXCLUSIVE：前面包括，后面不包括。  </span><br><span class="line">  Spannable.SPAN_INCLUSIVE_INCLUSIVE：前后都包括。</span><br></pre></td></tr></tbody></table></figure><p>ColorSpan:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorSpan</span></span>(</span><br><span class="line">    <span class="keyword">val</span> mTextColor:<span class="built_in">Int</span>,</span><br><span class="line">    <span class="keyword">val</span> mBackgroundColor:<span class="built_in">Int</span>,</span><br><span class="line">):CharacterStyle() {</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">updateDrawState</span><span class="params">(tp: <span class="type">TextPaint</span>?)</span></span>{</span><br><span class="line">        tp?.apply {</span><br><span class="line">            bgColor = mBackgroundColor</span><br><span class="line">            color = mTextColor</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> tv = findViewById&lt;TextView&gt;(R.id.tv)</span><br><span class="line">        <span class="keyword">val</span> tv2 = findViewById&lt;TextView&gt;(R.id.tv2)</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">"没有背景黄色背景"</span></span><br><span class="line">        <span class="comment">//　第1步：将字符串转换成SpannableString对象</span></span><br><span class="line">        <span class="keyword">val</span> spanString = SpannableString(str)</span><br><span class="line">        <span class="comment">//　第2步：确定要设置的子字符串的start和end</span></span><br><span class="line">        <span class="keyword">var</span> start = <span class="number">4</span></span><br><span class="line">        <span class="keyword">var</span> end = <span class="number">8</span></span><br><span class="line">        <span class="comment">//　第3步：创建BackgroundColorSpan对象</span></span><br><span class="line">        <span class="keyword">val</span> bgColorSpan = BackgroundColorSpan(Color.YELLOW)</span><br><span class="line">        <span class="comment">//　第4步：使用setSpan方法将指定子字符串转换成BackgroundColorSpan对象</span></span><br><span class="line">        spanString.setSpan(bgColorSpan,start,end,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)</span><br><span class="line">        <span class="comment">//　第5步：用SpannableString对象设置TextView控件</span></span><br><span class="line">        tv.text = spanString</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用ColorSpan</span></span><br><span class="line">        start = <span class="number">10</span></span><br><span class="line">        <span class="comment">//每一个“\n”算一个长度</span></span><br><span class="line">        str = <span class="string">"没有背景没有颜色\n\n篮网总冠军"</span></span><br><span class="line">        <span class="keyword">val</span> colorSpan = ColorSpan(Color.RED,Color.BLUE)</span><br><span class="line">        <span class="keyword">val</span> spanStr = SpannableString(str)</span><br><span class="line">        spanStr.setSpan(colorSpan,start,str.length,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)</span><br><span class="line">        tv2.text = spanStr</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/Android%E6%8E%A7%E4%BB%B6%E8%AF%A6%E8%A7%A3/4.png" alt=""></p><p>相关文章：<a href="https://www.jianshu.com/p/6e9ab528bfb3" target="_blank" rel="noopener">Android-TextView进阶用法之SpannableStringBuilder</a></p><h3 id="设置文本样式的4种方法"><a href="#设置文本样式的4种方法" class="headerlink" title="设置文本样式的4种方法"></a>设置文本样式的4种方法</h3><ol><li>将android:autoLink属性值设为true，系统会自动识别E-mail、电话、网址等特殊文本。</li><li>使用样式标签，例如，＜font＞、＜img＞等。不需要设置android:autoLink属性，但要在Java代码中使用Html.fromHtml方法将包含样式标签的字符串转换为CharSequence对象。</li><li>在Java代码中直接使用Span对象来设置文本样式。这种方法需要将文本转换成一个SpannableString或SpannableStringBuilder对象，然后使用SpannableString.setSpan或SpannableStringBuilder.setSpan方法将要设置样式的文本转换成相应的Span对象。</li><li>在字符串资源中使用＜a＞标签（只支持＜a＞标签）设置可相应动作的文本。不要设置控件标签的android:audoLink属性。</li></ol><p>上面4种方法只要涉及单击动作，就必须使用TextView.setMovementMethod方法设置相应的MovementMethod对象。</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;字符串资源补充&quot;&gt;&lt;a href=&quot;#字符串资源补充&quot; class=&quot;headerlink&quot; title=&quot;字符串资源补充&quot;&gt;&lt;/a&gt;字符串资源补充&lt;/h2&gt;&lt;h3 id=&quot;用占位符格式化字符串&quot;&gt;&lt;a href=&quot;#用占位符格式化字符串&quot; class=&quot;headerlink&quot; title=&quot;用占位符格式化字符串&quot;&gt;&lt;/a&gt;用占位符格式化字符串&lt;/h3&gt;&lt;p&gt;​        String.format（String, Object…）方法可以格式化带占位符的字符串。因此，只要在字符串资源中插入占位符就可以使用String.format方法格式化字符串资源。format方法要求占位符用%1、%2、……%n表示。其中第n个占位符与format方法的n+1个参数值对应。&lt;/p&gt;
&lt;p&gt;带占位符的字符串资源:&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- $s表示该占位符要求传入字符串，$d表示该占位符要求传入整数 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;welcome_messages&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello, %1$s! You have %2$d new messages.&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;string&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;格式化字符串资源的Java代码：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Resources res = getResources();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;String text = String.format(res.getString(R.string.welcome_messages),&lt;span class=&quot;string&quot;&gt;&quot;lining&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;用HTML标签格式化字符串资源&quot;&gt;&lt;a href=&quot;#用HTML标签格式化字符串资源&quot; class=&quot;headerlink&quot; title=&quot;用HTML标签格式化字符串资源&quot;&gt;&lt;/a&gt;用HTML标签格式化字符串资源&lt;/h3&gt;&lt;p&gt;​        字符串资源支持一些HTML标签，因此，可以直接在字符串资源中使用这些HTML标签格式化字符串。&lt;/p&gt;
&lt;p&gt;用HTML标签格式化的字符串资源:&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
    
      <category term="Android" scheme="https://hluck.github.io/tags/Android/"/>
    
      <category term="Android权威指南2" scheme="https://hluck.github.io/tags/Android%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%972/"/>
    
  </entry>
  
  <entry>
    <title>常用UI组件</title>
    <link href="https://hluck.github.io/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/"/>
    <id>https://hluck.github.io/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/</id>
    <published>2022-12-29T01:23:19.750Z</published>
    <updated>2023-01-05T16:16:56.622Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p><a href="https://jetpackcompose.cn/docs/" target="_blank" rel="noopener">Jetpack Compose中文文档</a></p><p>​        在Compose中，每个组件都是一个带有@Composable注解的函数，被称为Composable。Compose已经预置了很多基础的Composable组件，它们都是基于Material Design规范设计，例如Button、TextField、TopAppBar等。</p><p>​        在布局方面，Compose提供了Column、Row、Box三种布局组件，类似于传统视图开发中的LinearLayout(Vertical)、LinearLayout(Horizontal)、ReleativeLayout</p><h2 id="Modifier修饰符"><a href="#Modifier修饰符" class="headerlink" title="Modifier修饰符"></a>Modifier修饰符</h2><p>​        在传统开发中，使用XML文件来描述组件的样式，而Jetpack Compose设计了一个精妙的东西，它叫作Modifier。</p><p>​        Modifier允许我们通过链式调用的写法来为组件应用一系列的样式设置，如边距、字体、位移等。在Compose中，<strong>每个基础的Composable组件都有一个modifier参数，通过传入自定义的Modifier来修改组件的样式。</strong></p><h3 id="常用修饰符"><a href="#常用修饰符" class="headerlink" title="常用修饰符"></a>常用修饰符</h3><p>​        对于所有Composable组件都通用。</p><h4 id="1-Modifier-size"><a href="#1-Modifier-size" class="headerlink" title="1.Modifier.size"></a>1.Modifier.size</h4><p>用来设置被<strong>修饰组件的大小</strong></p><a id="more"></a><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">View1</span><span class="params">()</span></span>{</span><br><span class="line">    Row{</span><br><span class="line">        Image(</span><br><span class="line">            painterResource(id = R.drawable.e),</span><br><span class="line">            contentDescription = <span class="literal">null</span>,</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .size(<span class="number">60</span>.dp) <span class="comment">//with与height同时设置为60dp</span></span><br><span class="line">                .clip(CircleShape) <span class="comment">//将图片裁剪为圆形</span></span><br><span class="line">        )</span><br><span class="line">        Spacer(modifier = Modifier.width(<span class="number">10</span>.dp))</span><br><span class="line">        Image(</span><br><span class="line">            painterResource(id = R.drawable.e),</span><br><span class="line">            contentDescription = stringResource(id = androidx.compose.ui.R.string.on),</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .size(width = <span class="number">100</span>.dp, height = <span class="number">100</span>.dp) <span class="comment">//with与height同时设置为100dp</span></span><br><span class="line">                .clip(CircleShape) <span class="comment">//将图片裁剪为圆形</span></span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="2-Modifier-background"><a href="#2-Modifier-background" class="headerlink" title="2.Modifier.background"></a>2.Modifier.background</h4><p>​        <strong>用来为被修饰组件添加背景色</strong>。背景色支持设置color的<strong>纯色</strong>背景，也可以使用brush设置<strong>渐变色</strong>背景。Brush是Compose提供的用来创建线性渐变色的工具。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">View2</span><span class="params">()</span></span>{</span><br><span class="line">    Row{</span><br><span class="line">        Box(</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .size(<span class="number">50</span>.dp)</span><br><span class="line">                .background(Color.Red) <span class="comment">//设置纯色背景</span></span><br><span class="line">        ){</span><br><span class="line">            Text(text = <span class="string">"纯色"</span>,Modifier.align(Alignment.Center))</span><br><span class="line">        }</span><br><span class="line">        Spacer(modifier = Modifier.width(<span class="number">10</span>.dp))</span><br><span class="line">        Box(</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .size(<span class="number">50</span>.dp)</span><br><span class="line">                .background(brush = verticalGradientBrush) <span class="comment">//设置渐变色背景</span></span><br><span class="line">        ){</span><br><span class="line">            Text(text = <span class="string">"渐变色"</span>,Modifier.align(Alignment.Center))</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Brush渐变色</span></span><br><span class="line"><span class="keyword">val</span> verticalGradientBrush = Brush.verticalGradient(</span><br><span class="line">    colors = listOf(</span><br><span class="line">        Color.Red,</span><br><span class="line">        Color.Yellow,</span><br><span class="line">        Color.White,</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p>​        传统视图中View的background属性可以用来设置图片格式的背景，Compose的background修饰符只能设置颜色背景，图片背景需要使用Box布局配合Image组件实现。</p><h4 id="3-Modifier-fillMaxSize"><a href="#3-Modifier-fillMaxSize" class="headerlink" title="3.Modifier.fillMaxSize"></a>3.Modifier.fillMaxSize</h4><p>有的时候想要让组件在高度或者宽度上<strong>填满父空间</strong>，此时可以使用fillMaxXXX系列方法：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//填满整个父空间</span></span><br><span class="line">Box(Modifier.fillMaxSize().background(Color.Red))</span><br><span class="line"><span class="comment">//高度填满父空间</span></span><br><span class="line">Box(Modifier.fillMaxHeight().width(<span class="number">60</span>.dp).background(Color.Red))</span><br><span class="line"><span class="comment">//宽度填满父空间</span></span><br><span class="line">Box(Modifier.fillMaxWidth()height(<span class="number">60</span>.dp).background(Color.Red))</span><br></pre></td></tr></tbody></table></figure><h4 id="4-Modifier-border-amp-Modifier-padding"><a href="#4-Modifier-border-amp-Modifier-padding" class="headerlink" title="4.Modifier.border &amp; Modifier.padding"></a>4.Modifier.border &amp; Modifier.padding</h4><p>​        border用来为被修饰组件添加边框。边框可以指定颜色、粗细，以及通过Shape指定形状，比如圆角矩形等。padding用来为被修饰组件增加间隙。可以在border前后各插入一个padding，区分对外和对内的间距</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">View3</span><span class="params">()</span></span>{</span><br><span class="line">    Box(modifier = Modifier</span><br><span class="line">        .padding(<span class="number">8</span>.dp) <span class="comment">//外间隙</span></span><br><span class="line">        .border(<span class="number">2</span>.dp, Color.Red, shape = RoundedCornerShape(<span class="number">2</span>.dp))<span class="comment">//边框</span></span><br><span class="line">        .padding(<span class="number">8</span>.dp) <span class="comment">//内间隙</span></span><br><span class="line">    ){</span><br><span class="line">        Spacer(modifier = Modifier</span><br><span class="line">            .size(width = <span class="number">100</span>.dp, height = <span class="number">10</span>.dp)</span><br><span class="line">            .background(Color.Red)</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/1.png" alt=""></p><p>​        <strong>相对于传统布局有Margin和Padding之分，Compose中只有padding这一种修饰符，根据在调用链中的位置不同发挥不同作用</strong>，概念更加简洁，这也体现了Modifier中链式调用的特点。</p><h4 id="5-Modifier-offset"><a href="#5-Modifier-offset" class="headerlink" title="5.Modifier.offset"></a>5.Modifier.offset</h4><p>​        offset修饰符用来<strong>移动被修饰组件的位置</strong>，我们在使用时只分别传入水平方向与垂直方向的偏移量即可。</p><p>​        Modifier调用顺序会影响最终UI呈现的效果。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Box(modifier = Modifier</span><br><span class="line">    .size(<span class="number">80</span>.dp)</span><br><span class="line">    .offset(x = <span class="number">20</span>.dp, y = <span class="number">20</span>.dp)</span><br><span class="line">    .background(Color.Red)</span><br><span class="line">){</span><br><span class="line">    Text(text = <span class="string">"哈哈哈"</span>,Modifier.size(<span class="number">60</span>.dp))</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>也可以使用offset的重载方法，返回一个IntOffset实例:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Box(modifier = Modifier</span><br><span class="line">    .size(<span class="number">80</span>.dp)</span><br><span class="line">    .offset { IntOffset(<span class="number">20</span>.dp.roundToPx(),<span class="number">15</span>.dp.roundToPx()) }</span><br><span class="line">    .background(Color.Red)</span><br><span class="line">){</span><br><span class="line">    Text(text = <span class="string">"哈哈哈"</span>,Modifier.size(<span class="number">60</span>.dp))</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/2.png" alt=""></p><h3 id="作用域限定Modifier修饰符"><a href="#作用域限定Modifier修饰符" class="headerlink" title="作用域限定Modifier修饰符"></a>作用域限定Modifier修饰符</h3><p>​        Compose充分发挥了Kotlin的语法特性，让某些Modifier修饰符只能在特定作用域中使用，有利于类型安全地调用它们。所谓的“作用域”，在Kotlin中就是一个带有Receiver的代码块。例如Box组件参数中的conent就是一个Reciever类型为BoxScope的代码块，因此其子组件都处于BoxScope作用域中。</p><p>​        Receiver跨级访问会成为写代码时的“噪声”，加大出错的概率。Compose考虑到了这个问题，可以通过@LayoutScopeMarker注解来规避Receiver的跨级访问。常用组件Receivier作用域类型均已使用@LayoutScopeMarker注解进行了声明。</p><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/3.png" alt=""></p><p>​        <strong>Compose作用域限定实现了Modifier的安全调用，我们只能在特定作用域中调用修饰符，</strong>就像只能在FrameLayout内使用toRightOf一样，如果换作LinearLayout将无法设置toRightOf</p><p>常见的作用域限定Modifier修饰符。</p><h4 id="1-matchParentSize"><a href="#1-matchParentSize" class="headerlink" title="1.matchParentSize"></a>1.matchParentSize</h4><p>​        <strong>matchParentSize是只能在BoxScope中使用的作用域限定修饰符。当使用matchParentSize设置尺寸时，可以保证当前组件的尺寸与父组件相同</strong>。而父组件默认的是wrapContent，会根据UserInfo的尺寸确定自身的尺寸。</p><p>​        如果使用fillMaxSize取代matchParentSize，那么该组件的尺寸会被设置为父组件所允许的最大尺寸，这样会导致背景铺满整个屏幕。</p><h4 id="2-weight"><a href="#2-weight" class="headerlink" title="2.weight"></a>2.weight</h4><p>​        <strong>在RowScope与ColumnScope中，可以使用专属的weight修饰符来设置尺寸。</strong>与size修饰符不同的是，weight修饰符允许组件通过百分比设置尺寸，也就是允许组件可以自适应适配各种屏幕尺寸的移动终端设备。</p><p>例如，我们希望白色方块、蓝色方块与红色方块共享一整块Column空间，其中每种颜色方块高度各占比1/3:</p><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/4.png" alt=""></p><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/5.png" alt=""></p><h3 id="Modifier实现原理"><a href="#Modifier实现原理" class="headerlink" title="Modifier实现原理"></a>Modifier实现原理</h3><p>​        Modifier会由于调用顺序不同而产生出不同的Modifier链，Compose会按照Modifier链来顺序完成页面测量布局与渲染。</p><h4 id="1-接口实现"><a href="#1-接口实现" class="headerlink" title="1.接口实现"></a>1.接口实现</h4><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Modifier</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="type">&lt;R&gt;</span> <span class="title">foldIn</span><span class="params">(initial: <span class="type">R</span>, operation: (<span class="type">R</span>, <span class="type">Element</span>) -&gt; <span class="type">R</span>)</span></span>: R</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="type">&lt;R&gt;</span> <span class="title">foldOut</span><span class="params">(initial: <span class="type">R</span>, operation: (<span class="type">Element</span>, <span class="type">R</span>) -&gt; <span class="type">R</span>)</span></span>: R</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">any</span><span class="params">(predicate: (<span class="type">Element</span>) -&gt; <span class="type">Boolean</span>)</span></span>: <span class="built_in">Boolean</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">all</span><span class="params">(predicate: (<span class="type">Element</span>) -&gt; <span class="type">Boolean</span>)</span></span>: <span class="built_in">Boolean</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">infix</span> <span class="function"><span class="keyword">fun</span> <span class="title">then</span><span class="params">(other: <span class="type">Modifier</span>)</span></span>: Modifier =</span><br><span class="line">        <span class="keyword">if</span> (other === Modifier) <span class="keyword">this</span> <span class="keyword">else</span> CombinedModifier(<span class="keyword">this</span>, other)</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Element</span> : <span class="type">Modifier {</span></span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;R&gt;</span> <span class="title">foldIn</span><span class="params">(initial: <span class="type">R</span>, operation: (<span class="type">R</span>, <span class="type">Element</span>) -&gt; <span class="type">R</span>)</span></span>: R =</span><br><span class="line">            operation(initial, <span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;R&gt;</span> <span class="title">foldOut</span><span class="params">(initial: <span class="type">R</span>, operation: (<span class="type">Element</span>, <span class="type">R</span>) -&gt; <span class="type">R</span>)</span></span>: R =</span><br><span class="line">            operation(<span class="keyword">this</span>, initial)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">any</span><span class="params">(predicate: (<span class="type">Element</span>) -&gt; <span class="type">Boolean</span>)</span></span>: <span class="built_in">Boolean</span> = predicate(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">all</span><span class="params">(predicate: (<span class="type">Element</span>) -&gt; <span class="type">Boolean</span>)</span></span>: <span class="built_in">Boolean</span> = predicate(<span class="keyword">this</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> : Modifier {</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;R&gt;</span> <span class="title">foldIn</span><span class="params">(initial: <span class="type">R</span>, operation: (<span class="type">R</span>, <span class="type">Element</span>) -&gt; <span class="type">R</span>)</span></span>: R = initial</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;R&gt;</span> <span class="title">foldOut</span><span class="params">(initial: <span class="type">R</span>, operation: (<span class="type">Element</span>, <span class="type">R</span>) -&gt; <span class="type">R</span>)</span></span>: R = initial</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">any</span><span class="params">(predicate: (<span class="type">Element</span>) -&gt; <span class="type">Boolean</span>)</span></span>: <span class="built_in">Boolean</span> = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">all</span><span class="params">(predicate: (<span class="type">Element</span>) -&gt; <span class="type">Boolean</span>)</span></span>: <span class="built_in">Boolean</span> = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">override</span> <span class="keyword">infix</span> <span class="function"><span class="keyword">fun</span> <span class="title">then</span><span class="params">(other: <span class="type">Modifier</span>)</span></span>: Modifier = other</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span> = <span class="string">"Modifier"</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​        Modifier实际是一个接口。它有三个具体实现，分别是<strong>一个Modifier伴生对象，Modifier. Element以及CombinedModifier</strong>。</p><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/6.png" alt=""></p><p>​        Modifier伴生对象是我们对Modifier修饰符进行链式调用的起点，即Modifier.xxx()中开头的那个Modifier。CombinedModifier用于连接Modifier链中的每个Modifier对象。Modifier. Element代表具体的修饰符。当我们使用Modifier.xxx()时，其内部实际上会创建一个Modifier实例。</p><p>​        Modifier.size()内部会创建一个SizeModifier实例，并使用then进行连接，then返回一个CombinedModifier，后者用来连接两个Modifier.Element。</p><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/7.png" alt=""></p><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/8.png" alt=""></p><p>​        创建的各种Modifier本质上都是一个Modifier. Element。像LayoutModifier这类直接继承自Modifier. Element的接口，暂且称它们为Base Modifier。<strong>Base Modifier</strong>种类很多：</p><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/9.png" alt=""></p><h4 id="2-链的构建"><a href="#2-链的构建" class="headerlink" title="2.链的构建"></a>2.链的构建</h4><p>​        Modifier.size()内部会创建一个SizeModifier实例，并使用then进行连接。then返回一个CombinedModifier，后者用来连接两个Modifier.Element。</p><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/10.png" alt=""></p><p>​        CombinedModifier连接的两个Modifier分别存储在outer与inner中，从CombinedModifier的数据结构可以联想到，Compose对Modifier的遍历，就像剥洋葱一样从外(outer)到内(inner)一层层访问。outer与inner作为private属性不能被外部直接访问，Modifier专门提供了foldOut()与foldIn()用来遍历Modifier链.</p><h4 id="3-链的解析"><a href="#3-链的解析" class="headerlink" title="3.链的解析"></a>3.链的解析</h4><p>​        Compose在绘制UI时，会遍历Modifier链获取配置信息。Compose使用foldOut()与foldIn()遍历Modifier链，就像Kotlin集合的fold操作符一样，链上的所有节点被“折叠”成一个结果后，传入视图树用于渲染。</p><h2 id="常用的基础组件"><a href="#常用的基础组件" class="headerlink" title="常用的基础组件"></a>常用的基础组件</h2><h3 id="文字组件"><a href="#文字组件" class="headerlink" title="文字组件"></a>文字组件</h3><h4 id="1-Text文本"><a href="#1-Text文本" class="headerlink" title="1.Text文本"></a>1.Text文本</h4><p>​        Compose中，Text是遵循Material Design规范设计的上层文本组件，如果想脱离Material Design使用，也可以直接使用更底层的文本组件<strong>BasicText</strong>。</p><p>​        <strong>Composable组件都是函数，所有的配置来自参数传递，通过参数列表就可以了解组件的所有功能</strong></p><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/11.png" alt=""></p><p>​        Text的基本功能是显示一段文字，可以为text参数中传入要显示的文字内容。Compose也提供了stringResource方法通过R资源文件获取字符串。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定字符串</span></span><br><span class="line">Text(text = <span class="string">"Hello world."</span>)</span><br><span class="line"><span class="comment">//指定文字资源</span></span><br><span class="line">Text(text = stringResource(R.string.hello_world))</span><br></pre></td></tr></tbody></table></figure><p>​        <strong>除了stringResource, Compose也提供了获取其他类型资源的方法，例如colorResource、integerResource、painterResource（Drawable类型资源）等</strong>。</p><h4 id="2-style文字样式"><a href="#2-style文字样式" class="headerlink" title="2.style文字样式"></a>2.style文字样式</h4><p>​        style参数接受一个TextStyle类型，<strong>TextStyle</strong>中包含一系列设置文字样式的字段，例如行高、间距、字体大小、字体粗细等。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Preview(</span></span><br><span class="line"><span class="meta">    showSystemUi = true</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">HelloText</span><span class="params">()</span></span>{</span><br><span class="line">    Column {</span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">"Hello world\n"</span> + <span class="string">"Goodbye World."</span></span><br><span class="line">        )</span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">"Hello world\n"</span> + <span class="string">"Goodbye World."</span>,</span><br><span class="line">            style = TextStyle(</span><br><span class="line">                fontSize = <span class="number">25</span>.sp, <span class="comment">//字体大小</span></span><br><span class="line">                fontWeight = FontWeight.Bold, <span class="comment">//字体粗细</span></span><br><span class="line">                background = Color.Cyan,<span class="comment">//字体颜色</span></span><br><span class="line">                lineHeight = <span class="number">35</span>.sp <span class="comment">//行高</span></span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">"Hello World"</span>,</span><br><span class="line">            style = TextStyle(</span><br><span class="line">                color = Color.Gray,</span><br><span class="line">                letterSpacing = <span class="number">4</span>.sp <span class="comment">//字间距</span></span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">"Hello World"</span>,</span><br><span class="line">            textDecoration = TextDecoration.LineThrough <span class="comment">//删除线</span></span><br><span class="line">        )</span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">"Hello World"</span>,</span><br><span class="line">            <span class="comment">//TextStyle虽然是一个普通data class，但是它提供了data class那样的copy方法，可以非常高效地构造一个新实例。</span></span><br><span class="line">            <span class="comment">//MaterialTheme.typography.h6是一个预置的TextStyle</span></span><br><span class="line">            style = MaterialTheme.typography.h6.copy(fontStyle = FontStyle.Italic)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/12.png" alt=""></p><p>​        Material Desgin 2的Typography规范，定义了各类文字样式，样式名称也体现了它们的使用场景，比如H1是一级标题，BUTTON是按钮文字等.</p><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/13.png" alt=""></p><p>​        如果项目采用了Material Design设计规范，那么可以为Text的style参数直接设置Typography中预置的TextStyle。也可以脱离Material Design来定义自己的文本样式。</p><p>​        TextStyle中的大部分字段也可以在Text参数中直接设置，例如fonteSize、fontWeight、fontStyle等。注意Text参数会覆盖对TextStyle同名属性的设置。</p><h5 id="maxLines参数"><a href="#maxLines参数" class="headerlink" title="maxLines参数"></a>maxLines参数</h5><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Text(</span><br><span class="line">    text = <span class="string">"你好世界，我正在使用Jetpack Compose框架来开发我的APP界面"</span>,</span><br><span class="line">    style = MaterialTheme.typography.body1</span><br><span class="line">)</span><br><span class="line">Text(</span><br><span class="line">    text = <span class="string">"你好世界，我正在使用Jetpack Compose框架来开发我的APP界面"</span>,</span><br><span class="line">    style = MaterialTheme.typography.body1,</span><br><span class="line">    <span class="comment">//maxLines参数可以帮助我们将文本限制在指定的行数之间,当文本超过了参数设置的阈值时，文本会被截断。</span></span><br><span class="line">    maxLines = <span class="number">1</span></span><br><span class="line">)</span><br><span class="line">Text(</span><br><span class="line">    text = <span class="string">"你好世界，我正在使用Jetpack Compose框架来开发我的APP界面"</span>,</span><br><span class="line">    style = MaterialTheme.typography.body1,</span><br><span class="line">    maxLines = <span class="number">1</span>,</span><br><span class="line">    <span class="comment">//overflow可以处理文字过多的场景,在Ellipsis模式下会以...结尾</span></span><br><span class="line">    overflow = TextOverflow.Ellipsis</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/14.png" alt=""></p><h4 id="3-fontFamily字体风格"><a href="#3-fontFamily字体风格" class="headerlink" title="3.fontFamily字体风格"></a>3.fontFamily字体风格</h4><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Text(</span><br><span class="line">    text = <span class="string">"Hello world"</span></span><br><span class="line">)</span><br><span class="line">Text(</span><br><span class="line">    text = <span class="string">"Hello world"</span>,</span><br><span class="line">    fontFamily = FontFamily.Monospace</span><br><span class="line">)</span><br><span class="line">Text(</span><br><span class="line">    text = <span class="string">"Hello world"</span>,</span><br><span class="line">    fontFamily = FontFamily.Cursive</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/15.png" alt=""></p><p>​        当使用系统没有的字体时，可以右击res文件夹，选择New-&gt; Android Resource Directory &gt; Resource type &gt; font，创建font文件夹，然后将自己的字体文件拖入文件夹即可。</p><h4 id="4-AnnotatedString多样式文字"><a href="#4-AnnotatedString多样式文字" class="headerlink" title="4.AnnotatedString多样式文字"></a>4.AnnotatedString多样式文字</h4><p>​    假如要在一段文字中对局部内容应用特别格式以示突出，比如一个超链接或者一个电话号码等，此时需要用到<strong>AnnotatedString</strong>。AnnotatedString是一个数据类，除了文本值，它还包含了一个SpanStyle和ParagraphStyle的Range列表。SpanStyle用于描述在文本中子串的文字样式，ParagraphStyle则用于描述文本中子串的段落样式，Range确定子串的范围。</p><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/16.png" alt=""></p><p>​        使用<strong>buildAnnotatedString{…}</strong>，以DSL的方式构建一个AnnotatedString。其中<strong>append</strong>用来添加子串的文本，<strong>withStyle</strong>为append的子串指定文字或段落样式：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> annotatedString = buildAnnotatedString {</span><br><span class="line">    withStyle(</span><br><span class="line">        style = SpanStyle(fontSize = <span class="number">24</span>.sp)</span><br><span class="line">    ){</span><br><span class="line">        append(<span class="string">"你现在学习的章节是"</span>)</span><br><span class="line">    }</span><br><span class="line">    withStyle(</span><br><span class="line">        style = SpanStyle(</span><br><span class="line">            fontWeight = FontWeight.W900,</span><br><span class="line">            fontSize = <span class="number">24</span>.sp</span><br><span class="line">        )</span><br><span class="line">    ){</span><br><span class="line">        append(<span class="string">"Text"</span>)</span><br><span class="line">    }</span><br><span class="line">    append(<span class="string">"\n"</span>)</span><br><span class="line">    withStyle(</span><br><span class="line">        style = ParagraphStyle(lineHeight = <span class="number">25</span>.sp)</span><br><span class="line">    ){</span><br><span class="line">        append(<span class="string">"刚刚我们学会了如何应用文字样式，以及如何限制文本的行数和处理溢出的视觉效果。"</span>)</span><br><span class="line">        append(<span class="string">"\n"</span>)</span><br><span class="line">        append(<span class="string">"现在我们正在学习"</span>)</span><br><span class="line">        withStyle(</span><br><span class="line">            style = SpanStyle(</span><br><span class="line">                fontWeight = FontWeight.W900,</span><br><span class="line">                textDecoration = TextDecoration.Underline,</span><br><span class="line">                color = Color(<span class="number">0xff59A869</span>)</span><br><span class="line">            )</span><br><span class="line">        ){</span><br><span class="line">            append(<span class="string">"AnnotatedString"</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">Text(text = annotatedString)</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/17.png" alt=""></p><p>​        <strong>SpanStyle</strong>继承了TextStyle中关于文字样式相关的字段，而<strong>ParagraphStyle</strong>继承了TextStyle中控制段落的样式，例如textAlign、lineHeight等。某种意义上说<strong>SpanStyle与ParagraphStyle分拆了TextStyle，可以对子串分别进行文字以及段落样式的设置。</strong></p><p>SpanStyle或ParagraphStyle中的设置优先于整个TextStyle中的同名属性设置。</p><p>​        Compose提供了一种可点击文本组件<strong>ClickedText</strong>，可以响应我们对文字的点击，并返回点击位置。可以让AnnotatdString子串在相应的ClickedText中点击后，做出不同的动作。例如<strong>点击一个超链接样式子串可以打开浏览器、点击数字格式子串来拨打电话等</strong>。<strong>在AnnotatedString中可以为子串添加一个tag标签，在处理onClick事件时，可以根据tag实现不同的逻辑。</strong></p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> annotatedText = buildAnnotatedString {</span><br><span class="line">    withStyle(</span><br><span class="line">        style = ParagraphStyle(lineHeight = <span class="number">25</span>.sp)</span><br><span class="line">    ){</span><br><span class="line">        <span class="comment">//为pushStringAnnotation与pop之间的区域添加标签</span></span><br><span class="line">        pushStringAnnotation(tag = <span class="string">"URL"</span>, <span class="keyword">annotation</span> = <span class="string">"https://jetpackcompose.cn/docs/elements/text"</span>)</span><br><span class="line">        withStyle(</span><br><span class="line">            style = SpanStyle(</span><br><span class="line">                fontWeight = FontWeight.W900,</span><br><span class="line">                textDecoration = TextDecoration.Underline,</span><br><span class="line">                color = Color(<span class="number">0xff59A869</span>)</span><br><span class="line">            )</span><br><span class="line">        ){</span><br><span class="line">            append(<span class="string">"AnnotatedString"</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//结束之前通过推入操作添加的样式或注释。</span></span><br><span class="line">    <span class="comment">//pop()</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">ClickableText(</span><br><span class="line">    text = annotatedText,</span><br><span class="line">    onClick = { offset -&gt;</span><br><span class="line">               <span class="comment">//获取被点击区域的标签为URL的annotation并进行处理</span></span><br><span class="line">               annotatedText.getStringAnnotations(</span><br><span class="line">                   tag = <span class="string">"URL"</span>,</span><br><span class="line">                   start = offset,</span><br><span class="line">                   end = offset</span><br><span class="line">               ).firstOrNull()?.let {</span><br><span class="line">                   <span class="comment">//打开URL</span></span><br><span class="line">                   openURL(it.item)</span><br><span class="line">               }</span><br><span class="line"></span><br><span class="line">              }</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开网页</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">openURL</span><span class="params">(url:<span class="type">String</span>)</span></span>{</span><br><span class="line">    <span class="keyword">val</span> intent= Intent(Intent.ACTION_VIEW, Uri.parse(url))</span><br><span class="line">    APP.appContext.startActivity(intent)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="5-SelectionContainer选中文字"><a href="#5-SelectionContainer选中文字" class="headerlink" title="5.SelectionContainer选中文字"></a>5.SelectionContainer选中文字</h4><p>Text自身默认是不能被长按选择的。Compose提供了专门的<strong>SelectionContainer</strong>组件，对包裹的Text进行选中。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SelectionContainer {</span><br><span class="line">    Text(text = <span class="string">"我是可以被复制的文字"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="6-TextField输入框"><a href="#6-TextField输入框" class="headerlink" title="6.TextField输入框"></a>6.TextField输入框</h4><p>​        <strong>TextField</strong>组件是我们最常使用的文本输入框，它也遵循着Material Design设计准则。它也有一个低级别的底层组件，叫作<strong>BasicTextField</strong>,TextField有两种风格，一种是默认的，也就是<strong>filled</strong>，另一种是<strong>OutlinedTextField</strong>。</p><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/18.png" alt=""></p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">TextFieldSample</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="comment">//这个text是一个可以变化的文本，用来显示TextField输入框中当前输入的文本内容。</span></span><br><span class="line">    <span class="keyword">var</span> text <span class="keyword">by</span> remember {</span><br><span class="line">        mutableStateOf(<span class="string">""</span>)</span><br><span class="line">    }</span><br><span class="line">    TextField(</span><br><span class="line">        value = text,</span><br><span class="line">        onValueChange = { text = it },</span><br><span class="line">        label = { Text(text = <span class="string">"用户名"</span>) }<span class="comment">//标签</span></span><br><span class="line">    )</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/19.png" alt=""></p><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/20.png" alt=""></p><p>​        在onValueChange回调中可以获取来自软键盘的最新输入，利用这个信息来更新可变状态text，驱动界面刷新显示最新的输入文本。来自软键盘的输入内容不会直接更新TextField, TextField<strong>需要通过观察额外的状态更新自身，这也体现了声明式UI中“状态驱动UI”的基本理念</strong>。</p><h4 id="7-为输入框添加装饰"><a href="#7-为输入框添加装饰" class="headerlink" title="7.为输入框添加装饰"></a>7.为输入框添加装饰</h4><p>​        输入框都可能带有前后图标或者按钮，例如在注册界面的表单中，密码一栏可能就含有可以隐藏或者显示密码的小按钮。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">TextFieldSample</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">var</span> username <span class="keyword">by</span> remember { mutableStateOf(<span class="string">""</span>) }</span><br><span class="line">    <span class="keyword">var</span> password <span class="keyword">by</span> remember { mutableStateOf(<span class="string">""</span>) }</span><br><span class="line">    Column {</span><br><span class="line">        TextField(</span><br><span class="line">            value = username,</span><br><span class="line">            onValueChange = { username = it },</span><br><span class="line">            label = { Text(text = <span class="string">"用户名"</span>) },</span><br><span class="line">            leadingIcon = {</span><br><span class="line">                Icon(</span><br><span class="line">                    imageVector = Icons.Filled.AccountBox, contentDescription = stringResource(id = R.string.app_name)</span><br><span class="line">                )</span><br><span class="line">            }</span><br><span class="line">        )</span><br><span class="line">        TextField(</span><br><span class="line">            value = password,</span><br><span class="line">            onValueChange = { password = it },</span><br><span class="line">            label = { Text(text = <span class="string">"密码"</span>) },</span><br><span class="line">            trailingIcon = {</span><br><span class="line">                IconButton(</span><br><span class="line">                    onClick = {  }</span><br><span class="line">                ) {</span><br><span class="line">                    Icon(</span><br><span class="line">                        painter = painterResource(id = R.drawable.image1), contentDescription = stringResource(id = R.string.app_name)</span><br><span class="line">                    )</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/21.png" alt=""></p><p>​        在第一个输入框中，通过<strong>leadingIcon</strong>参数为输入框添加了<strong>前置小图标</strong>。小图标由专门的Icon组件来展示,<strong>trailingIcon</strong>可以添加<strong>后置图标</strong>。</p><p>​        leadingIcon与trailingIcon都是@Composable(()-&gt; Unit)类型，理论上可以摆放任意Composable组件。例如第二个输入框，在输入框尾部放置了一个IconButton，它除了显示Icon以外，还可以响应用户点击。</p><h4 id="8-OutlinedTextField边框样式输入框"><a href="#8-OutlinedTextField边框样式输入框" class="headerlink" title="8.OutlinedTextField边框样式输入框"></a>8.OutlinedTextField边框样式输入框</h4><p>​        OutlinedTextField是按照Material Design规范设计的另一种风格的输入框，除了外观上它带有一个边框，其他用法和TextField基本一致。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">OutLineTextFieldSample</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">var</span> text <span class="keyword">by</span> remember { mutableStateOf(<span class="string">""</span>) }</span><br><span class="line">    OutlinedTextField(</span><br><span class="line">        value = text,</span><br><span class="line">        onValueChange = { text = it },</span><br><span class="line">        label = { Text(text = <span class="string">"用户名"</span>) }</span><br><span class="line">    )</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/22.png" alt=""></p><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/23.png" alt=""></p><h4 id="9-BasicTextField基本演示"><a href="#9-BasicTextField基本演示" class="headerlink" title="9.BasicTextField基本演示"></a>9.BasicTextField基本演示</h4><p>​        BasicTextField是一个更低级别的Composable组件，与TextField、OutlinedTextField不同的是，BasicTextField拥有更多的自定义效果。由于TextField没有暴露足够的参数供我们设置，而BasicTextField可以支持大多数的定制需求.</p><p>BasicTextField提供了些可选参数：</p><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/24.png" alt=""></p><p>​        自定义的关键在于最后一个参数<strong>decorationBox</strong>。decorationBox是一个Composable，它回调了一个<strong>innerTextField</strong>函数给我们。innerTextField是框架定义好的东西，它就是文字输入的入口，所以需要创建好一个完整的输入框界面，并在合适的地方调用这个函数。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">BasicTextFieldSample</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">var</span> text <span class="keyword">by</span> remember { mutableStateOf(<span class="string">""</span>) }</span><br><span class="line">    BasicTextField(</span><br><span class="line">        value = text,</span><br><span class="line">        onValueChange = {text = it},</span><br><span class="line">        decorationBox = {innerTextField -&gt;</span><br><span class="line">            Column {</span><br><span class="line">                innerTextField()</span><br><span class="line">                Divider(</span><br><span class="line">                    thickness = <span class="number">2</span>.dp,</span><br><span class="line">                    modifier = Modifier.fillMaxWidth()</span><br><span class="line">                        .background(Color.Black)</span><br><span class="line">                )</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    )</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/25.png" alt=""></p><h4 id="10-实战：B站风格搜索框"><a href="#10-实战：B站风格搜索框" class="headerlink" title="10.实战：B站风格搜索框"></a>10.实战：B站风格搜索框</h4><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">SearchBar</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">var</span> text <span class="keyword">by</span> remember { mutableStateOf(<span class="string">""</span>) }</span><br><span class="line">    Box(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxWidth()</span><br><span class="line">            .height(<span class="number">60</span>.dp)</span><br><span class="line">            .background(Color(<span class="number">0xffd3d3d3</span>)),</span><br><span class="line">        contentAlignment = Alignment.Center <span class="comment">//将Box里面的组件放置于Box容器中央</span></span><br><span class="line">    ){</span><br><span class="line">        BasicTextField(</span><br><span class="line">            value = text,</span><br><span class="line">            onValueChange = {text = it},</span><br><span class="line">            decorationBox = { innerTextField -&gt;</span><br><span class="line">                Row(</span><br><span class="line">                    verticalAlignment = Alignment.CenterVertically,</span><br><span class="line">                    modifier = Modifier.padding(vertical = <span class="number">2</span>.dp, horizontal = <span class="number">8</span>.dp)</span><br><span class="line">                ) {</span><br><span class="line">                    Icon(</span><br><span class="line">                        imageVector = Icons.Filled.Search,</span><br><span class="line">                        contentDescription = stringResource(id = R.string.app_name),</span><br><span class="line">                    )</span><br><span class="line">                    Box(</span><br><span class="line">                        modifier = Modifier</span><br><span class="line">                            .padding(horizontal = <span class="number">10</span>.dp),</span><br><span class="line">                        <span class="comment">//设置子元素为竖直方向上的中间，水平方向上的最左边</span></span><br><span class="line">                        contentAlignment = Alignment.CenterStart</span><br><span class="line">                    ) {</span><br><span class="line">                        <span class="keyword">if</span> (text.isEmpty()){</span><br><span class="line">                            Text(</span><br><span class="line">                                text = <span class="string">"输入点东西看看吧~"</span>,</span><br><span class="line">                                style = TextStyle(</span><br><span class="line">                                    color = Color(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">128</span>)</span><br><span class="line">                                )</span><br><span class="line">                            )</span><br><span class="line">                        }</span><br><span class="line">                        innerTextField()</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (text.isNotEmpty()){</span><br><span class="line">                        IconButton(</span><br><span class="line">                            onClick = { text = <span class="string">" "</span> },</span><br><span class="line">                            modifier = Modifier.size(<span class="number">16</span>.dp)</span><br><span class="line">                        ) {</span><br><span class="line">                            Icon(</span><br><span class="line">                                imageVector = Icons.Filled.Close, contentDescription = stringResource(</span><br><span class="line">                                    id = R.string.app_name</span><br><span class="line">                                )</span><br><span class="line">                            )</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            },</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .padding(horizontal = <span class="number">10</span>.dp)</span><br><span class="line">                .background(Color.White, CircleShape)</span><br><span class="line">                .height(<span class="number">30</span>.dp)</span><br><span class="line">                .fillMaxWidth()</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/26.png" alt=""></p><h3 id="图片组件"><a href="#图片组件" class="headerlink" title="图片组件"></a>图片组件</h3><h4 id="1-Icon图标"><a href="#1-Icon图标" class="headerlink" title="1.Icon图标"></a>1.Icon图标</h4><p>Icon组件用于显示一系列小图标。Icon组件支持三种不同类型的图片设置：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">Icon</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    imageVector: <span class="type">ImageVector</span>, <span class="comment">//矢量图对象，可显示SVG格式的图标</span></span></span></span><br><span class="line"><span class="function"><span class="params">    contentDescription: <span class="type">String</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">    modifier: <span class="type">Modifier</span> = Modifier,</span></span></span><br><span class="line"><span class="function"><span class="params">    tint: <span class="type">Color</span> = LocalContentColor.current.copy(alpha = LocalContentAlpha.current)</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">Icon</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    bitmap: <span class="type">ImageBitmap</span>, <span class="comment">//位图对象，可显示JPG、PNG等格式图标</span></span></span></span><br><span class="line"><span class="function"><span class="params">    contentDescription: <span class="type">String</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">    modifier: <span class="type">Modifier</span> = Modifier,</span></span></span><br><span class="line"><span class="function"><span class="params">    tint: <span class="type">Color</span> = LocalContentColor.current.copy(alpha = LocalContentAlpha.current)</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">Icon</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    painter: <span class="type">Painter</span>,<span class="comment">//代表一个自定义画笔，可以使用画笔在Canvas上直接绘制图标</span></span></span></span><br><span class="line"><span class="function"><span class="params">    contentDescription: <span class="type">String</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">    modifier: <span class="type">Modifier</span> = Modifier,</span></span></span><br><span class="line"><span class="function"><span class="params">    tint: <span class="type">Color</span> = LocalContentColor.current.copy(alpha = LocalContentAlpha.current)</span></span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p>也可以通过res/下的图片资源来设置图标：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Icon(imageVector = ImageVector.vectorResource(id = R.drawable.ic_svg,contentDescription = <span class="string">"矢量图资源"</span>))</span><br><span class="line">Icon(bitmap = ImageBitmap.imageResource(id = R.drawable.ic_png,contentDescription = <span class="string">"图片资源"</span>))</span><br><span class="line">Icon(painter = painterResource(id = R.drawable.ic_both),contentDescription = <span class="string">"任意类型资源"</span>)</span><br></pre></td></tr></tbody></table></figure><p>​        <strong>ImageVector</strong>和<strong>ImageBitmap</strong>都提供了对应的加载Drawable资源的方法，<strong>vectorResource</strong>用来加载一个<strong>矢量XML</strong>, <strong>imageResource</strong>用来加载<strong>jpg</strong>或者<strong>png</strong>图片。<strong>painterResource</strong>对以上两种类型的Drawable都支持，内部会根据资源创建对应的画笔进行图标的绘制。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">IconSample</span><span class="params">()</span></span>{</span><br><span class="line">    Column {</span><br><span class="line">        <span class="comment">//使用Material包内置的Favorite矢量图标</span></span><br><span class="line">        Icon(imageVector = Icons.Filled.Favorite, contentDescription = <span class="literal">null</span>, tint = Color.Red)</span><br><span class="line">        Icon(imageVector = Icons.Filled.Favorite, contentDescription = <span class="literal">null</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/27.png" alt=""></p><p>​        <strong>contentDescription</strong>参数服务于系统的无障碍功能，其中的文字会转换为语言供视障人士听取内容时使用,默认为空。</p><p>​        Material包每个图标都提供了<strong>五种风格</strong>可供使用，除了<strong>Filled</strong>，还包括<strong>Outlined</strong>、<strong>Rounded</strong>、<strong>Sharp</strong>、<strong>Two tone</strong>等，都可以通过Icons.xxx.xxx的方式调用。这五种风格在一些设计上的侧重点不同。</p><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/28.png" alt=""></p><p>​        Material自带的包仅有一些常用的图标，如需使用其他所有的Material图标，可以添加依赖。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation "androidx.compose.material:material-icons-extended:$compose_version"</span><br></pre></td></tr></tbody></table></figure><h4 id="2-Image图片"><a href="#2-Image图片" class="headerlink" title="2.Image图片"></a>2.Image图片</h4><p>​        Image组件用来显示一张图片。它<strong>和Icon一样也支持三种类型的图片设置</strong>:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">Image</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    bitmap: <span class="type">ImageBitmap</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    contentDescription: <span class="type">String</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">    modifier: <span class="type">Modifier</span> = Modifier,</span></span></span><br><span class="line"><span class="function"><span class="params">    alignment: <span class="type">Alignment</span> = Alignment.Center,</span></span></span><br><span class="line"><span class="function"><span class="params">    contentScale: <span class="type">ContentScale</span> = ContentScale.Fit,</span></span></span><br><span class="line"><span class="function"><span class="params">    alpha: <span class="type">Float</span> = DefaultAlpha,</span></span></span><br><span class="line"><span class="function"><span class="params">    colorFilter: <span class="type">ColorFilter</span>? = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    filterQuality: <span class="type">FilterQuality</span> = DefaultFilterQuality</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">Image</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    imageVector: <span class="type">ImageVector</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    contentDescription: <span class="type">String</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">    modifier: <span class="type">Modifier</span> = Modifier,</span></span></span><br><span class="line"><span class="function"><span class="params">    alignment: <span class="type">Alignment</span> = Alignment.Center,</span></span></span><br><span class="line"><span class="function"><span class="params">    contentScale: <span class="type">ContentScale</span> = ContentScale.Fit,</span></span></span><br><span class="line"><span class="function"><span class="params">    alpha: <span class="type">Float</span> = DefaultAlpha,</span></span></span><br><span class="line"><span class="function"><span class="params">    colorFilter: <span class="type">ColorFilter</span>? = <span class="literal">null</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">Image</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    painter: <span class="type">Painter</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    contentDescription: <span class="type">String</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">    modifier: <span class="type">Modifier</span> = Modifier,</span></span></span><br><span class="line"><span class="function"><span class="params">    alignment: <span class="type">Alignment</span> = Alignment.Center,</span></span></span><br><span class="line"><span class="function"><span class="params">    contentScale: <span class="type">ContentScale</span> = ContentScale.Fit,</span></span></span><br><span class="line"><span class="function"><span class="params">    alpha: <span class="type">Float</span> = DefaultAlpha,</span></span></span><br><span class="line"><span class="function"><span class="params">    colorFilter: <span class="type">ColorFilter</span>? = <span class="literal">null</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br></pre></td></tr></tbody></table></figure><p>​        跟Icon组件一样，可以使用<strong>painterResource</strong>来<strong>加载一个本地图片</strong>资源传入painter参数。</p><p>​        <strong>contentScale</strong>参数用来指定图片在<strong>Image</strong>组件中的<strong>伸缩样式</strong>，类似传统视图<strong>ImageView</strong>的<strong>scaleType</strong>属性:</p><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/29.png" alt=""></p><p>​        <strong>colorFilter</strong>参数用来设置一个<strong>ColorFilter</strong>，它可以通过<strong>对绘制的图片的每个像素颜色进行修改</strong>，以实现不同的图片效果。ColorFilter有三种修改方式：<strong>tint</strong>、<strong>colorMatrix</strong>、<strong>lighting</strong>。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tint用BlendMode混合指定颜色。其中参数color将用来混合原图片每个像素的颜色</span></span><br><span class="line"><span class="comment">//参数blendMode是混合模式，blenModel有多种混合模式</span></span><br><span class="line"><span class="comment">//跟传统视图中用的Xfermode的PorterDuff.Model类似</span></span><br><span class="line">ColorFilter.tint(color: Color, blendMode: BlendMode = BlendMode.SrcIn)</span><br><span class="line"></span><br><span class="line"><span class="comment">//colorMatrix通过传入一个RGBA四通道的4x5的数字矩阵去处理颜色变化</span></span><br><span class="line"><span class="comment">//比如可以降低图片饱和读，已到达图片灰化的目的</span></span><br><span class="line">ColorFilter.colorMatrix(colorMatrix: ColorMatrix)</span><br><span class="line"></span><br><span class="line"><span class="comment">//lighting用来为图片应用一个简单的灯光效果</span></span><br><span class="line"><span class="comment">//它由两个参数定义，第一个用于颜色相乘，第二个用于添加到原图颜色</span></span><br><span class="line">ColorFilter.lighting(multiply: Color, add: Color)</span><br></pre></td></tr></tbody></table></figure><h3 id="按钮组件"><a href="#按钮组件" class="headerlink" title="按钮组件"></a>按钮组件</h3><h4 id="1-Button按钮"><a href="#1-Button按钮" class="headerlink" title="1.Button按钮"></a>1.Button按钮</h4><p>​        Button也是最常用的组件之一，它也是按照Material Design风格来实现的。</p><p>Button的参数列表：</p><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/30.png" alt=""></p><p>​        Button的第一个参数<strong>onClick</strong>是必填项，这是其最重要的功能，通过回调响应用户点击事件。最后一个参数<strong>content</strong>也是一个必填项，也是其最重要的功能之一。Compose的Button默认没有任何UI。仅仅是一个响应onClick的容器，它的<strong>UI需要在content中通过其他组件来实现</strong>。</p><p>可以根据需求，在content中实现各种复杂的Button样式。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ButtonSample</span><span class="params">()</span></span>{</span><br><span class="line">   Column {</span><br><span class="line">       Button(</span><br><span class="line">           modifier = Modifier</span><br><span class="line">               .width(<span class="number">100</span>.dp)</span><br><span class="line">               .height(<span class="number">60</span>.dp)</span><br><span class="line">               .padding(<span class="number">3</span>.dp),</span><br><span class="line">           onClick = { })</span><br><span class="line">       {</span><br><span class="line">           Icon(</span><br><span class="line">               imageVector = Icons.Filled.Done,</span><br><span class="line">               contentDescription = <span class="literal">null</span>,</span><br><span class="line">               modifier = Modifier.size(ButtonDefaults.IconSize)</span><br><span class="line">           )</span><br><span class="line">           Spacer(modifier = Modifier.size(ButtonDefaults.IconSpacing))</span><br><span class="line">           Text(text = <span class="string">"确认"</span>)</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/31.png" alt=""></p><p>​        Button有一个参数<strong>interactionSource</strong>,可以监听组件状态的事件源，通过它我们可以根据组件状态设置不同的样式，比如按钮按下时什么效果，正常时什么效果，类似传统视图中的Selector。</p><p><strong>interactionSource</strong>通过以下方法获取当前组件状态：</p><ul><li>interactionSource.<strong>collectIsPressedAsState</strong>()判断<strong>是否按下</strong>状态。</li><li>interactionSource.<strong>collectIsFocusedAsState</strong>()判断<strong>是否获取焦点</strong>的状态。</li><li>interactionSource.<strong>collectIsDraggedAsState</strong>()判断<strong>是否拖动</strong>。</li></ul><p>如，通常状态下按钮边框为白色，当处于选中状态时，框线将变为绿色：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> interactionSource = remember{</span><br><span class="line">    MutableInteractionSource()</span><br><span class="line">}</span><br><span class="line"><span class="keyword">val</span> pressState = interactionSource.collectIsPressedAsState()</span><br><span class="line"><span class="keyword">val</span> borderColor = <span class="keyword">if</span> (pressState.value) Color.Green <span class="keyword">else</span> Color.White</span><br><span class="line"></span><br><span class="line">Button(</span><br><span class="line">    modifier = Modifier</span><br><span class="line">    .width(<span class="number">100</span>.dp)</span><br><span class="line">    .height(<span class="number">60</span>.dp)</span><br><span class="line">    .padding(<span class="number">3</span>.dp),</span><br><span class="line">    onClick = { },</span><br><span class="line">    border = BorderStroke(<span class="number">2</span>.dp, color = borderColor),</span><br><span class="line">    interactionSource = interactionSource</span><br><span class="line">)</span><br><span class="line">{</span><br><span class="line">    Icon(</span><br><span class="line">        imageVector = Icons.Filled.Done,</span><br><span class="line">        contentDescription = <span class="literal">null</span>,</span><br><span class="line">        modifier = Modifier.size(ButtonDefaults.IconSize)</span><br><span class="line">    )</span><br><span class="line">    Spacer(modifier = Modifier.size(ButtonDefaults.IconSpacing))</span><br><span class="line">    Text(text = <span class="string">"确认"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/32.png" alt=""></p><p>​        <strong>任何Composable组件都可以通过Modifier.clickable修饰符化身为可点击组件</strong>,而当Button被点击后，需要额外进行一些事件响应处理，比如显示Material Desgin风格的水波纹等，这些都是其内部通过拦截Modifier.clickable事件实现的处理，由于Modifier.clikable已经被内部实现所占用，Button需要提供单独的onClick参数供开发者使用。</p><p>​        Button的onClick在底层是通过覆盖Modifier.clickable实现的，所以不要为Button设置Modifier.clickable，即使设置了，也会因为被onClick覆盖而没有任何效果。</p><h4 id="2-IconButton图标按钮"><a href="#2-IconButton图标按钮" class="headerlink" title="2.IconButton图标按钮"></a>2.IconButton图标按钮</h4><p>​        IconButton组件实际上只是Button组件的简单封装（<strong>一个可点击的图标</strong>），它一般用于应用栏中的导航或者其他行为。一般来说，我们需要在IconButton组件里提供一个图标组件，这个图标的默认尺寸一般为<strong>24×24dp</strong>。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IconButton(onClick = {  }) {</span><br><span class="line">    Icon(imageVector = Icons.Filled.Favorite, contentDescription = <span class="literal">null</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/33.png" alt=""></p><h4 id="3-FloatingActionButton悬浮按钮"><a href="#3-FloatingActionButton悬浮按钮" class="headerlink" title="3.FloatingActionButton悬浮按钮"></a>3.FloatingActionButton悬浮按钮</h4><p>​        FloatingActionButton悬浮按钮(FAB)一般代表当前页面的主要行为。FAB组件也是需要提供一个Icon组件:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FloatingActionButton(onClick = { }) {</span><br><span class="line">    Icon(imageVector = Icons.Filled.Face, contentDescription = <span class="literal">null</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/34.png" alt=""></p><p>Compose也提供了带有文字扩展的FAB，即<strong>ExtendedFloatingActionButton</strong>组件。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ExtendedFloatingActionButton(</span><br><span class="line">    icon = { Icon(imageVector = Icons.Filled.Favorite, contentDescription = <span class="literal">null</span>)},</span><br><span class="line">    text = { Text(text = <span class="string">"添加到我喜欢的"</span>) }, </span><br><span class="line">    onClick = {  }</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/35.png" alt=""></p><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h4 id="1-Checkbox复选框"><a href="#1-Checkbox复选框" class="headerlink" title="1.Checkbox复选框"></a>1.Checkbox复选框</h4><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/36.png" alt=""></p><p><strong>CheckBox</strong>允许用户从一个集合中选择一个或多个项目。复选框可以将一个选项打开或关闭。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Checkbox(</span><br><span class="line">    checked = checkedState.value,</span><br><span class="line">    onCheckedChange = { checkedState.value = it },</span><br><span class="line">    colors = CheckboxDefaults.colors(</span><br><span class="line">        checkedColor = Color(<span class="number">0xff0079d3</span>)</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/38.png" alt=""></p><h4 id="2-TriStateCheckbox三态选择框"><a href="#2-TriStateCheckbox三态选择框" class="headerlink" title="2.TriStateCheckbox三态选择框"></a>2.TriStateCheckbox三态选择框</h4><p>希望能够统一选择或者取消:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为两个checkBox定义状态</span></span><br><span class="line"><span class="keyword">val</span> (state,onStateChange) = remember { mutableStateOf(<span class="literal">true</span>) }</span><br><span class="line"><span class="keyword">val</span> (state2,onStateChange2) = remember { mutableStateOf(<span class="literal">true</span>) }</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据子CheckBox的状态来设置TriStateCheckbox状态</span></span><br><span class="line"><span class="keyword">val</span> parentState = remember(state,state2){</span><br><span class="line">    <span class="keyword">if</span> (state &amp;&amp; state2) ToggleableState.On</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (! state &amp;&amp; !state2) ToggleableState.Off</span><br><span class="line">    <span class="keyword">else</span> ToggleableState.Indeterminate</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//TriStateCheckbox可以为从属的复选框设置状态</span></span><br><span class="line"><span class="keyword">val</span> onParentClick = {</span><br><span class="line">    <span class="keyword">val</span> s = parentState != ToggleableState.On</span><br><span class="line">    onStateChange(s)</span><br><span class="line">    onStateChange2(s)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">TriStateCheckbox(</span><br><span class="line">    state = parentState,</span><br><span class="line">    onClick = onParentClick,</span><br><span class="line">    colors = CheckboxDefaults.colors(</span><br><span class="line">        checkedColor = MaterialTheme.colors.primary</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">Column(</span><br><span class="line">    Modifier.padding(<span class="number">10</span>.dp,<span class="number">0</span>.dp,<span class="number">0</span>.dp,<span class="number">0</span>.dp)</span><br><span class="line">) {</span><br><span class="line">    Checkbox(checked = state, onCheckedChange = onStateChange)</span><br><span class="line">    Checkbox(checked = state2, onCheckedChange = onStateChange2)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/39.png" alt=""></p><p>​        在子复选框全选中时，TriCheckBox显示已完成的状态，而如果只有部分复选框选中时，TriCheckBox则显示不确定的状态，当我们在这个时候单击它，则会将剩余没有选中的复选框设置为选中状态。</p><h4 id="3-Switch单选开关"><a href="#3-Switch单选开关" class="headerlink" title="3.Switch单选开关"></a>3.Switch单选开关</h4><p>​    <img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/40.png" alt=""></p><p>​    <strong>Switch</strong>组件可以控制单个项目的开启或关闭状态。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> checkState = remember {</span><br><span class="line">    mutableStateOf(<span class="literal">true</span>)</span><br><span class="line">}</span><br><span class="line">Switch(checked = checkState.value, onCheckedChange = { checkState.value = it })</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/41.png" alt=""></p><h4 id="4-Slider滑竿组件"><a href="#4-Slider滑竿组件" class="headerlink" title="4.Slider滑竿组件"></a>4.Slider滑竿组件</h4><p><strong>Slider</strong>类似于传统视图的<strong>Seekbar</strong>，可用来做音量、亮度之类的数值调整或者进度条。</p><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/42.png" alt=""></p><p>​        <strong>colors</strong>参数用来设置滑竿各部位的颜色。滑竿组件中可设置颜色的区域很多，例如滑竿小圆球的颜色、滑竿进度颜色、滑竿底色等。<strong>step</strong>参数将进度条平分成<strong>(steps+1)</strong>段。比如当分成2段时，进度条在第一段之间拉动，超过第一段的一半就自动到第一段，没超过就退回到开始位置。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Composable</span><br><span class="line">fun MySlideDemo(){</span><br><span class="line">    var sliderPosition by remember { mutableStateOf(0f) }</span><br><span class="line">    Text(text = "%.1f".format(sliderPosition * 100) + "%")</span><br><span class="line">    Slider(value = sliderPosition, onValueChange = { sliderPosition = it })</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/43.png" alt=""></p><h3 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h3><h4 id="1-Dialog对话框"><a href="#1-Dialog对话框" class="headerlink" title="1.Dialog对话框"></a>1.Dialog对话框</h4><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/44.png" alt=""></p><p>content允许通过传入自己的Composable组件来描述Dialog页面:</p><p>如：Dialog宽度不受限制，达到全屏的效果：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">DialogSample</span><span class="params">()</span></span>{</span><br><span class="line">    Column {</span><br><span class="line">        Dialog(onDismissRequest = {  },</span><br><span class="line">            properties = DialogProperties(</span><br><span class="line">                usePlatformDefaultWidth = <span class="literal">false</span></span><br><span class="line">            )</span><br><span class="line">        ) {</span><br><span class="line">            androidx.compose.material.Surface(</span><br><span class="line">                modifier = Modifier.fillMaxSize(),</span><br><span class="line">                color = Color.Gray</span><br><span class="line">            ) {</span><br><span class="line">                Text(text = <span class="string">"你好"</span>)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>properties参数定制一些对话框特有的行为：</p><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/45.png" alt=""></p><p>​        <strong>Compose的对话框不像传统视图的对话框那样通过show()、dismiss()等命令式的方式显隐，它像不同的Composable组件一样，显示与否要看是否在重组中被执行</strong>，所以它的显示与否要依赖状态控制。Dialog和普通Composable组件的不同在于其底层需要依赖独立的Window进行显示。</p><p>用状态控制Dialog的显隐：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> openDialog = remember {</span><br><span class="line">    mutableStateOf(<span class="literal">true</span>)</span><br><span class="line">}</span><br><span class="line"><span class="keyword">val</span> dialogWidth = <span class="number">200</span>.dp</span><br><span class="line"><span class="keyword">val</span> dialogHeight = <span class="number">50</span>.dp</span><br><span class="line"><span class="keyword">if</span> (openDialog.value){</span><br><span class="line">    Dialog(onDismissRequest = { openDialog.value = <span class="literal">false</span> }) {</span><br><span class="line">        Box(modifier = Modifier.size(dialogWidth, dialogHeight).background(Color.White))</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​        在Dialog组件显示过程中，<strong>当点击对话框以外区域时，onDismissRequest会触发执行</strong>，修改openDialog状态为false，触发DialogSample重组，此时判断openDialog为false, Dialog无法被执行，对话框消失。</p><h4 id="2-AlertDialog警告对话框"><a href="#2-AlertDialog警告对话框" class="headerlink" title="2.AlertDialog警告对话框"></a>2.AlertDialog警告对话框</h4><p>​        <strong>AlertDialog</strong>组件是Dialog组件的更高级别的封装，同时遵守着Material Design设计标准。<strong>它已经定位好了标题、内容文本、按钮组的位置。</strong>只需要提供相应的组件即可。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">AlertDialogSample</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">val</span> openDialog = remember {</span><br><span class="line">        mutableStateOf(<span class="literal">true</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (openDialog.value){</span><br><span class="line">        AlertDialog(</span><br><span class="line">            onDismissRequest = {  },</span><br><span class="line">            title = {</span><br><span class="line">            Text(text = <span class="string">"开启位置服务"</span>)},</span><br><span class="line">            text = {</span><br><span class="line">               Text(text = <span class="string">"这将意味着，我们会给您提供精准的位置服务，并且您将接受关于您订阅的位置信息。"</span>)</span><br><span class="line">            },</span><br><span class="line">            confirmButton = {</span><br><span class="line">                TextButton(onClick = { openDialog.value = <span class="literal">false</span> }) {</span><br><span class="line">                    Text(text = <span class="string">"同意"</span>)</span><br><span class="line">                }            </span><br><span class="line">            },</span><br><span class="line">            dismissButton = {</span><br><span class="line">                TextButton(onClick = { openDialog.value = <span class="literal">false</span> }) {</span><br><span class="line">                    Text(text = <span class="string">"取消"</span>)</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/46.png" alt=""></p><h4 id="3-进度条"><a href="#3-进度条" class="headerlink" title="3.进度条"></a>3.进度条</h4><p>​        Compose自带了两种Material Design的进度条，分别是<strong>圆形</strong>和<strong>直线</strong>的进度条，它们都有两种状态，一种是无限加载的，另一种是根据值来动态显示的,</p><p>圆形的进度条:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">CircularProgressSample</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="comment">//创建一个进度值</span></span><br><span class="line">    <span class="keyword">var</span> progress <span class="keyword">by</span> remember {</span><br><span class="line">        mutableStateOf(<span class="number">0.1f</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个动画，根据progress变量</span></span><br><span class="line">    <span class="keyword">val</span> animatedProgress <span class="keyword">by</span> animateFloatAsState(</span><br><span class="line">        targetValue = progress,</span><br><span class="line">        animationSpec = ProgressIndicatorDefaults.ProgressAnimationSpec</span><br><span class="line">    )</span><br><span class="line">    Column {</span><br><span class="line">        Spacer(modifier = Modifier.requiredHeight(<span class="number">30</span>.dp))</span><br><span class="line">        CircularProgressIndicator(progress = animatedProgress)</span><br><span class="line">        <span class="comment">//圆形进度条指示器</span></span><br><span class="line">        Spacer(modifier = Modifier.requiredHeight(<span class="number">30</span>.dp))</span><br><span class="line">        OutlinedButton(onClick = {</span><br><span class="line">            <span class="keyword">if</span> (progress &lt; <span class="number">1f</span>) progress += <span class="number">0.1f</span></span><br><span class="line">        }) {</span><br><span class="line">            Text(text = <span class="string">"增加进度"</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/47.png" alt=""></p><p>​        代码中每次单击按钮，进度就会增加10%。当不设置progress时，就是无限加载的进度条。另外还有直线进度条(<strong>LinearProgressIndicator</strong>)可供选择，使用方法完全一致。</p><h2 id="常用的布局组件"><a href="#常用的布局组件" class="headerlink" title="常用的布局组件"></a>常用的布局组件</h2><h3 id="线性布局"><a href="#线性布局" class="headerlink" title="线性布局"></a>线性布局</h3><p>​        线性布局也是Android中最常用的布局方式，对应了传统视图中的LinearLayout,Compose根据orientation的不同又分为<strong>Column</strong>和<strong>Row</strong>。</p><h4 id="1-Column"><a href="#1-Column" class="headerlink" title="1.Column"></a>1.Column</h4><p>​        <strong>Column</strong>是一个垂直线性布局组件，它能够将子项按照从上到下的顺序<strong>垂直排列</strong></p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">Column</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    modifier: <span class="type">Modifier</span> = Modifier,</span></span></span><br><span class="line"><span class="function"><span class="params">    verticalArrangement: <span class="type">Arrangement</span>.<span class="type">Vertical</span> = Arrangement.Top,</span></span></span><br><span class="line"><span class="function"><span class="params">    horizontalAlignment: <span class="type">Alignment</span>.<span class="type">Horizontal</span> = Alignment.Start,</span></span></span><br><span class="line"><span class="function"><span class="params">    content: @<span class="type">Composable</span> <span class="type">ColumnScope</span>.() -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br></pre></td></tr></tbody></table></figure><p>​        <strong>verticalArrangment</strong>和<strong>horizontalAlignment</strong>参数分别可以<strong>安排子项的垂直/水平位置</strong>，在默认的情况下，子项会以垂直方向上靠上(<strong>Arrangment. Top</strong>)，水平方向上靠左(<strong>Alignment. Start</strong>)来布置。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ColumnSample</span><span class="params">()</span></span>{</span><br><span class="line">    Column(</span><br><span class="line">        modifier = Modifier.border(<span class="number">1</span>.dp, Color.Black),</span><br><span class="line">    ) {</span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">"Hello Compose"</span>,</span><br><span class="line">            style = MaterialTheme.typography.h6</span><br><span class="line">        )</span><br><span class="line">        Image(painter = painterResource(id = R.drawable.image1), contentDescription = <span class="string">"野比大雄"</span>)</span><br><span class="line">        Text(text = <span class="string">"野比大雄"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/48.png" alt=""></p><p>​        <strong>只有指定了高度或者宽度，才能使用verticalArrangement或horizontalAlignment来定位子项在Column中的位置。</strong>如果高度与宽度都指定了，就可以同时使用以上的两参数来定位子项的水平/垂直位置</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ColumnSample</span><span class="params">()</span></span>{</span><br><span class="line">    Column(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .border(<span class="number">1</span>.dp, Color.Black)</span><br><span class="line">            .size(<span class="number">150</span>.dp),</span><br><span class="line">        verticalArrangement = Arrangement.Center,</span><br><span class="line">        horizontalAlignment = Alignment.CenterHorizontally</span><br><span class="line">    ) {</span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">"Hello Compose"</span>,</span><br><span class="line">            style = MaterialTheme.typography.h6</span><br><span class="line">        )</span><br><span class="line">        Image(painter = painterResource(id = R.drawable.image1), contentDescription = <span class="string">"野比大雄"</span>)</span><br><span class="line">        Text(text = <span class="string">"野比大雄"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/49.png" alt=""></p><p>在给<strong>Column</strong>定义了大小之后，我们能够使用<strong>Modifier.align</strong>修饰符来<strong>独立设置子项的对齐规则</strong>:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ColumnSample</span><span class="params">()</span></span>{</span><br><span class="line">    Column(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .border(<span class="number">1</span>.dp, Color.Black)</span><br><span class="line">            .size(<span class="number">150</span>.dp),</span><br><span class="line">        verticalArrangement = Arrangement.Center,</span><br><span class="line">    ) {</span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">"Hello Compose"</span>,</span><br><span class="line">            style = MaterialTheme.typography.h6,</span><br><span class="line">            modifier = Modifier.align(Alignment.CenterHorizontally)</span><br><span class="line">        )</span><br><span class="line">        Image(</span><br><span class="line">            painter = painterResource(id = R.drawable.image1),</span><br><span class="line">            contentDescription = <span class="string">"野比大雄"</span>,</span><br><span class="line">            modifier = Modifier.align(Alignment.CenterHorizontally)</span><br><span class="line">        )</span><br><span class="line">        Text(text = <span class="string">"野比大雄"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/50.png" alt=""></p><p>​        <strong>注：</strong>在对齐效果的影响下，Modifier.align修饰符会优先于Column的horizontalAlignment参数。对于垂直布局中的子项，Modifier.align只能设置自己在水平方向的位置，反之水平布局的子项，只能设置自己在垂直方向的位置。</p><h4 id="2-Row"><a href="#2-Row" class="headerlink" title="2.Row"></a>2.Row</h4><p>​        <strong>Row</strong>组件能够将内部子项按照从左到右的方向<strong>水平排列</strong>。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ColumnSample2</span><span class="params">()</span></span>{</span><br><span class="line">    androidx.compose.material.Surface(</span><br><span class="line">        shape = RoundedCornerShape(<span class="number">8</span>.dp),</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .padding(horizontal = <span class="number">12</span>.dp) <span class="comment">//设置Surface的外边距</span></span><br><span class="line">            .fillMaxWidth(),</span><br><span class="line">        elevation = <span class="number">10</span>.dp</span><br><span class="line">    ) {</span><br><span class="line">        Column(</span><br><span class="line">            modifier = Modifier.padding(<span class="number">12</span>.dp) <span class="comment">//里面内容的外边距</span></span><br><span class="line">        ) {</span><br><span class="line">            Text(</span><br><span class="line">                text = <span class="string">"Jetpack Compose 是什么？"</span>,</span><br><span class="line">                style = MaterialTheme.typography.h6</span><br><span class="line">            )</span><br><span class="line">            Spacer(modifier = Modifier.padding(vertical = <span class="number">5</span>.dp))</span><br><span class="line">            Text(text = <span class="string">"Jetpack Compose是用于构建原生Android界面的新工具包。"</span> +</span><br><span class="line">                    <span class="string">"它可简化并加快Android上的界面开发，使用更少的代码、强大的工具和直观的Kotlin API，让应用生动而精彩。"</span>)</span><br><span class="line">            Row(</span><br><span class="line">                modifier = Modifier.fillMaxWidth(),</span><br><span class="line">                horizontalArrangement = Arrangement.SpaceBetween</span><br><span class="line">            ) {</span><br><span class="line">                IconButton(onClick = {  }) {</span><br><span class="line">                    Image(painter = painterResource(id = R.drawable.image1), contentDescription = <span class="literal">null</span>)</span><br><span class="line">                }</span><br><span class="line">                IconButton(onClick = {  }) {</span><br><span class="line">                    Image(painter = painterResource(id = R.drawable.image2), contentDescription = <span class="literal">null</span>)</span><br><span class="line">                }</span><br><span class="line">                IconButton(onClick = {  }) {</span><br><span class="line">                    Image(painter = painterResource(id = R.drawable.image4), contentDescription = <span class="literal">null</span>)</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​                                                <img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/51.png" alt="">        </p><p>​        <strong>Row</strong>的<strong>horizontalArrangement</strong>参数帮助我们合理配置了按钮的水平位置。<strong>Arrangment</strong>定义了很多子项位置的对齐方式，除了<strong>Center</strong>（居中）、<strong>Start</strong>（水平靠左）、<strong>End</strong>（水平靠右）等常见的对齐方式，还有一些特定场景下可能用到的对齐方式，例如<strong>Space Between、Space Evenly</strong>等。</p><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/52.png" alt=""></p><h3 id="帧布局"><a href="#帧布局" class="headerlink" title="帧布局"></a>帧布局</h3><h4 id="1-Box"><a href="#1-Box" class="headerlink" title="1.Box"></a>1.Box</h4><p>​        <strong>Box</strong>组件是一个能够将里面的<strong>子项依次按照顺序堆叠</strong>的布局组件，在使用上类似于传统视图中的<strong>FrameLayout</strong>。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">BoxSample</span><span class="params">()</span></span>{</span><br><span class="line">    Box(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .size(<span class="number">150</span>.dp)</span><br><span class="line">            .background(Color.Green)</span><br><span class="line">    )</span><br><span class="line">    Box(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .size(<span class="number">80</span>.dp)</span><br><span class="line">            .background(Color.Red)</span><br><span class="line">    )</span><br><span class="line">    Text(</span><br><span class="line">        text = <span class="string">"世界"</span></span><br><span class="line">    )</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/53.png" alt=""></p><h4 id="2-Surface"><a href="#2-Surface" class="headerlink" title="2.Surface"></a>2.Surface</h4><p>​        <strong>Surface</strong>从字面上来理解，是一个<strong>平面</strong>，在Material Design设计准则中也同样如此，我们可以将很多的组件摆放在这个平面之上，可以设置这个平面的边框、圆角、颜色等。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">SurfaceSample</span><span class="params">()</span></span>{</span><br><span class="line">    Surface(</span><br><span class="line">        shape = RoundedCornerShape(<span class="number">8</span>.dp),</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .width(<span class="number">300</span>.dp)</span><br><span class="line">            .height(<span class="number">100</span>.dp)</span><br><span class="line">            .padding(<span class="number">6</span>.dp),</span><br><span class="line">        elevation = <span class="number">10</span>.dp,</span><br><span class="line">        ) {</span><br><span class="line">        Row(</span><br><span class="line">            modifier = Modifier.clickable {  }</span><br><span class="line">        ) {</span><br><span class="line">            Image(</span><br><span class="line">                painter = painterResource(id = R.drawable.image1),</span><br><span class="line">                contentDescription = <span class="literal">null</span>,</span><br><span class="line">                modifier = Modifier.size(<span class="number">100</span>.dp),</span><br><span class="line">                contentScale = ContentScale.Crop</span><br><span class="line">            )</span><br><span class="line">            Spacer(modifier = Modifier.padding(horizontal = <span class="number">12</span>.dp))</span><br><span class="line">            Column(</span><br><span class="line">                modifier = Modifier.fillMaxHeight(),</span><br><span class="line">                verticalArrangement = Arrangement.Center</span><br><span class="line">            ) {</span><br><span class="line">                Text(text = <span class="string">"Patient"</span>, style = MaterialTheme.typography.h6)</span><br><span class="line">                Spacer(modifier = Modifier.padding(horizontal = <span class="number">8</span>.dp))</span><br><span class="line">                Text(text = <span class="string">"耐心"</span>)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/54.png" alt=""></p><p><strong>Surface与Box之间的区别：</strong></p><ul><li>如果我们需要<strong>快速设置界面的形状、阴影、边框、颜色等，则用Surface更为合</strong>适，它可以减少Modifier的使用量。</li><li>如果只是需要简单地设置界面的背景颜色、大小，且有时候需要简单安排里面布局的位置，则可以使用Box。</li></ul><h3 id="Spacer留白"><a href="#Spacer留白" class="headerlink" title="Spacer留白"></a>Spacer留白</h3><p>​        让两个组件之间留有空白的间隔，这个时候就可以使用<strong>Spacer</strong>组件。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">SpacerSample</span><span class="params">()</span></span>{</span><br><span class="line">    Row {</span><br><span class="line">        Box(modifier = Modifier</span><br><span class="line">            .size(<span class="number">100</span>.dp)</span><br><span class="line">            .background(Color.Red))</span><br><span class="line">        Spacer(modifier = Modifier.width(<span class="number">20</span>.dp)) <span class="comment">//也可使用Modifier.padding(horizontal = xx.dp)</span></span><br><span class="line">        Box(modifier = Modifier</span><br><span class="line">            .size(<span class="number">100</span>.dp)</span><br><span class="line">            .background(Color.Magenta))</span><br><span class="line">        Spacer(modifier = Modifier.weight(<span class="number">1f</span>))</span><br><span class="line">        Box(modifier = Modifier.size(<span class="number">100</span>.dp).background(Color.Black))</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/55.png" alt=""></p><p>​        其实当Box没有content时，完全可以用Spacer替换。另外，还可以<strong>给Spacer做如下封装，可以更方便地用在水平或垂直布局中。</strong></p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">WidthSpacer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    value:<span class="type">Dp</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> = Spacer(modifier = Modifier.width(value))</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">HeightSpacer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    value:<span class="type">Dp</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span> = Spacer(modifier = Modifier.height(value))</span><br><span class="line"></span><br><span class="line">Row{</span><br><span class="line">    Button{ ... }</span><br><span class="line">    WidthSpacer(value = <span class="number">10</span>.dp)</span><br><span class="line">    Text{ ... }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="ConstraintLayout约束布局"><a href="#ConstraintLayout约束布局" class="headerlink" title="ConstraintLayout约束布局"></a>ConstraintLayout约束布局</h3><p>​        使用约束布局可以有效降低视图树高度，使视图树扁平化。约束布局在测量布局耗时上，比传统的相对布局具有更好的性能表现，并且约束布局可以根据百分比自适应各种尺寸的终端设备。因为约束布局<strong>ConstraintLayout</strong>十分好用，所以官方为我们迁移到了<strong>Compose</strong>平台。</p><p>在build.gradle(app)脚本中添加Compose版本ConstraintLayout对应的依赖项。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation "androidx.constraintlayout:constraintlayout-compose:1.0.1"</span><br></pre></td></tr></tbody></table></figure><h4 id="1-创建与绑定引用"><a href="#1-创建与绑定引用" class="headerlink" title="1.创建与绑定引用"></a>1.创建与绑定引用</h4><p>​        在<strong>Compose</strong>版本的<strong>ConstraintLayout</strong>中，可以主动<strong>创建引用并绑定至某个具体组件</strong>上，从而实现资源ID相似的功能。每个组件都可以利用其他组件的引用获取到其他组件的摆放位置信息，从而确定自己应摆放的位置。</p><p>​        在Compose中有<strong>两种创建引用</strong>的方式：<strong>createRef</strong>()和<strong>createRefs</strong>()。字面意思非常清楚，createRef()每次只会创建一个引用，而createRefs()每次可以创建多个引用（最多16个）。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//createRef()</span></span><br><span class="line"><span class="keyword">val</span> portraitImageRef = remember {</span><br><span class="line">    createRef()</span><br><span class="line">}</span><br><span class="line"><span class="keyword">val</span> usernameTextRef = remember {</span><br><span class="line">    createRef()</span><br><span class="line">}</span><br><span class="line"><span class="comment">//createRefs()</span></span><br><span class="line"><span class="keyword">val</span> (portraitImageRef,usernameTextRef) = remember {</span><br><span class="line">    createRefs()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​        接下来可以使用<strong>Modifier.constrainAs()</strong>修饰符将前面创建的引用绑定到某个具体组件上。可以在<strong>constrainAs尾部</strong>Lambda内指定组件的约束信息。<strong>只能在ConstraintLayout尾部的Lambda中使用createRef()、createRefs()创建引用，并使用Modifier.constrainAs()来绑定引用</strong>，这是因为ConstrainScope尾部Lambda的Reciever是一个ConstraintLayoutScope作用域对象。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ConstraintLayoutSample</span><span class="params">()</span></span>{</span><br><span class="line">    ConstraintLayout(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .width(<span class="number">300</span>.dp)</span><br><span class="line">            .height(<span class="number">100</span>.dp)</span><br><span class="line">            .padding(<span class="number">10</span>.dp)</span><br><span class="line">    ) {</span><br><span class="line">        <span class="comment">//类似于创建了两个id引用</span></span><br><span class="line">        <span class="keyword">val</span> portraitImageRef = remember {</span><br><span class="line">            createRef()</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">val</span> portraitImageRef2 = remember {</span><br><span class="line">            createRef()</span><br><span class="line">        }</span><br><span class="line">        Image(</span><br><span class="line">            painter = painterResource(id = R.drawable.image1),</span><br><span class="line">            contentDescription = <span class="literal">null</span>,</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .size(<span class="number">80</span>.dp)</span><br><span class="line">                .constrainAs(portraitImageRef) {</span><br><span class="line">                    <span class="comment">//居左显示</span></span><br><span class="line">                    top.linkTo(parent.top)</span><br><span class="line">                    bottom.linkTo(parent.bottom)</span><br><span class="line">                    start.linkTo(parent.start)</span><br><span class="line">                }</span><br><span class="line">        )</span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">"野比大雄"</span>,</span><br><span class="line">            fontSize = <span class="number">20</span>.sp,</span><br><span class="line">            modifier = Modifier.constrainAs(portraitImageRef2){</span><br><span class="line">                <span class="comment">//居中显示</span></span><br><span class="line">                top.linkTo(parent.top)</span><br><span class="line">                bottom.linkTo(parent.bottom)</span><br><span class="line">                end.linkTo(parent.end)</span><br><span class="line">                start.linkTo(parent.start)</span><br><span class="line">            }</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/56.png" alt=""></p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ConstraintLayoutSample2</span><span class="params">()</span></span>{</span><br><span class="line">    ConstraintLayout(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .width(<span class="number">300</span>.dp)</span><br><span class="line">            .height(<span class="number">100</span>.dp)</span><br><span class="line">            .padding(<span class="number">10</span>.dp)</span><br><span class="line">    ) {</span><br><span class="line">        <span class="keyword">val</span> (portraitImageRef,usernameTextRef,desTextRef) = remember {</span><br><span class="line">            createRefs()</span><br><span class="line">        }</span><br><span class="line">        Image(</span><br><span class="line">            painter = painterResource(id = R.drawable.image1),</span><br><span class="line">            contentDescription = stringResource(id = R.string.ybdx),</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .size(<span class="number">80</span>.dp)</span><br><span class="line">                .constrainAs(portraitImageRef) {</span><br><span class="line">                    top.linkTo(parent.top)</span><br><span class="line">                    bottom.linkTo(parent.bottom)</span><br><span class="line">                    start.linkTo(parent.start)</span><br><span class="line">                }</span><br><span class="line">        )</span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">"A Compose technophile"</span>,</span><br><span class="line">            fontSize = <span class="number">16</span>.sp,</span><br><span class="line">            maxLines = <span class="number">1</span>,</span><br><span class="line">            textAlign = TextAlign.Left,</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .constrainAs(usernameTextRef){</span><br><span class="line">                    top.linkTo(portraitImageRef.top)</span><br><span class="line">                    start.linkTo(portraitImageRef.end,<span class="number">10</span>.dp)</span><br><span class="line">                }</span><br><span class="line">        )</span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">"我的个人描述..."</span>,</span><br><span class="line">            fontSize = <span class="number">14</span>.sp,</span><br><span class="line">            color = Color.Gray,</span><br><span class="line">            fontWeight = FontWeight.Light,</span><br><span class="line">            modifier = Modifier.constrainAs(desTextRef){</span><br><span class="line">                top.linkTo(usernameTextRef.bottom,<span class="number">5</span>.dp)</span><br><span class="line">                start.linkTo(portraitImageRef.end,<span class="number">10</span>.dp)</span><br><span class="line">            }</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/57.png" alt=""></p><p>​        也可以在ConstrainScope中为指定组件的宽高信息，在ConstrainScope中直接设置width与height即可，有几个可选值可供使用:</p><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/58.png" alt=""></p><p>​        当用户名过长时，可以通过设置<strong>end</strong>来指定组件最大所允许的宽度，并将<strong>width</strong>设置为<strong>preferredWrapContent</strong>，这意味着当用户名较短时，实际宽度会随着长度进行自适应调整:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Text(</span><br><span class="line">    text = <span class="string">"A Compose technophile A Compose technophile A Compose technophile "</span>,</span><br><span class="line">    fontSize = <span class="number">16</span>.sp,</span><br><span class="line">    textAlign = TextAlign.Left,</span><br><span class="line">    modifier = Modifier</span><br><span class="line">    .constrainAs(usernameTextRef){</span><br><span class="line">        top.linkTo(portraitImageRef.top)</span><br><span class="line">        start.linkTo(portraitImageRef.end,<span class="number">10</span>.dp)</span><br><span class="line">        end.linkTo(parent.end,<span class="number">10</span>.dp)</span><br><span class="line">        width = Dimension.preferredWrapContent</span><br><span class="line">    }</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/59.png" alt=""></p><p>​        <strong>Compose</strong>版本的<strong>ConstraintLayout</strong>同样也继承了一些优质特性，例如<strong>Barrier</strong>、<strong>Guideline</strong>、<strong>Chain</strong>等，方便我们完成各种复杂场景的布局需求。</p><h4 id="2-Barrier分界线"><a href="#2-Barrier分界线" class="headerlink" title="2.Barrier分界线"></a>2.Barrier分界线</h4><p>​        假如将两个输入框左对齐摆放，且距离文本组件中最长者仍保持10dp的间隔。当用户名、密码等发生变化时，输入框的位置能够自适应调整。在这个需求场景下，就需要使用到Barrier特性，在两个文本结束处添加一条分界线即可：</p><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/60.png" alt=""></p><p>使用createEndBarrier创建一条结尾分界线，此时分界线位置位于两个文本中较长文本的结尾处：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ConstraintLayout(</span><br><span class="line">    modifier = Modifier</span><br><span class="line">    .width(<span class="number">300</span>.dp)</span><br><span class="line">    .height(<span class="number">100</span>.dp)</span><br><span class="line">    .padding(<span class="number">10</span>.dp)</span><br><span class="line">) {</span><br><span class="line">    <span class="keyword">val</span> (usernameTextRef,pwdTextRef,usernameInputRef,passwordInputRef,dividerRef) = remember {</span><br><span class="line">        createRefs()</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//创建一条结尾分界线，此时分界线位置位于两个文本中较长文本的结尾处</span></span><br><span class="line">    <span class="keyword">var</span> barrier = createEndBarrier(usernameTextRef,pwdTextRef)</span><br><span class="line">    OutlinedTextField(</span><br><span class="line">        value = <span class="string">""</span>,</span><br><span class="line">        onValueChange = {},</span><br><span class="line">        modifier = Modifier.constrainAs(usernameInputRef){</span><br><span class="line">            start.linkTo(barrier,<span class="number">10</span>.dp)</span><br><span class="line">            top.linkTo(usernameTextRef.top)</span><br><span class="line">            bottom.linkTo(usernameTextRef.bottom)</span><br><span class="line">            height = Dimension.fillToConstraints</span><br><span class="line">        }</span><br><span class="line">    )</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="3-Guideline引导线"><a href="#3-Guideline引导线" class="headerlink" title="3.Guideline引导线"></a>3.Guideline引导线</h4><p>​        Barrier分界线是需要依赖其他引用，从而确定自身位置的。可以使用<strong>Guideline</strong>不依赖任何引用，凭空创建出一条引导线。</p><p>​        假设我们希望将用户头像摆放在距离屏幕顶部2∶8的高度位置，头像以上的部分为用户背景，头像以下的部分为用户信息：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">GuidelineSample</span><span class="params">()</span></span>{</span><br><span class="line">    ConstraintLayout(</span><br><span class="line"></span><br><span class="line">    ) {</span><br><span class="line">        <span class="keyword">val</span> (userPortraitBackgroundRef,userPortraitImageRef,usernameTextRef,pwdTextRef) = remember {</span><br><span class="line">            createRefs()</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//首先可以使用createGuidelineFromTop创建从顶部出发的引导线。</span></span><br><span class="line">        <span class="keyword">val</span> guideline = createGuidelineFromTop(<span class="number">0.2f</span>)</span><br><span class="line">        <span class="comment">//接下来的用户背景就可以依赖这条引导线确定宽高了。</span></span><br><span class="line">        Box(</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .constrainAs(userPortraitBackgroundRef) {</span><br><span class="line">                    top.linkTo(parent.top)</span><br><span class="line">                    bottom.linkTo(guideline)</span><br><span class="line">                    height = Dimension.fillToConstraints</span><br><span class="line">                    width = Dimension.matchParent</span><br><span class="line">                }</span><br><span class="line">                .background(Color(<span class="number">0xff1e9fff</span>))</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">//摆放头像位置也很简单，仅需将top与bottom连接至引导线。</span></span><br><span class="line">        Image(</span><br><span class="line">            painter = painterResource(id = R.drawable.image1),</span><br><span class="line">            contentDescription = <span class="literal">null</span>,</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .constrainAs(userPortraitImageRef){</span><br><span class="line">                    top.linkTo(guideline)</span><br><span class="line">                    bottom.linkTo(guideline)</span><br><span class="line">                    start.linkTo(parent.start)</span><br><span class="line">                    end.linkTo(parent.end)</span><br><span class="line">                }</span><br><span class="line">                .size(<span class="number">100</span>.dp)</span><br><span class="line">                .clip(CircleShape)</span><br><span class="line">                .border(width = <span class="number">2</span>.dp, color = Color(<span class="number">0xff5fb878</span>), shape = CircleShape)</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/61.png" alt=""></p><h4 id="4-Chain链接约束"><a href="#4-Chain链接约束" class="headerlink" title="4.Chain链接约束"></a>4.Chain链接约束</h4><p>​        <strong>ConstraintLayout</strong>另一个非常好用的特性就是<strong>Chain</strong>链接约束，通过链接约束可以<strong>允许多个组件平均分配布局空间</strong>，这个功能类似于<strong>weight</strong>修饰符。</p><p>如：在界面上展示四句诗词：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ConstraintLayout {</span><br><span class="line">    <span class="comment">//首先需要创建四个引用对应这四句诗词</span></span><br><span class="line">    <span class="keyword">val</span> (quotesFirstLineRef,quotesSecondLineRef,quotesThirdLineRef,quotesForthLineRef) = remember {</span><br><span class="line">        createRefs()</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//接着创建一条垂直的链接约束将四句诗词连接起来，末尾参数需要传入一个ChainStyle，以表示我们期望链接布局样式</span></span><br><span class="line">    createVerticalChain(</span><br><span class="line">        quotesFirstLineRef,</span><br><span class="line">        quotesSecondLineRef,</span><br><span class="line">        quotesThirdLineRef,</span><br><span class="line">        quotesForthLineRef,</span><br><span class="line">        chainStyle = ChainStyle.Spread</span><br><span class="line">    )</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Compose提供了三种Chain Style:</p><ul><li><strong>Spread</strong>：链条中每个元素平分整个parent空间。</li><li><strong>SpreadInside</strong>：链条中首尾元素紧贴边界，剩下每个元素评分整个parent空间。</li><li><strong>Packed</strong>：链条中所有元素聚集到中间。</li></ul><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/62.png" alt=""></p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">Poetry</span><span class="params">()</span></span>{</span><br><span class="line">    ConstraintLayout {</span><br><span class="line">        <span class="comment">//首先需要创建四个引用对应这四句诗词</span></span><br><span class="line">        <span class="keyword">val</span> (quotesFirstLineRef,quotesSecondLineRef,quotesThirdLineRef,quotesForthLineRef) = remember {</span><br><span class="line">            createRefs()</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//接着创建一条垂直的链接约束将四句诗词连接起来，末尾参数需要传入一个ChainStyle，以表示我们期望链接布局样式</span></span><br><span class="line">        createVerticalChain(</span><br><span class="line">            quotesFirstLineRef,</span><br><span class="line">            quotesSecondLineRef,</span><br><span class="line">            quotesThirdLineRef,</span><br><span class="line">            quotesForthLineRef,</span><br><span class="line">            chainStyle = ChainStyle.Spread</span><br><span class="line">        )</span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">"寄蜉蝣于天地，"</span>,</span><br><span class="line">            color = Color.Black,</span><br><span class="line">            fontSize = <span class="number">30</span>.sp,</span><br><span class="line">            fontWeight = FontWeight.Bold,</span><br><span class="line">            modifier = Modifier.constrainAs(quotesFirstLineRef){</span><br><span class="line">                start.linkTo(parent.start)</span><br><span class="line">                end.linkTo(parent.end)</span><br><span class="line">            }</span><br><span class="line">        )</span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">"渺沧海之一粟。"</span>,</span><br><span class="line">            color = Color.Black,</span><br><span class="line">            fontSize = <span class="number">30</span>.sp,</span><br><span class="line">            fontWeight = FontWeight.Bold,</span><br><span class="line">            modifier = Modifier.constrainAs(quotesSecondLineRef){</span><br><span class="line">                start.linkTo(parent.start)</span><br><span class="line">                end.linkTo(parent.end)</span><br><span class="line">            }</span><br><span class="line">        )</span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">"哀吾生之须臾，"</span>,</span><br><span class="line">            color = Color.Black,</span><br><span class="line">            fontSize = <span class="number">30</span>.sp,</span><br><span class="line">            fontWeight = FontWeight.Bold,</span><br><span class="line">            modifier = Modifier.constrainAs(quotesThirdLineRef){</span><br><span class="line">                start.linkTo(parent.start)</span><br><span class="line">                end.linkTo(parent.end)</span><br><span class="line">            }</span><br><span class="line">        )</span><br><span class="line">        Text(</span><br><span class="line">            text = <span class="string">"羡长江之无穷。"</span>,</span><br><span class="line">            color = Color.Black,</span><br><span class="line">            fontSize = <span class="number">30</span>.sp,</span><br><span class="line">            fontWeight = FontWeight.Bold,</span><br><span class="line">            modifier = Modifier.constrainAs(quotesForthLineRef){</span><br><span class="line">                start.linkTo(parent.start)</span><br><span class="line">                end.linkTo(parent.end)</span><br><span class="line">            }</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/63.png" alt=""></p><h3 id="Scaffold脚手架"><a href="#Scaffold脚手架" class="headerlink" title="Scaffold脚手架"></a>Scaffold脚手架</h3><p>​        <strong>Scaffold</strong>组件实现了<strong>Material Design的布局结构</strong>，通过配合其他Material组件可以轻松地构建Material Design风格的界面。</p><p>一个带有<strong>TopAppBar</strong>的Scaffold例子:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ScaffoldSample</span><span class="params">()</span></span>{</span><br><span class="line">    Scaffold(</span><br><span class="line">        topBar = {</span><br><span class="line">            TopAppBar(</span><br><span class="line">                title = {</span><br><span class="line">                    Text(text = <span class="string">"主页"</span>)</span><br><span class="line">                },</span><br><span class="line">                navigationIcon = {</span><br><span class="line">                    IconButton(onClick = {  }) {</span><br><span class="line">                        Icon(imageVector = Icons.Filled.Menu, contentDescription = <span class="literal">null</span>)</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            )</span><br><span class="line">        }</span><br><span class="line">    ) {</span><br><span class="line">        Box(</span><br><span class="line">            modifier = Modifier.fillMaxSize(),</span><br><span class="line">            contentAlignment = Alignment.Center</span><br><span class="line">        ) {</span><br><span class="line">            Text(text = <span class="string">"主页界面"</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/64.png" alt=""></p><p>在Scaffold组件中添加一个<strong>底部导航栏(BottomNavigation)</strong>:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ScaffoldSample1</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">var</span> selectedItem <span class="keyword">by</span> remember {</span><br><span class="line">        mutableStateOf(<span class="number">0</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">val</span> items = listOf&lt;Item&gt;(</span><br><span class="line">        Item(<span class="string">"主页"</span>,Icons.Filled.Home),</span><br><span class="line">        Item(<span class="string">"列表"</span>,Icons.Filled.List),</span><br><span class="line">        Item(<span class="string">"设置"</span>,Icons.Filled.Settings)</span><br><span class="line">    )</span><br><span class="line">    Scaffold(</span><br><span class="line">        topBar = {</span><br><span class="line">            TopAppBar(</span><br><span class="line">                title = {</span><br><span class="line">                    Text(text = <span class="string">"主页"</span>)</span><br><span class="line">                },</span><br><span class="line">                navigationIcon = {</span><br><span class="line">                    IconButton(onClick = {  }) {</span><br><span class="line">                        Icon(imageVector = Icons.Filled.Menu, contentDescription = <span class="literal">null</span>)</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            )</span><br><span class="line">        },</span><br><span class="line">        bottomBar = {</span><br><span class="line">            BottomNavigation {</span><br><span class="line">                items.forEachIndexed { index, item -&gt;</span><br><span class="line">                    BottomNavigationItem(</span><br><span class="line">                        selected = selectedItem == index,</span><br><span class="line">                        onClick = { selectedItem = index },</span><br><span class="line">                        icon = { Icon(imageVector = item.imageVector, contentDescription = <span class="literal">null</span> )},</span><br><span class="line">                        alwaysShowLabel = <span class="literal">false</span>,</span><br><span class="line">                        label = { Text(text = item.name) }</span><br><span class="line">                    )</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    ) {</span><br><span class="line">        Box(</span><br><span class="line">            modifier = Modifier.fillMaxSize(),</span><br><span class="line">            contentAlignment = Alignment.Center</span><br><span class="line">        ) {</span><br><span class="line">            Text(text = <span class="string">"主页界面"</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/65.png" alt=""></p><p>​        <strong>BottomNavigation</strong>组件创造了底部导航栏的总体布局，比如高度等，这些都是按照Material Design风格设计的，要修改整体的颜色，可以在BottomNavigation的其他参数中修改。BottomNavigationItem组件则创建了具体的导航图标以及标签，在BottomNavigationItem组件中可以设置一些其他参数，例如选中/未选中时的图标颜色。设置<strong>alwaysShowLabel=false</strong>，也就是只有当前的页面才显示标签文字。</p><p>​        通过Scaffold组件创建一个<strong>侧边栏</strong>很简单，Scaffold有一个<strong>drawerContent</strong>参数，只需要传递一个自定义的Composable的<strong>content</strong>即可：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ScaffoldSample1</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">var</span> selectedItem <span class="keyword">by</span> remember {</span><br><span class="line">        mutableStateOf(<span class="number">0</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">val</span> items = listOf&lt;Item&gt;(</span><br><span class="line">        Item(<span class="string">"主页"</span>,Icons.Filled.Home),</span><br><span class="line">        Item(<span class="string">"列表"</span>,Icons.Filled.List),</span><br><span class="line">        Item(<span class="string">"设置"</span>,Icons.Filled.Settings)</span><br><span class="line">    )</span><br><span class="line">    Scaffold(</span><br><span class="line">        <span class="comment">//标题导航栏</span></span><br><span class="line">        topBar = {</span><br><span class="line">            TopAppBar(</span><br><span class="line">                title = {</span><br><span class="line">                    Text(text = <span class="string">"主页"</span>)</span><br><span class="line">                },</span><br><span class="line">                navigationIcon = {</span><br><span class="line">                    IconButton(onClick = {  }) {</span><br><span class="line">                        Icon(imageVector = Icons.Filled.Menu, contentDescription = <span class="literal">null</span>)</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            )</span><br><span class="line">        },</span><br><span class="line">        <span class="comment">//底部导航栏</span></span><br><span class="line">        bottomBar = {</span><br><span class="line">            BottomNavigation {</span><br><span class="line">                items.forEachIndexed { index, item -&gt;</span><br><span class="line">                    BottomNavigationItem(</span><br><span class="line">                        selected = selectedItem == index,</span><br><span class="line">                        onClick = { selectedItem = index },</span><br><span class="line">                        icon = { Icon(imageVector = item.imageVector, contentDescription = <span class="literal">null</span> )},</span><br><span class="line">                        alwaysShowLabel = <span class="literal">false</span>,</span><br><span class="line">                        label = { Text(text = item.name) }</span><br><span class="line">                    )</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        <span class="comment">//侧边栏</span></span><br><span class="line">        drawerContent = {</span><br><span class="line">            Text(text = <span class="string">"Hello"</span>)</span><br><span class="line">        }</span><br><span class="line">    ) {</span><br><span class="line">        Box(</span><br><span class="line">            modifier = Modifier.fillMaxSize(),</span><br><span class="line">            contentAlignment = Alignment.Center</span><br><span class="line">        ) {</span><br><span class="line">            Text(text = <span class="string">"主页界面"</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/66.png" alt=""></p><p>​        此时如果按下了系统返回键，应用会直接退出。我们希望此时只是关闭侧边栏。Compose提供了用于拦截系统返回键的组件<strong>BackHandler</strong>。此外，通过<strong>ScaffoldState</strong>可以监听侧边栏是否已打开。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ScaffoldSample1</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">var</span> selectedItem <span class="keyword">by</span> remember {</span><br><span class="line">        mutableStateOf(<span class="number">0</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">val</span> items = listOf&lt;Item&gt;(</span><br><span class="line">        Item(<span class="string">"主页"</span>,Icons.Filled.Home),</span><br><span class="line">        Item(<span class="string">"列表"</span>,Icons.Filled.List),</span><br><span class="line">        Item(<span class="string">"设置"</span>,Icons.Filled.Settings)</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">//通过ScaffoldState可以监听侧边栏是否已打开</span></span><br><span class="line">    <span class="comment">//通过rememberScaffoldState()获取包含侧边栏状态的ScaffoldState</span></span><br><span class="line">    <span class="keyword">val</span> scaffoldState = rememberScaffoldState()</span><br><span class="line">    <span class="keyword">val</span> scope = rememberCoroutineScope()</span><br><span class="line">    Scaffold(</span><br><span class="line">        <span class="comment">//标题导航栏</span></span><br><span class="line">        topBar = {</span><br><span class="line">            TopAppBar(</span><br><span class="line">                title = {</span><br><span class="line">                    Text(text = <span class="string">"主页"</span>)</span><br><span class="line">                },</span><br><span class="line">                navigationIcon = {</span><br><span class="line">                    IconButton(onClick = {  }) {</span><br><span class="line">                        Icon(imageVector = Icons.Filled.Menu, contentDescription = <span class="literal">null</span>)</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            )</span><br><span class="line">        },</span><br><span class="line">        <span class="comment">//底部导航栏</span></span><br><span class="line">        bottomBar = {</span><br><span class="line">            BottomNavigation {</span><br><span class="line">                items.forEachIndexed { index, item -&gt;</span><br><span class="line">                    BottomNavigationItem(</span><br><span class="line">                        selected = selectedItem == index,</span><br><span class="line">                        onClick = { selectedItem = index },</span><br><span class="line">                        icon = { Icon(imageVector = item.imageVector, contentDescription = <span class="literal">null</span> )},</span><br><span class="line">                        alwaysShowLabel = <span class="literal">false</span>,</span><br><span class="line">                        label = { Text(text = item.name) }</span><br><span class="line">                    )</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        <span class="comment">//侧边栏</span></span><br><span class="line">        drawerContent = {</span><br><span class="line">            Text(text = <span class="string">"Hello"</span>)</span><br><span class="line">        },</span><br><span class="line">        scaffoldState = scaffoldState</span><br><span class="line"></span><br><span class="line">    ) {</span><br><span class="line">        Box(</span><br><span class="line">            modifier = Modifier.fillMaxSize(),</span><br><span class="line">            contentAlignment = Alignment.Center</span><br><span class="line">        ) {</span><br><span class="line">            Text(text = <span class="string">"主页界面"</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//拦截系统返回键的组件BackHandler</span></span><br><span class="line">    BackHandler(</span><br><span class="line">        <span class="comment">//当侧边栏被打开时，scaffoldState.drawerState.isOpen被更新为true，</span></span><br><span class="line">        <span class="comment">// 此时，BackHandler开始监听系统返回键事件，返回键被按下则会通过scaffoldState来关闭侧边栏。</span></span><br><span class="line">        enabled = scaffoldState.drawerState.isOpen</span><br><span class="line">    ) {</span><br><span class="line">        scope.launch {</span><br><span class="line">            <span class="comment">//通过rememberCoroutineScope()创建了一个协程作用域,因为close()是一个挂起函数</span></span><br><span class="line">            scaffoldState.drawerState.close()</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>​        很多产品中都有展示组数据的需求场景，如果数据数量是可以枚举的，则仅需通过Column组件来枚举列出：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">MenuSample</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    options:<span class="type">List</span>&lt;<span class="type">Options</span>&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">    expanded:<span class="type">Boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    onDismissRequest:()-&gt;<span class="type">Unit</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>{</span><br><span class="line">    DropdownMenu(expanded = expanded, onDismissRequest = onDismissRequest) {</span><br><span class="line">        Column {</span><br><span class="line">            options.forEach{ option -&gt;</span><br><span class="line">                ListItem(text = { Text(text = option.text)})</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​        可以通过给<strong>Column</strong>的<strong>Modifier</strong>添加<strong>verticalScroll()</strong>方法来让列表实现滑动。</p><h3 id="LazyComposables"><a href="#LazyComposables" class="headerlink" title="LazyComposables"></a>LazyComposables</h3><p>​        如果列表过长，众多的内容会占用大量的内存。然而更多的内容对于用户其实都是不可见的，没必要加载到内存。所以Compose提供了专门用于<strong>处理长列表</strong>的组件，这些组件只会在能看到的列表部分进行重组和布局，它们分别是<strong>LazyColumn</strong>和<strong>LazyRow</strong>。其作用类似于传统视图中的<strong>ListView</strong>或者<strong>RecyclerView</strong>。</p><h3 id="LazyListScope作用域"><a href="#LazyListScope作用域" class="headerlink" title="LazyListScope作用域"></a>LazyListScope作用域</h3><p>​         <strong>LazyColumn</strong>和<strong>LazyRow</strong>内部都是基于<strong>LazyList</strong>组件实现的，虽然这是一个internal的内部组件，我们无法直接使用它。LazyList和其他布局类组件不同，不能在它的content里面直接裸写子Composable组件。它的content是一个<strong>LazyListScope.()-&gt; Unit</strong>类型的作用域代码块，在内部<strong>通过LazyListScope提供的item等方法来描述列表中的内容</strong>，整体符合DSL的代码风格:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">MenuSample</span><span class="params">()</span></span>{</span><br><span class="line">   LazyColumn {</span><br><span class="line">       <span class="comment">//在lazyColumn中添加一个Text</span></span><br><span class="line">       item { </span><br><span class="line">           Text(text = <span class="string">"第一项内容"</span>)</span><br><span class="line">       }</span><br><span class="line">       <span class="comment">//在第一个text之后添加五个text</span></span><br><span class="line">       items(<span class="number">5</span>){index -&gt;</span><br><span class="line">           Text(text = <span class="string">"第<span class="subst">${index + <span class="number">2</span>}</span>项内容"</span>)</span><br><span class="line">       }</span><br><span class="line">       <span class="comment">//添加另一个Text</span></span><br><span class="line">       item { </span><br><span class="line">           Text(text = <span class="string">"最后一项"</span>)</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/67.png" alt=""></p><p>​        除了<strong>item</strong>和<strong>items(Int)</strong>,<strong>LazyListScope</strong>还提供了<strong>items(List&lt; T&gt; )</strong>以及<strong>itemsIndexed(List&lt; T&gt; )</strong>扩展函数，允许直接传入一个List对象。比如像下面这样创建一个菜单: </p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">MenuSample</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    options:<span class="type">List</span>&lt;<span class="type">Options</span>&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">    expanded:<span class="type">Boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    onDismissRequest:()-&gt;<span class="type">Unit</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>{</span><br><span class="line">    DropdownMenu(expanded = expanded, onDismissRequest = onDismissRequest) {</span><br><span class="line">        LazyColumn {</span><br><span class="line">            items(options){ option -&gt; </span><br><span class="line">                ListItem(text = { Text{ option.text } })</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="内容填充"><a href="#内容填充" class="headerlink" title="内容填充"></a>内容填充</h3><p>​        有的时候也需要<strong>在列表中为内容设置外边距</strong>，这也非常容易,Lazy组件提供了<strong>contentPadding</strong>参数。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">MenuSample2</span><span class="params">()</span></span>{</span><br><span class="line">    LazyColumn(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxSize()</span><br><span class="line">            .background(Color.Gray),</span><br><span class="line">        contentPadding = PaddingValues(<span class="number">35</span>.dp)</span><br><span class="line">    ){</span><br><span class="line">        items(<span class="number">50</span>){ index -&gt;</span><br><span class="line">            ContentCard(index = index)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">ContentCard</span><span class="params">(index:<span class="type">Int</span>)</span></span>{</span><br><span class="line">    Card(</span><br><span class="line">        elevation = <span class="number">8</span>.dp,</span><br><span class="line">        modifier = Modifier.fillMaxWidth()</span><br><span class="line">    ) {</span><br><span class="line">        Box(</span><br><span class="line">            modifier = Modifier</span><br><span class="line">                .fillMaxSize()</span><br><span class="line">                .padding(<span class="number">15</span>.dp),</span><br><span class="line">            contentAlignment = Alignment.Center</span><br><span class="line">        ) {</span><br><span class="line">            Text(</span><br><span class="line">                text = <span class="string">"我是序号第<span class="subst">${index}</span>位的卡片"</span>,</span><br><span class="line">                style = MaterialTheme.typography.h5</span><br><span class="line">            )</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/68.png" alt=""></p><p>​        还能通过<strong>Arrangement</strong>来<strong>设置Lazy组件中每个项目之间的间隔</strong>(水平/竖直):</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">MenuSample2</span><span class="params">()</span></span>{</span><br><span class="line">    LazyColumn(</span><br><span class="line">        modifier = Modifier</span><br><span class="line">            .fillMaxSize()</span><br><span class="line">            .background(Color.Gray),</span><br><span class="line">        contentPadding = PaddingValues(<span class="number">35</span>.dp),</span><br><span class="line">        verticalArrangement = Arrangement.spacedBy(<span class="number">10</span>.dp)</span><br><span class="line">    ){</span><br><span class="line">        items(<span class="number">50</span>){ index -&gt;</span><br><span class="line">            ContentCard(index = index)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/29/%E5%B8%B8%E7%94%A8UI%E7%BB%84%E4%BB%B6/69.png" alt=""></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;a href=&quot;https://jetpackcompose.cn/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jetpack Compose中文文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​        在Compose中，每个组件都是一个带有@Composable注解的函数，被称为Composable。Compose已经预置了很多基础的Composable组件，它们都是基于Material Design规范设计，例如Button、TextField、TopAppBar等。&lt;/p&gt;
&lt;p&gt;​        在布局方面，Compose提供了Column、Row、Box三种布局组件，类似于传统视图开发中的LinearLayout(Vertical)、LinearLayout(Horizontal)、ReleativeLayout&lt;/p&gt;
&lt;h2 id=&quot;Modifier修饰符&quot;&gt;&lt;a href=&quot;#Modifier修饰符&quot; class=&quot;headerlink&quot; title=&quot;Modifier修饰符&quot;&gt;&lt;/a&gt;Modifier修饰符&lt;/h2&gt;&lt;p&gt;​        在传统开发中，使用XML文件来描述组件的样式，而Jetpack Compose设计了一个精妙的东西，它叫作Modifier。&lt;/p&gt;
&lt;p&gt;​        Modifier允许我们通过链式调用的写法来为组件应用一系列的样式设置，如边距、字体、位移等。在Compose中，&lt;strong&gt;每个基础的Composable组件都有一个modifier参数，通过传入自定义的Modifier来修改组件的样式。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;常用修饰符&quot;&gt;&lt;a href=&quot;#常用修饰符&quot; class=&quot;headerlink&quot; title=&quot;常用修饰符&quot;&gt;&lt;/a&gt;常用修饰符&lt;/h3&gt;&lt;p&gt;​        对于所有Composable组件都通用。&lt;/p&gt;
&lt;h4 id=&quot;1-Modifier-size&quot;&gt;&lt;a href=&quot;#1-Modifier-size&quot; class=&quot;headerlink&quot; title=&quot;1.Modifier.size&quot;&gt;&lt;/a&gt;1.Modifier.size&lt;/h4&gt;&lt;p&gt;用来设置被&lt;strong&gt;修饰组件的大小&lt;/strong&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
    
      <category term="Compose" scheme="https://hluck.github.io/tags/Compose/"/>
    
  </entry>
  
  <entry>
    <title>初识Compose</title>
    <link href="https://hluck.github.io/2022/12/28/%E5%88%9D%E8%AF%86Compose/"/>
    <id>https://hluck.github.io/2022/12/28/%E5%88%9D%E8%AF%86Compose/</id>
    <published>2022-12-28T02:00:09.273Z</published>
    <updated>2022-12-28T14:00:30.829Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="Jetpack-Compose是什么"><a href="#Jetpack-Compose是什么" class="headerlink" title="Jetpack Compose是什么"></a>Jetpack Compose是什么</h2><p>​        Jetpack Compose（简称Compose）是Android新一代UI开发框架，致力于帮助开发者用更少的代码和更直观的API完成Native UI开发。</p><p>相对于传统的UI开发方式的优势：</p><ul><li>先进的开发范式：Compose采用<strong>声明式</strong>的开发范式，开发者只需要聚焦在对UI界面的描述上，<strong>当需要渲染的数据发生变化时，框架将自动完成UI刷新</strong>。</li><li>直观易用的API: 基于Kotlin DSL打造的API紧贴<strong>函数式编程思想</strong>，相对于传统的视图开发方式，代码效率更高，实现同样的功能只需要以前一半的代码量。</li><li><strong>良好的兼容性</strong>：Compose代码与基于Android View系统的传统代码可以共存，用户可以按照喜欢的节奏将既有代码逐步过渡到Compose。</li><li>广泛的适用性：Compose最低兼容到API 21，支持市面上绝大多数手机设备的使用；Jetpack以及各种常用三方库也都第一时间与Compose进行了适配。</li></ul><h3 id="命令式UI与声明式UI"><a href="#命令式UI与声明式UI" class="headerlink" title="命令式UI与声明式UI"></a>命令式UI与声明式UI</h3><p>​        命令式用命令的方式告诉计算机如何去做事情(how to do)，计算机通过执行命令达到结果，而声明式直接告诉计算机用户想要的结果(what to do)，计算机自己去想该怎么做。</p><p>​        Compose采用声明式编程范式，开发者只需要根据状态描述UI，当状态变化时，UI会自动更新。</p><a id="more"></a><h3 id="Compose-API设计原则"><a href="#Compose-API设计原则" class="headerlink" title="Compose API设计原则"></a>Compose API设计原则</h3><p>无论是Compose预置的Composable还是开发者自己定义的Composable，都应该遵守这些原则。</p><h4 id="1-一切皆为函数"><a href="#1-一切皆为函数" class="headerlink" title="1.一切皆为函数"></a>1.一切皆为函数</h4><p>​        Compose声明式UI的基础是Composable函数。Composable函数通过多级嵌套形成结构化的函数调用链，函数调用链经过运行后生成一颗UI视图树。</p><p>​        <strong>视图树一旦生成便不可随意改变。视图的刷新依靠Composable函数的反复执行来实现。</strong>当需要显示的数据发生变化时，Compoable基于新参数再次执行，更新底层的视图树，最终完成视图的刷新。这个通过反复执行更新视图树的过程称为<strong>重组</strong>.</p><p><img src="/2022/12/28/%E5%88%9D%E8%AF%86Compose/1.png" alt=""></p><p>​        Composable函数只能在Composable函数中调用，这与挂起函数只能在协程或其他挂起函数中调用类似，都是在编译期保证的。</p><p>​        在Compose的世界中，一切组件都是函数，由于没有类的概念，因此不会有任何继承的层次结构，<strong>所有组件都是顶层函数</strong>，可以在DSL中直接调用。</p><p>​        Compose推荐Composable使用首字母大写的名词来命名，且不允许有返回值。这样在DSL中书写时可读性更好。有的Composable函数并不代表UI组件，此时可以遵循一般的函数命名规范。</p><h4 id="2-组合优于继承"><a href="#2-组合优于继承" class="headerlink" title="2.组合优于继承"></a>2.组合优于继承</h4><p>​        Composable作为函数相互没有继承关系，有利于促使开发者使用组合的视角去思考问题</p><p>相互继承”的View（左）与“组合使用”的Composable（右）:</p><p><img src="/2022/12/28/%E5%88%9D%E8%AF%86Compose/2.png" alt=""></p><p>Compose中为一个按钮添加文字的代码：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">CustomButton</span><span class="params">(text:<span class="type">String</span>)</span></span>{</span><br><span class="line">    Button{</span><br><span class="line">        Text($text)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​        在传统视图体系中，按钮的文字可能是Button类的一个属性。而Compose中需要通过Text这个Composable来组合实现。虽然按钮显示文字是一个常见需求，但是对于一个只需要显示图片的IconButton来说，文字的属性就是多余的。Button真正必要的能力就是接收用户点击而已，Compose通过组合的方式让组件的职责更加单一。</p><h4 id="3-单一数据源"><a href="#3-单一数据源" class="headerlink" title="3.单一数据源"></a>3.单一数据源</h4><p>​        传统视图的EditText，它的文字变化可能来自用户的输入，也可能来自代码某处的setText。状态变化可能不止一个来源，即所谓的多数据源。多数据源下的状态变化不容易跟踪，而且状态源过度分散会增加状态同步的工作量。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">HelloScreen</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">var</span> name <span class="keyword">by</span> rememberSavable{mutableStateOf(<span class="string">""</span>)}</span><br><span class="line">    HelloContent(name = name,onNameChange = { name = it })</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//OutlinedTextField响应用户输入后，通过onNameChanged更新外部状态name，</span></span><br><span class="line"><span class="comment">//当name变化时会驱动HelloContent重新执行，重组中OutlinedTextField也会显示最新的name。</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">HelloContent</span><span class="params">(name:<span class="type">String</span>,onNameChange:(<span class="type">String</span>) -&gt; <span class="type">Unit</span>)</span></span>{</span><br><span class="line">    Column {</span><br><span class="line">        Text(</span><br><span class="line">        text = <span class="string">"Hello,<span class="variable">$name</span>"</span>,</span><br><span class="line">        )</span><br><span class="line">        OutlinedTextField(</span><br><span class="line">        value = name,</span><br><span class="line">            onValueChange = onNameChange,</span><br><span class="line">            label = {Text(<span class="string">"Name"</span>)}</span><br><span class="line">        )</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​        <strong>单一数据源决定了Composable数据流的单向流动，数据(name)总是自上而下流动，而事件(onNameChange)总是自下而上传递</strong>。</p><h3 id="Compose与View的关系"><a href="#Compose与View的关系" class="headerlink" title="Compose与View的关系"></a>Compose与View的关系</h3><p><a href="https://mp.weixin.qq.com/s/Rl497tSplXT1bBdZl1MqVA" target="_blank" rel="noopener">【辨析】Jetpack Compose完全脱离View系统了吗？</a></p><p>​        结论： Compose在渲染时并不会转化成View，而是只有一个入口View，即AndroidComposeView我们声明的Compose布局在渲染时会转化成NodeTree，AndroidComposeView中会触发NodeTree的布局与绘制。<br>总得来说，Compose会有一个View的入口，但它的布局与渲染还是在LayoutNode上完成的，基本脱离了View。</p><p><img src="/2022/12/28/%E5%88%9D%E8%AF%86Compose/3.png" alt=""></p><p>​        传统视图体系中由View与ViewGroup构成视图树，而Compose中也有同样一颗视图树，它由LayoutNode构成，由Composition负责管理。使用Android Studio自带的Layout Inspector可以看到这个连接点就是<strong>ComposeView，它就是连接View与Compose的桥梁</strong>。</p><p>​        <strong>ComposeView</strong>有一个唯一子节点<strong>AndroidComposeView</strong>，它既是一个ViewGroup，也是LayoutNode视图树的持有者，它实现了LayoutNode视图结构与View视图结构的连接。</p><p>​        ComposeView继承自AbstractComposeView，而后者有三个子类，分别对应着Activity窗口、Dialog窗口与PopupWindow窗口。</p><p>​        <strong>ComposeView负责对Android平台的Activity窗口的适配，AndroidComposeView负责连接LayoutNode视图系统与View视图系统。</strong></p><p>​        Composition是视图树的创建者。从Composable函数到视图树的生成经历这个过程：第一步Composable函数执行后填充SlotTable, SlotTable中记录着Composable执行过程的状态信息；第二步基于SlotTable生成和更新LayoutNode视图树。Composition负责从Composable执行到视图树生成（更新）的整个过程。</p><p>​        <strong>ComposeView</strong>接入View视图后，内部的UI工作都在Compose侧闭环处理，来自<strong>AndroidComposeView</strong>的绘制、测量布局与手势事件分发等都下沉到<strong>LayoutNode</strong>去完成。ComposeView作为View可以挂载到原有View视图树中的任意位置。因此一个传统视图项目可以通过ComposeView阶段性地接入Compose。<strong>一个纯Compose页面就是将ComposeView直接挂载到ContentView上面</strong></p><p><img src="/2022/12/28/%E5%88%9D%E8%AF%86Compose/4.png" alt=""></p><h3 id="不只是Android-UI框架"><a href="#不只是Android-UI框架" class="headerlink" title="不只是Android UI框架"></a>不只是Android UI框架</h3><p>Compose并非一个简单的SDK，它是由一系列库及配套工具组成的完整的UI解决方案：</p><p><img src="/2022/12/28/%E5%88%9D%E8%AF%86Compose/5.png" alt=""></p><p>​        在开发阶段，Android Studio为我们提供了代码的实时静态检查，以及对Compose UI的实时预览功能，在编译阶段，Compose Compiler Plugin会对@Composable注解进行预处理，通过插入代码，提升了编码效率。在<strong>运行阶段，Compose从上到下分为四层，每一层都可以被单独使用</strong>，在不同维度提供能力支持</p><p><img src="/2022/12/28/%E5%88%9D%E8%AF%86Compose/6.png" alt=""></p><h2 id="第一个Compose应用"><a href="#第一个Compose应用" class="headerlink" title="第一个Compose应用"></a>第一个Compose应用</h2><p>Android Studio帮生成的HelloWorld演示程序，MainActivity.kt默认代码：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> androidx.activity.ComponentActivity</span><br><span class="line"><span class="keyword">import</span> androidx.activity.compose.setContent</span><br><span class="line"><span class="keyword">import</span> androidx.compose.foundation.layout.fillMaxSize</span><br><span class="line"><span class="keyword">import</span> androidx.compose.material3.MaterialTheme</span><br><span class="line"><span class="keyword">import</span> androidx.compose.material3.Surface</span><br><span class="line"><span class="keyword">import</span> androidx.compose.material3.Text</span><br><span class="line"><span class="keyword">import</span> androidx.compose.runtime.Composable</span><br><span class="line"><span class="keyword">import</span> androidx.compose.ui.Modifier</span><br><span class="line"><span class="keyword">import</span> androidx.compose.ui.tooling.preview.Preview</span><br><span class="line"><span class="keyword">import</span> com.study.hellocompose.ui.theme.HelloComposeTheme</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">ComponentActivity</span></span>() {</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContent {</span><br><span class="line">            HelloComposeTheme {</span><br><span class="line">                <span class="comment">// A surface container using the 'background' color from the theme</span></span><br><span class="line">                Surface(</span><br><span class="line">                    modifier = Modifier.fillMaxSize(),</span><br><span class="line">                    color = MaterialTheme.colorScheme.background</span><br><span class="line">                ) {</span><br><span class="line">                    Greeting(<span class="string">"Android"</span>)</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">Greeting</span><span class="params">(name: <span class="type">String</span>)</span></span> {</span><br><span class="line">    Text(text = <span class="string">"Hello <span class="variable">$name</span>!"</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Preview(showBackground = true)</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">DefaultPreview</span><span class="params">()</span></span> {</span><br><span class="line">    HelloComposeTheme {</span><br><span class="line">        Greeting(<span class="string">"Android"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Compose使用Kotlin DSL而非XML描述UI，所以这里不再出现setContentView的调用.</p><p>​        Kotlin DSL由Composable组件构成。例如HelloWorld中有一个名为Greeting的Composable组件。<strong>Composable组件实际上就是一个带有@Composable注解的函数。</strong></p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">Greeting</span><span class="params">(name: <span class="type">String</span>)</span></span> {</span><br><span class="line">    <span class="comment">//ext也是一个带有@Composable注解的函数，</span></span><br><span class="line">    <span class="comment">//这里将要展示的文本信息作为参数传入Text函数进行调用，Composble UI组件都是顶级函数，可以在任意位置调用</span></span><br><span class="line">    Text(text = <span class="string">"Hello <span class="variable">$name</span>!"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​        <strong>Composable函数只能在Composable函数中调用，所以肯定存在一个根Composable，这个根Composable实际上是setContent提供的。</strong></p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">setContent {</span><br><span class="line">    <span class="comment">//setContent内的第一个Composable组件是HelloWorldTheme，</span></span><br><span class="line">    <span class="comment">//它由Android Studio根据项目名称自动生成，为界面提供默认主题。内部的子组件都继承其主题的样式。</span></span><br><span class="line">    HelloComposeTheme {</span><br><span class="line">        <span class="comment">// A surface container using the 'background' color from the theme</span></span><br><span class="line">        <span class="comment">//一个摆放内容的布局类组件</span></span><br><span class="line">        Surface(</span><br><span class="line">            modifier = Modifier.fillMaxSize(),</span><br><span class="line">            color = MaterialTheme.colorScheme.background</span><br><span class="line">        ) {</span><br><span class="line">            <span class="comment">//调用Greeting组件，将其内部的Text绘制出来。</span></span><br><span class="line">            Greeting(<span class="string">"Android"</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>setContent{…}的block内部的代码就执行在根Composable中。</p><h3 id="对Compose应用进行预览"><a href="#对Compose应用进行预览" class="headerlink" title="对Compose应用进行预览"></a>对Compose应用进行预览</h3><p>​        Android Studio支持对Composable组件进行预览，只需要为希望预览的Composable函数再增加一个@Preview注解即可。需要注意预览效果要编译之后才会生效。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Preview(showBackground = true)</span></span><br><span class="line"><span class="meta">@Composable</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">DefaultPreview</span><span class="params">()</span></span> {</span><br><span class="line">    HelloComposeTheme {</span><br><span class="line">        Greeting(<span class="string">"Android"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​        当一个文件中有多个添加@Preview的Composable时，在预览面板中可以同时看到它们，这可以带来高效的开发体验，比如可以同时预览不同主题、不同分辨率下的显示效果。@Preview也允许通过参数来设置这些不同的预览效果。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置预览的界面带有背景色</span></span><br><span class="line"><span class="meta">@Preview(showBackground = true, backgroundColor = 0xff00ff00)</span></span><br><span class="line"><span class="comment">//设置预览的界面大小</span></span><br><span class="line"><span class="meta">@Preview(widthDp = 50, heightDp = 50)</span></span><br><span class="line"><span class="comment">//设置预览中的语言</span></span><br><span class="line"><span class="meta">@Preview(locale = <span class="meta-string">"fr-rFR"</span>)</span></span><br><span class="line"><span class="comment">//显示状态栏</span></span><br><span class="line"><span class="meta">@Preview(showSystemUi = true)</span></span><br><span class="line"><span class="comment">//启动夜间模式</span></span><br><span class="line"><span class="meta">@Preview(showBackground = true, uiMode = Configuration.UI_MODE_NIGHT_YES)</span></span><br><span class="line"><span class="comment">//Pixel设备中预览</span></span><br><span class="line"><span class="meta">@Preview(device = Devices.PIXEL)</span></span><br></pre></td></tr></tbody></table></figure><h3 id="已有项目引入Compose"><a href="#已有项目引入Compose" class="headerlink" title="已有项目引入Compose"></a>已有项目引入Compose</h3><p>Compose与View视图体系有良好的兼容性，允许我们阶段性地将传统视图项目改造成Compose项目。</p><h4 id="1-在工程中引入Compose"><a href="#1-在工程中引入Compose" class="headerlink" title="1.在工程中引入Compose"></a>1.在工程中引入Compose</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">implementation "androidx.compose.ui:ui:$compose_version"</span><br><span class="line">implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"</span><br><span class="line">implementation 'androidx.compose.material3:material3:1.0.0-alpha02'</span><br><span class="line">debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"</span><br><span class="line">debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"</span><br></pre></td></tr></tbody></table></figure><p>还需要在主模块的android闭包中添加Compose的编译参数:</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">buildFeatures {</span><br><span class="line">compose true</span><br><span class="line">}</span><br><span class="line">composeOptions {</span><br><span class="line">kotlinCompilerExtensionVersion '1.1.1'</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​        Compose实际上都承载在ComposeView上，如果想要在旧项目中使用Compose开发，就需要在使用处添加一个ComposeView。</p><p><img src="/2022/12/28/%E5%88%9D%E8%AF%86Compose/7.png" alt=""></p><p>接下来仅需在MainActivity中查找该View并使用setContent即可:</p><p><img src="/2022/12/28/%E5%88%9D%E8%AF%86Compose/8.png" alt=""></p><p>​        <strong>Compose代码逻辑都承载在ComposeView之上，对原有基于View的代码侵入极小。可以大胆地将自己的已有项目逐步迁移到Compose。</strong></p><h4 id="2-在Compose中使用View组件"><a href="#2-在Compose中使用View组件" class="headerlink" title="2.在Compose中使用View组件"></a>2.在Compose中使用View组件</h4><p>​        不少功能性的传统视图控件在Compose中没有对应的Composable实现，例如SurfaceView、WebView、MapView等。因此在Compose中可能会有使用传统View控件的需求。<strong>Compose提供了名为AndroidView的Composable组件，允许在Composable中插入任意基于继承自View的传统视图控件。</strong></p><p>使用AndroidView在Composable中显示一个WebView：</p><p><img src="/2022/12/28/%E5%88%9D%E8%AF%86Compose/9.png" alt=""></p><p>​        为AndroidView传入一个工厂的实现，工厂方法中可以获取Composable所在的Context，并基于其构建View视图控件。<strong>AndroidView可以有效补充Compose目前能力上的不足，扩展Composable的使用场景。</strong></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;Jetpack-Compose是什么&quot;&gt;&lt;a href=&quot;#Jetpack-Compose是什么&quot; class=&quot;headerlink&quot; title=&quot;Jetpack Compose是什么&quot;&gt;&lt;/a&gt;Jetpack Compose是什么&lt;/h2&gt;&lt;p&gt;​        Jetpack Compose（简称Compose）是Android新一代UI开发框架，致力于帮助开发者用更少的代码和更直观的API完成Native UI开发。&lt;/p&gt;
&lt;p&gt;相对于传统的UI开发方式的优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先进的开发范式：Compose采用&lt;strong&gt;声明式&lt;/strong&gt;的开发范式，开发者只需要聚焦在对UI界面的描述上，&lt;strong&gt;当需要渲染的数据发生变化时，框架将自动完成UI刷新&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;直观易用的API: 基于Kotlin DSL打造的API紧贴&lt;strong&gt;函数式编程思想&lt;/strong&gt;，相对于传统的视图开发方式，代码效率更高，实现同样的功能只需要以前一半的代码量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;良好的兼容性&lt;/strong&gt;：Compose代码与基于Android View系统的传统代码可以共存，用户可以按照喜欢的节奏将既有代码逐步过渡到Compose。&lt;/li&gt;
&lt;li&gt;广泛的适用性：Compose最低兼容到API 21，支持市面上绝大多数手机设备的使用；Jetpack以及各种常用三方库也都第一时间与Compose进行了适配。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;命令式UI与声明式UI&quot;&gt;&lt;a href=&quot;#命令式UI与声明式UI&quot; class=&quot;headerlink&quot; title=&quot;命令式UI与声明式UI&quot;&gt;&lt;/a&gt;命令式UI与声明式UI&lt;/h3&gt;&lt;p&gt;​        命令式用命令的方式告诉计算机如何去做事情(how to do)，计算机通过执行命令达到结果，而声明式直接告诉计算机用户想要的结果(what to do)，计算机自己去想该怎么做。&lt;/p&gt;
&lt;p&gt;​        Compose采用声明式编程范式，开发者只需要根据状态描述UI，当状态变化时，UI会自动更新。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
    
      <category term="Compose" scheme="https://hluck.github.io/tags/Compose/"/>
    
  </entry>
  
  <entry>
    <title>Activity高级部分</title>
    <link href="https://hluck.github.io/2022/12/26/Activity%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86/"/>
    <id>https://hluck.github.io/2022/12/26/Activity%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86/</id>
    <published>2022-12-26T06:31:31.756Z</published>
    <updated>2023-01-02T02:05:01.964Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="Activity-XML属性详解"><a href="#Activity-XML属性详解" class="headerlink" title="Activity XML属性详解"></a>Activity XML属性详解</h2><h3 id="设置Activity的基本信息"><a href="#设置Activity的基本信息" class="headerlink" title="设置Activity的基本信息"></a>设置Activity的基本信息</h3><p>​        android:name是＜activity＞标签中唯一必须设置的属性，该属性表示窗口类的名称。</p><p>​        android:label和android:icon属性分别用于设置窗口标题的文本和图像。</p><p>​        ＜application＞标签也同样有android:label和android:icon属性。</p><h3 id="屏幕方向切换（android-screenOrientation）"><a href="#屏幕方向切换（android-screenOrientation）" class="headerlink" title="屏幕方向切换（android:screenOrientation）"></a>屏幕方向切换（android:screenOrientation）</h3><p>​        android:screenOrientation属性值为枚举类型，默认值是unspecified。</p><p>​        ActivityInfo类提供了一些常量用来与android:screenOrientation属性值一一对应。</p><a id="more"></a><p><img src="/2022/12/26/Activity%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86/1.png" alt=""></p><p><img src="/2022/12/26/Activity%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86/2.png" alt=""></p><p>​        如果要在声明窗口时指定屏幕旋转方向，需要使用＜activity＞标签的android:screenOrientation属性，如果用Java代码设置窗口的屏幕旋转方向，需要调用Activity. setRequestedOrientation方法，该方法只有一个参数，参数值就是表中给出的在ActivityInfo类中定义的常量。</p><h3 id="阻止Activity销毁和重建（android-configChanges）"><a href="#阻止Activity销毁和重建（android-configChanges）" class="headerlink" title="阻止Activity销毁和重建（android:configChanges）"></a>阻止Activity销毁和重建（android:configChanges）</h3><p>​        android:configChanges属性值为枚举类型，无默认值。</p><p>​        onConfigurationChanged方法只有一个newConfig参数，从该参数中可以获取配置变化后的值，例如，屏幕旋转后是横屏，还是竖屏。屏幕尺寸变化后的屏幕宽度和高度。</p><p>​        android:configChanges属性可以设置一个或多个配置，这些配置都用字符串描述，如果设置多个配置，中间用“|”分割，“|”与配置字符串之间不能有空格、Tab等字符。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:configChanges="orientation|screenSize"</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/26/Activity%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86/4.png" alt=""></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:name</span>=<span class="string">".MainActivity"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:configChanges</span>=<span class="string">"orientation|screenSize"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">               <span class="attr">android:name</span>=<span class="string">"android.app.lib_name"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">android:value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> name = <span class="string">"default"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        Log.d(<span class="string">"invoked method"</span>, <span class="string">"onCreate"</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroy</span><span class="params">()</span></span> {</span><br><span class="line">        Log.d(<span class="string">"invoked method"</span>, <span class="string">"onDestroy"</span>)</span><br><span class="line">        <span class="keyword">super</span>.onDestroy()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onClick_SetVar</span><span class="params">(v:<span class="type">View</span>)</span></span>{</span><br><span class="line">        name = <span class="string">"android"</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onConfigurationChanged</span><span class="params">(newConfig: <span class="type">Configuration</span>)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onConfigurationChanged(newConfig)</span><br><span class="line">        <span class="keyword">if</span> (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE){</span><br><span class="line">            Log.d(<span class="string">"orientation"</span>, <span class="string">"landscape"</span>)</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (newConfig.orientation == Configuration.ORIENTATION_PORTRAIT){</span><br><span class="line">            Log.d(<span class="string">"orientation"</span>, <span class="string">"portrait"</span>)</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        Log.d(<span class="string">"screen_width_dp"</span>, newConfig.screenWidthDp.toString())</span><br><span class="line">        Log.d(<span class="string">"screen_height_dp"</span>, newConfig.screenHeightDp.toString())</span><br><span class="line"></span><br><span class="line">        Log.d(<span class="string">"name"</span>, name)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​        当窗口的旋转方向改变时并没有调用onDestroy和onCreate方法，这也就意味着当前窗口对象并没有销毁和重新创建。而后面的日志信息是在onConfigurationChanged方法中输出的，这也充分说明了在屏幕旋转方向变化后仍然使用原来的窗口对象，并调用了该窗口对象的onConfigurationChanged方法。</p><h3 id="允许Activity被实例化（android-enabled）"><a href="#允许Activity被实例化（android-enabled）" class="headerlink" title="允许Activity被实例化（android:enabled）"></a>允许Activity被实例化（android:enabled）</h3><p>​        android:enabled属性值为布尔类型，默认值是true。</p><p>​        要实例化Android应用中的某个窗口，该窗口对应的＜activity＞标签的android:enabled属性值必须为true。该属性的默认值是true。</p><h3 id="在最近应用列表中显示（android-excludeFromRecents）"><a href="#在最近应用列表中显示（android-excludeFromRecents）" class="headerlink" title="在最近应用列表中显示（android:excludeFromRecents）"></a>在最近应用列表中显示（android:excludeFromRecents）</h3><p>​        不想让自己的Android应用程序在该列表中显示，需要将主窗口的＜activity＞标签的<strong>android:excludeFromRecents</strong>属性设为true即可。该属性的默认值为false。</p><h3 id="允许其他程序访问当前窗口（android-exported）"><a href="#允许其他程序访问当前窗口（android-exported）" class="headerlink" title="允许其他程序访问当前窗口（android:exported）"></a>允许其他程序访问当前窗口（android:exported）</h3><p>​        android:exported属性值为布尔类型，默认值是true。</p><h3 id="硬件加速（android-hardwareAccelerated）"><a href="#硬件加速（android-hardwareAccelerated）" class="headerlink" title="硬件加速（android:hardwareAccelerated）"></a>硬件加速（android:hardwareAccelerated）</h3><p>​        <strong>android:hardwareAccelerated</strong>属性值为布尔类型，默认值是false。</p><p>​        将android:hardwareAccelerated属性设为true（该属性的默认值为false），表示当前窗口在Canvas、Paint、Xfermode、ColorFilter、Shader和Camera上的大多数操作将被加速。加速的结果就是使动画和滚动更平滑，并且拥有更快的响应速度。这里的OpenGL硬件加速并不需要显式地调用OpenGL API，系统会自动进行处理。代价是要占用更多的内存和CPU计算时间.</p><h3 id="在多进程中创建窗口实例（android-multiprocess）"><a href="#在多进程中创建窗口实例（android-multiprocess）" class="headerlink" title="在多进程中创建窗口实例（android:multiprocess）"></a>在多进程中创建窗口实例（android:multiprocess）</h3><p>​        <strong>android:multiprocess</strong>属性值为布尔类型，默认值是false。</p><p>​        默认情况下，窗口类的所有实例都运行在窗口类所在的应用程序的进程中，也就是说窗口类的所有实例只能运行在一个进程中，该进程通常是包含窗口类的应用程序的进程。但如果将android:multiprocess属性的值设为true，则窗口类的实例可以运行在多个进程中。</p><h3 id="无法返回的Activity（android-noHistory）"><a href="#无法返回的Activity（android-noHistory）" class="headerlink" title="无法返回的Activity（android:noHistory）"></a>无法返回的Activity（android:noHistory）</h3><p><strong>android:noHistory</strong>属性值为布尔类型，默认值是false。</p><p>​        在默认情况下，一个窗口被显示，都会将该窗口类的实例放入回退栈的栈顶，只有在栈顶的窗口才能显示并获得焦点。当显示了另外一个窗口（可以是另一个程序的窗口，如接听电话时的窗口），或按“Home”键切换到桌面后。再恢复到原来的程序后，这个在栈顶的窗口又会重新显示。</p><p>​        不过将android:noHistory属性值设为true时，这时系统不再保留窗口显示的历史，也就是说尽管也会显示android:noHistory属性值为true的窗口，但并<strong>不会将该窗口对应的窗口类对象放入回退栈</strong>。当窗口停止（执行Activity.onStop）后，就不会恢复到原来的窗口。</p><h3 id="指定要返回的窗口（android-parentActivityName）"><a href="#指定要返回的窗口（android-parentActivityName）" class="headerlink" title="指定要返回的窗口（android:parentActivityName）"></a>指定要返回的窗口（android:parentActivityName）</h3><p><strong>android:parentActivityName</strong>属性值为字符串类型，无默认值。</p><p>​        android:parentActivityName属性主要用于Action Bar。当按下Action Bar的回退按钮后，系统会回退到android:parentActivityName属性值指定的窗口。如果android:parentActivityName属性指定的窗口在回退栈中不存在，系统还可以使用TaskStackBuilder和android:parentActivityName属性值。</p><h3 id="使窗口受到权限的保护（android-permission）"><a href="#使窗口受到权限的保护（android-permission）" class="headerlink" title="使窗口受到权限的保护（android:permission）"></a>使窗口受到权限的保护（android:permission）</h3><p>​    <strong>android:permission</strong>属性值为枚举类型，无默认值。该属性值可输入的内容为Android支持的权限。</p><p>​        在默认情况下，只要为＜activity＞标签指定了一个Action，就可以在其他程序中不受限制地使用隐式方式显示＜activity＞标签声明的窗口。不过我们可以用android:permission属性为这些窗口添加一些权限。</p><p>​        ＜application＞与＜activity＞标签一样，也有一个android:permission属性。如果＜activity＞标签未指定android:permission属性，但＜application＞标签指定了android:permission属性，那么＜application＞标签中声明的所有窗口都会应用该权限。如果＜application＞与＜activity＞标签都指定了android:permission属性，以＜activity＞标签的android:permission属性值为准。</p><h3 id="改变窗口所在的进程（android-process）"><a href="#改变窗口所在的进程（android-process）" class="headerlink" title="改变窗口所在的进程（android:process）"></a>改变窗口所在的进程（android:process）</h3><p>​        <strong>android:process</strong>属性值为字符串类型，无默认值。</p><p>​        默认情况下，一个Android应用程序（apk文件）只建立一个进程（进程名为当前应用程序的包名），该程序中的所有组件（Acitivty、Service等）都运行在这个进程中。Android系统允许为程序中的某个组件单独建立一个进程（为了使组件之间保持相对的独立性），也允许不同应用程序中的多个组件共享一个进程（为了节省内存空间和共享数据）。通过＜activity＞标签的android:process属性来完成。</p><p>​        android:process属性的值有如下两种类型的值。</p><ol><li>以冒号（:）开头，如android:process= “ :new_process”。系统会为当前组件在当前应用程序中创建一个私有的进程。</li><li>以小写字母开头，如android:process=”new_process”。系统会使当前组件运行在android:process属性指定的全局进程中，但要注意，这个全局进程必须存在，否则程序无法安装在Android设备上。</li></ol><p>​      如果未设置＜activity＞标签的android:process属性，也可以用＜application＞标签的android:process属性为所有的组件指定同一个进程。</p><h3 id="不保存窗口的状态（android-stateNotNeeded）"><a href="#不保存窗口的状态（android-stateNotNeeded）" class="headerlink" title="不保存窗口的状态（android:stateNotNeeded）"></a>不保存窗口的状态（android:stateNotNeeded）</h3><p>​        <strong>android:stateNotNeeded</strong>属性值为布尔类型，默认值是false。</p><p>​        如果android:stateNotNeeded属性值为true，窗口不管在任何情况下都不会保存状态，在窗口重新显示后，也不会恢复到原来的状态。如果该属性为false，系统会在适当的时候保存窗口的状态，该属性的默认值是false。通常情况下，窗口在临时关闭后（停止状态），会调用Activity.onSaveInstanceState方法。该方法将窗口的状态存储在了Bundle对象中。当窗口重新显示时会调用onCreate方法，这个保存了窗口原来状态的Bundle对象会通过onCreate方法的参数传入窗口对象。如果将android:stateNotNeeded属性设为true，Activity.onSaveInstanceState方法将永远不会被系统调用，而这时传入onCreate方法的参数值就是null。</p><h3 id="窗口的主题（android-theme）"><a href="#窗口的主题（android-theme）" class="headerlink" title="窗口的主题（android:theme）"></a>窗口的主题（android:theme）</h3><p>android:theme属性值为字符串类型，无默认值。还可以使用Activity.setTheme方法设置动态设置窗口主题。</p><h3 id="扩展窗口UI（android-uiOptions）"><a href="#扩展窗口UI（android-uiOptions）" class="headerlink" title="扩展窗口UI（android:uiOptions）"></a>扩展窗口UI（android:uiOptions）</h3><p>android:uiOptions属性值为枚举类型，默认值是none。</p><p>android:uiOptions属性可以设置的值:</p><p><img src="/2022/12/26/Activity%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86/5.png" alt=""></p><h3 id="设置输入法显示模式（android-windowSoftInputMode）"><a href="#设置输入法显示模式（android-windowSoftInputMode）" class="headerlink" title="设置输入法显示模式（android:windowSoftInputMode）"></a>设置输入法显示模式（android:windowSoftInputMode）</h3><p>该属性用于设置当前窗口如何与输入法软键盘进行交互。设置该属性会对软键盘和窗口有影响:</p><ol><li>软键盘的状态。也就是说当窗口处于焦点状态时软键盘是隐藏还是显示。</li><li>对当前窗口进行调整。也就是说当软键盘窗口显示后，当前窗口的大小是否做出调整，以及窗口上当前获得焦点的控件是否仍然处于可视状态（控件整体会上移）。</li></ol><p>android:windowSoftInputMode属性必须设置一个或多个值，如果设置多个值，中间用“|”连接，该符号两侧不能有空格、Tab等字符。</p><p><img src="/2022/12/26/Activity%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86/6.png" alt=""></p><h2 id="Activity从创建到销毁的过程"><a href="#Activity从创建到销毁的过程" class="headerlink" title="Activity从创建到销毁的过程"></a>Activity从创建到销毁的过程</h2><h3 id="任务（Task）与回退栈（Back-Stack）"><a href="#任务（Task）与回退栈（Back-Stack）" class="headerlink" title="任务（Task）与回退栈（Back Stack）"></a>任务（Task）与回退栈（Back Stack）</h3><p>​        Activity的生命周期离不开两个概念：任务与回退栈。<strong>每一个Android应用在运行时都会创建和维护一个属于自己的任务。一个任务包含了一个堆栈数据结构，该堆栈用于保存当前Android应用中所有已经创建的窗口对象。该堆栈称为回退栈（Back Stack）。</strong>位于回退栈栈顶的窗口会处于焦点状态。当Android应用开始运行时，系统为该应用建立任务和回退栈后，会将主窗口对象添加到该回退栈中，作为回退栈的第一个元素。当显示新的窗口时，会首先将该窗口的对象入栈。那么该窗口对象就位于当前程序的回退栈的栈顶，而位于栈顶的窗口会显示在最前面（获得焦点，可以与用户交互）。当关闭该窗口，系统会首先将该窗口对象出栈，并销毁该窗口对象。</p><p>​        <strong>Android应用的启动伴随着回退栈的创建和主窗口入栈的过程，程序的终止则伴随着回退栈的清空和销毁的过程。</strong></p><p>​        <strong>不管是显示内部的窗口，还是显示其他应用程序的窗口，都会将显示的窗口对象压入当前应用程序的回退栈。当关闭窗口时，会将窗口对象从回退栈弹出。</strong></p><p>​        <strong>每一个Android应用在启动的时候都会建立一个任务，回退栈就包含在这个任务中。当进行应用程序之间的切换时，也就是应用程序对应的任务之间的切换。这里的切换并不是指任务的创建和销毁，而是指将任务移到前台（foreground）或后台（background）运行。只有在前台运行的任务中的回退栈栈顶的窗口才能获得焦点。而同时只能有一个任务在前台运行，所以同时只能有一个窗口获得焦点。</strong></p><p>​        回退栈并不会将已经存在于栈中的窗口对象移动到栈的其他位置，而只会执行窗口对象的入栈和出栈的操作。按“Home”键的过程也就是当前窗口与Home窗口之间切换的过程，相当于在当前应用程序中调用另外一个程序中的窗口。</p><h3 id="保存窗口（Activity）状态"><a href="#保存窗口（Activity）状态" class="headerlink" title="保存窗口（Activity）状态"></a>保存窗口（Activity）状态</h3><p>​        当两个任务切换时，被移到后台运行的任务的回退栈栈顶的窗口会被停止，这时系统会自动保存窗口的状态，等该任务重新切换到前台运行后，该窗口恢复焦点的同时也会恢复所有的状态。</p><p>​        但在这些被停止的窗口对象并不意味着会永久地驻留在内存中。当Anroid设备的内存耗得差不多时，或某些Android应用急需大量内存时，Android系统会销毁长期被停止的窗口对象（包括该窗口对象被系统保存的所有状态）。当然，尽管窗口对象被销毁了，这并不意味着窗口对象会从回退栈中弹出。被释放的窗口对象仍然占着回退栈原来的位置，只是该对象并不指向任何一个窗口对象。当系统将该任务重新移到前台运行时，就应该将该窗口恢复焦点和状态。但由于该窗口对象已经被系统销毁，所以系统只能重新创建该窗口对象，这就意味着窗口原来的状态全部丢失。因此会需要在窗口对象释放之前保存要恢复的状态，等窗口对象重建时再恢复这些状态。</p><p>​        当窗口对象被系统销毁之前，就会调用该对象的onSaveInstanceState方法。用户可以通过onSaveInstanceState方法的参数保存任意多的变量值。通常会通过Activity.onCreate方法的savedInstanceState参数获取被保存的状态变量值。savedInstanceState参数值只在窗口对象重新创建时传入，窗口对象第一次创建时savedInstanceState参数值为null。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() {</span><br><span class="line">    <span class="comment">//定义value变量，并设置了默认值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> value = <span class="string">"default"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        <span class="comment">//判断当前窗口对象是否第一次创建，如果savedInstanceState为null，</span></span><br><span class="line">        <span class="keyword">if</span> (savedInstanceState!=<span class="literal">null</span>) {</span><br><span class="line">            <span class="comment">//当前窗口对象第一次创建，这时使用value变量的默认值，否则恢复value变量的值</span></span><br><span class="line">            value = savedInstanceState.getString(<span class="string">"value"</span>).toString()</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置value字段值”按钮的单击事件方法，用于设置value变量的值</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onClick_SetFieldValue</span><span class="params">(v:<span class="type">View</span>)</span></span>{</span><br><span class="line">        value = <span class="string">"newValue"</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//“输出value字段值”按钮的单击事件方法，用于将value变量的值输出到LogCat视图</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onClick_OutputFieldValue</span><span class="params">(v:<span class="type">View</span>)</span></span>{</span><br><span class="line">        Log.d(<span class="string">"value"</span>, value)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  该方法用于保存状态变量，当前对象被系统销毁之前会调用该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSaveInstanceState</span><span class="params">(outState: <span class="type">Bundle</span>)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onSaveInstanceState(outState)</span><br><span class="line">        outState.putString(<span class="string">"value"</span>,value)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="管理任务和回退栈"><a href="#管理任务和回退栈" class="headerlink" title="管理任务和回退栈"></a>管理任务和回退栈</h3><p>＜activity＞标签中与任务和回退栈相关的属性：</p><p><strong>taskAffinity：</strong>指定窗口属于哪一个任务。</p><p><strong>launchMode：</strong>设置窗口的创建模式。</p><p><strong>allowTaskReparenting：</strong>允许当前窗口移到taskAffinity属性指定的任务中的回退栈的栈顶。</p><p><strong>clearTaskOnLaunch：</strong>要求回退栈保持初始状态。</p><p><strong>alwaysRetainTaskState：</strong>要求回退栈保持最近的状态，也就是说系统不会自动释放回退栈中的窗口对象。</p><p><strong>finishOnTaskLaunch：</strong>功能与clearTaskOnLaunch类似，只是针对的是单个窗口，而不是针对整个回退栈。该属性指定某一个窗口只在当前会话有效。如果任务被换到后台运行后又回到前台，该窗口不会再显示。</p><p>如下几个标志可以通过Java代码对窗口的行为进行设置:</p><ul><li>FLAG_ACTIVITY_NEW_TASK：相当于launchMode属性的singleTask模式。</li><li>FLAG_ACTIVITY_SINGLE_TOP：相当于launchMode属性的singleTop模式。</li><li>FLAG_ACTIVITY_CLEAR_TOP：如果要显示的窗口已经在回退栈中，压在该窗口上面的所有窗口对象将全部被销毁，该窗口会被设为栈顶并显示。该标志在＜activity＞标签中没有对应的属性。</li></ul><h3 id="Activity的4种创建模式"><a href="#Activity的4种创建模式" class="headerlink" title="Activity的4种创建模式"></a>Activity的4种创建模式</h3><p>​        默认情况下，每调用一次startActivity方法，就会创建一个新的窗口对象，并将该窗口对象压入当前任务的回退栈中。</p><p>使用＜acitivty＞标签的launchMode属性修改窗口的默认创建模式:</p><p><img src="/2022/12/26/Activity%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86/7.png" alt=""></p><p><img src="/2022/12/26/Activity%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86/8.png" alt=""></p><p>​        singleInstance与singleTask模式的唯一区别是存放singleInstance模式窗口对象的回退栈不能有其他任何窗口对象。因此，在任何情况下，<strong>只要显示singleInstance模式的窗口，并且该窗口不存在，一定会新建立任务的</strong>。如果该窗口已经存在，仍然会切换到该任务来显示singleInstance模式的窗口。</p><h3 id="用Java代码设置窗口创建模式"><a href="#用Java代码设置窗口创建模式" class="headerlink" title="用Java代码设置窗口创建模式"></a>用Java代码设置窗口创建模式</h3><p>​        窗口的创建模式不仅可以在声明窗口时通过launchMode属性指定，也可以通过Intent.setFlags方法指定一个或多个标志进行设置:</p><ul><li>FLAG_ACTIVITY_SINGLE_TOP。</li><li>FLAG_ACTIVITY_CLEAR_TOP。</li><li>FLAG_ACTIVITY_NEW_TASK。</li><li>FLAG_ACTIVITY_CLEAR_TASK。</li><li>FLAG_ACTIVITY_REORDER_TO_FRONT。</li></ul><p>​      5个标志并不都是与launchMode属性的值对应，这些标志需要组合使用才能完全符合某一个launchMode属性值所满足的窗口创建模式。</p><h4 id="FLAG-ACTIVITY-SINGLE-TOP标志"><a href="#FLAG-ACTIVITY-SINGLE-TOP标志" class="headerlink" title="FLAG_ACTIVITY_SINGLE_TOP标志"></a>FLAG_ACTIVITY_SINGLE_TOP标志</h4><p>​        该标志与singleTop模式的作用相同。如果要显示的窗口正好处于当前回退栈的栈顶，则不再创建新的窗口对象，而是调用该窗口对象的onNewIntent方法。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果同时设置了launchMode属性和标志，标志动作将优先于相应的launchMode属性值。</span></span><br><span class="line"><span class="comment">//例如，如果声明IntentFlagActivity类时＜activity＞标签的launchMode属性值设为了singleInstance，</span></span><br><span class="line"><span class="comment">//使用下面的代码仍然按照singleTop方式处理。</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">onClick_ShowIntentFlagActivity_SingleTop</span><span class="params">(v:<span class="type">View</span>)</span></span>{</span><br><span class="line">    <span class="keyword">val</span> intent = Intent(<span class="keyword">this</span>,IntentFlagActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">    <span class="comment">//设置FLAG_ACTIVITY_SINGLE_TOP标志</span></span><br><span class="line">    intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)</span><br><span class="line">    startActivity(intent)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="FLAG-ACTIVITY-CLEAR-TOP标志"><a href="#FLAG-ACTIVITY-CLEAR-TOP标志" class="headerlink" title="FLAG_ACTIVITY_CLEAR_TOP标志"></a>FLAG_ACTIVITY_CLEAR_TOP标志</h4><p>​        该标志用于释放回退栈中处于要显示窗口前面的所有窗口，可分如下两种情况使用（假设要显示的窗口为MyActivity）。</p><ol><li>MyActivity的launchMode属性值是standard，并且没有将FLAG_ACTIVITY_SINGLE_TOP与FLAG_ACTIVITY_CLEAR_TOP一起使用。在这种情况下，不仅压在MyActivity上面的所有窗口会被释放，而且MyActivity也将被释放，然后重新创建该窗口对象并压栈，也就是说不会调用onNewIntent方法。</li><li>MyActivity的launchMode属性值是除了standard的其他3个值，或与FLAG_ACTIVITY_ SINGLE_TOP标志同时使用。在这种情况下相当于显示<strong>程序内部的singleTask模式</strong>的窗口，也就是说MyActivity前面的所有窗口将被出栈（释放），并调用栈顶窗口对象的onNewIntent方法。</li></ol><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">onClick_CloseAllMyActivity</span><span class="params">(view: <span class="type">View</span>?)</span></span> {</span><br><span class="line">    <span class="keyword">val</span> intent = Intent(<span class="keyword">this</span>, IntentFlagActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">    <span class="comment">//intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);</span></span><br><span class="line">    <span class="comment">//  相当于将IntentFlagActivity设为singleTask模式</span></span><br><span class="line">    intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_SINGLE_TOP</span><br><span class="line">    startActivity(intent)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="FLAG-ACTIVITY-NEW-TASK标志"><a href="#FLAG-ACTIVITY-NEW-TASK标志" class="headerlink" title="FLAG_ACTIVITY_NEW_TASK标志"></a>FLAG_ACTIVITY_NEW_TASK标志</h4><p>​        如果只使用该标志，相当于显示<strong>另一个Android程序中singleTask</strong>模式的窗口。</p><h4 id="FLAG-ACTIVITY-CLEAR-TASK标志"><a href="#FLAG-ACTIVITY-CLEAR-TASK标志" class="headerlink" title="FLAG_ACTIVITY_CLEAR_TASK标志"></a>FLAG_ACTIVITY_CLEAR_TASK标志</h4><p>​        FLAG_ACTIVITY_CLEAR_TASK标志用于<strong>释放当前回退栈中所有的窗口对象（包括要显示的窗口对象），然后再重新创建要显示的窗口对象</strong>。</p><p>​        FLAG_ACTIVITY_CLEAR_TASK必须和FLAG_ACTIVITY_NEW_TASK标志一起使用才起作用。</p><h4 id="FLAG-ACTIVITY-REORDER-TO-FRONT标志"><a href="#FLAG-ACTIVITY-REORDER-TO-FRONT标志" class="headerlink" title="FLAG_ACTIVITY_REORDER_TO_FRONT标志"></a>FLAG_ACTIVITY_REORDER_TO_FRONT标志</h4><p>​        只要当前回退栈中的任何位置有要显示的窗口对象，就不再为该窗口创建新对象，而是将栈中该窗口的对象提到栈顶，而窗口前面的窗口对象并不出栈（自然也不会释放这些窗口对象）。</p><p>​        例如，当前回退栈中有4个窗口对象：A、B、C、D，其中D是栈顶元素。现在要创建一个B窗口对象，如果在显示B窗口时通过Intent.setFlags方法设置了FLAG_ACTIVITY_REORDER_TO_FRONT标志，回退栈仍然包含4个窗口对象，但顺序却变为A、C、D、B，然后会调用B窗口对象的onNewIntent方法。</p><h3 id="窗口的乾坤大挪移（affinity）"><a href="#窗口的乾坤大挪移（affinity）" class="headerlink" title="窗口的乾坤大挪移（affinity）"></a>窗口的乾坤大挪移（affinity）</h3><p>＜activity＞标签的两个属性:</p><p>​        <strong>taskAffinity：</strong>字符串类型，默认值是当前应用程序的package名称。该属性<strong>指定当前窗口对象要使用哪个回退栈</strong>。</p><p>​        <strong>allowTaskReparenting：</strong>布尔类型，默认值是false。该属性允许窗口对象在不同回退栈之间移动。</p><h4 id="taskAffinity属性"><a href="#taskAffinity属性" class="headerlink" title="taskAffinity属性"></a>taskAffinity属性</h4><p>​        如果在A.apk中使用FLAG_ACTIVITY_NEW_TASK标志显示B.apk中的MyActivity窗口，当MyActivity窗口不存在时，会新创建一个任务，当MyActivity窗口存在时，会直接切换到MyActivity窗口所在的任务。MyActivity窗口并不在A.apk的默认回退栈中，如果从桌面切换到A.apk所在的任务，MyActivity是不会再显示的，切换到B.apk的任务时才会显示MyActivity。</p><p>​        要实现一个完全相反的功能，也就是说切换到A.apk会显示MyActivity，而切换到B.apk不会显示MyActivity，就像MyActivity属于A.apk一样（实际上MyActivity属于B.apk）。就将MyActivity窗口的taskAffinity属性值指向A.apk的任务名,<strong>Android应用程序的默认任务名称就是该应用程序的package名</strong>，在AndroidManifest.xml文件的＜manifest＞标签的package属性中指定。</p><p>​        ＜activity＞和＜application＞标签都有taskAffinity属性。如果＜activity＞标签未设置taskAffinity属性，而＜application＞标签设置了taskAffinity属性，那么＜application＞标签中声明的所有窗口都会使用＜application＞标签的taskAffinity属性指定的任务。</p><h4 id="allowTaskReparenting属性"><a href="#allowTaskReparenting属性" class="headerlink" title="allowTaskReparenting属性"></a>allowTaskReparenting属性</h4><p>​        如果某窗口的allowTaskReparenting属性值为true，当该窗口所在的任务被切换到后台时，一旦有另一个与该窗口具有相同affinity的任务切换到前台，那么该窗口会从原来的任务移到新的任务。</p><p>​        尽管allowTaskReparenting属性会造成窗口对象在任务之间的移动，但并不会调用窗口对象的onCreate或onNewIntent方法，只是简单的Java对象迁移，而且不管该任务中有多少窗口对象，都会移动到另外一个任务。</p><h3 id="销毁不再使用的窗口"><a href="#销毁不再使用的窗口" class="headerlink" title="销毁不再使用的窗口"></a>销毁不再使用的窗口</h3><p>​        如果用户长时间离开某个任务（该任务长时间处于后台休眠状态），系统就会销毁该任务中除了根窗口[插图]外的所有窗口。当用户再次回到该任务时，无论以前回退栈有多少个窗口，都会只显示根窗口。</p><p>＜activity＞标签的属性来改变系统的默认行为:</p><h4 id="alwaysRetainTaskState属性"><a href="#alwaysRetainTaskState属性" class="headerlink" title="alwaysRetainTaskState属性"></a>alwaysRetainTaskState属性</h4><p>​        如果要用户系统无论离开当前任务多长时间都不会销毁回退栈中的任何窗口，那么就将alwaysRetainTaskState属性设为true。alwaysRetainTaskState属性的默认值为false。</p><h4 id="clearTaskOnLaunch属性"><a href="#clearTaskOnLaunch属性" class="headerlink" title="clearTaskOnLaunch属性"></a>clearTaskOnLaunch属性</h4><p>​        该属性与alwaysRetainTaskStates属性正好相反，只要当前任务被切换到后台，哪怕是很短的时间，系统都会销毁除了根窗口外的所有窗口。该属性仅对根窗口有意义。clearTaskOnLaunch属性的默认值为false。</p><h4 id="finishOnTaskLaunch属性"><a href="#finishOnTaskLaunch属性" class="headerlink" title="finishOnTaskLaunch属性"></a>finishOnTaskLaunch属性</h4><p>​        该属性与clearTaskOnLaunch类似，只不过该属性只针对一个窗口，而clearTaskOnLaunch针对整个任务中的所有窗口（不包括根窗口）。例如，回退栈（所在任务是TaskA）中有3个窗口：A-B-C，C是栈顶窗口。如果将C的finishOnTaskLaunch属性设为true，当TaskA在切换到后台时只有C被销毁。现在回退栈中包含的窗口对象及其顺序是A-B，所以当前显示的是窗口B，该属性不会作用于根窗口。finishOnTaskLaunch属性的默认值是false。</p><h2 id="Activity的别名"><a href="#Activity的别名" class="headerlink" title="Activity的别名"></a>Activity的别名</h2><p>Activity别名使用＜activity-alias＞标签声明。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:dataExtractionRules</span>=<span class="string">"@xml/data_extraction_rules"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fullBackupContent</span>=<span class="string">"@xml/backup_rules"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/cross"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/Theme.ActivityAlias"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:targetApi</span>=<span class="string">"31"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">".TestActivity"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:name</span>=<span class="string">"android.app.lib_name"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity-alias</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">".TestActivityAlias"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:targetActivity</span>=<span class="string">".TestActivity"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.TEST_ACTION"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">"MyActivity"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">".MyActivity"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">"@drawable/calculator"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:name</span>=<span class="string">"android.app.lib_name"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">".MainActivity"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:name</span>=<span class="string">"android.app.lib_name"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity-alias</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">".AliasMain"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:icon</span>=<span class="string">"@drawable/umbrella"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">"AliasMain"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:targetActivity</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>acitivity:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() {</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        <span class="comment">//　比较窗口类名</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">".MainActivity"</span>.equals(componentName.shortClassName)){</span><br><span class="line">            title = <span class="string">"使用了&lt;activity&gt;标签"</span></span><br><span class="line">            Log.d(<span class="string">"TAG"</span>,<span class="string">"<span class="variable">$taskId</span>"</span>)</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">".AliasMain"</span>.equals(componentName.shortClassName)){</span><br><span class="line">            title = <span class="string">"使用了＜activity-alias＞标签"</span></span><br><span class="line">            Log.d(<span class="string">"TAG"</span>,<span class="string">"<span class="variable">$taskId</span>"</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onClick_ShowTestActivity</span><span class="params">(view: <span class="type">View</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">val</span> intent = Intent(<span class="string">"android.intent.action.TEST_ACTION"</span>)</span><br><span class="line">        startActivity(intent)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/12/26/Activity%E9%AB%98%E7%BA%A7%E9%83%A8%E5%88%86/9.png" alt=""></p><p>​        Activity别名除了前面的应用外，还可以为任何一个窗口定义别名。例如，如果某一个窗口定义了若干个Action，而且要单独控制某一个Action是否可以被其他应用程序调用，这也要使用Activity别名。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:name</span>=<span class="string">".TestActivity"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:exported</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">               <span class="attr">android:name</span>=<span class="string">"android.app.lib_name"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">android:value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activity-alias</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:name</span>=<span class="string">".TestActivityAlias"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:targetActivity</span>=<span class="string">".TestActivity"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.TEST_ACTION"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;Activity-XML属性详解&quot;&gt;&lt;a href=&quot;#Activity-XML属性详解&quot; class=&quot;headerlink&quot; title=&quot;Activity XML属性详解&quot;&gt;&lt;/a&gt;Activity XML属性详解&lt;/h2&gt;&lt;h3 id=&quot;设置Activity的基本信息&quot;&gt;&lt;a href=&quot;#设置Activity的基本信息&quot; class=&quot;headerlink&quot; title=&quot;设置Activity的基本信息&quot;&gt;&lt;/a&gt;设置Activity的基本信息&lt;/h3&gt;&lt;p&gt;​        android:name是＜activity＞标签中唯一必须设置的属性，该属性表示窗口类的名称。&lt;/p&gt;
&lt;p&gt;​        android:label和android:icon属性分别用于设置窗口标题的文本和图像。&lt;/p&gt;
&lt;p&gt;​        ＜application＞标签也同样有android:label和android:icon属性。&lt;/p&gt;
&lt;h3 id=&quot;屏幕方向切换（android-screenOrientation）&quot;&gt;&lt;a href=&quot;#屏幕方向切换（android-screenOrientation）&quot; class=&quot;headerlink&quot; title=&quot;屏幕方向切换（android:screenOrientation）&quot;&gt;&lt;/a&gt;屏幕方向切换（android:screenOrientation）&lt;/h3&gt;&lt;p&gt;​        android:screenOrientation属性值为枚举类型，默认值是unspecified。&lt;/p&gt;
&lt;p&gt;​        ActivityInfo类提供了一些常量用来与android:screenOrientation属性值一一对应。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
    
      <category term="Android权威指南2" scheme="https://hluck.github.io/tags/Android%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%972/"/>
    
  </entry>
  
  <entry>
    <title>Intent与Intent Filter</title>
    <link href="https://hluck.github.io/2022/12/21/Intent%E4%B8%8EIntent%20Filter/"/>
    <id>https://hluck.github.io/2022/12/21/Intent%E4%B8%8EIntent%20Filter/</id>
    <published>2022-12-21T00:48:17.394Z</published>
    <updated>2022-12-28T14:09:41.743Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="Android系统的信使：Intent"><a href="#Android系统的信使：Intent" class="headerlink" title="Android系统的信使：Intent"></a>Android系统的信使：Intent</h2><p>​        Intent对象被应用于4大应用程序组件中的3个（Activity、Service和Broadcast Receiver），而Content Provider会采用其他方式访问。</p><p>服务（Service）和广播（Broadcast）的使用方法和窗口（Activity）类似。</p><p>开始服务：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent serviceIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">startService(serviceIntent);</span><br></pre></td></tr></tbody></table></figure><p>发送广播:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//　mybroadcast是广播字符串</span></span><br><span class="line">Intent broadcastIntent = <span class="keyword">new</span> Intent(<span class="string">"mybroadcast"</span>);</span><br><span class="line"><span class="comment">//　向系统发送一条广播</span></span><br><span class="line">sendBroadcast(broadcastIntent);</span><br></pre></td></tr></tbody></table></figure><h2 id="Intent对象"><a href="#Intent对象" class="headerlink" title="Intent对象"></a>Intent对象</h2><p>Intent对象可以完成3项工作：</p><ol><li>定位窗口：通过Component name、Action、Category和Data可以定位一个或多个Activity。</li><li>传递数据：通过Data和Extra。</li><li>控制访问组件的行为（窗口、服务和广播）：通过Flags。<a id="more"></a><h3 id="Intent对象可以封装和传递哪些信息"><a href="#Intent对象可以封装和传递哪些信息" class="headerlink" title="Intent对象可以封装和传递哪些信息"></a>Intent对象可以封装和传递哪些信息</h3></li></ol><ul><li>组件名（Component name）</li><li>动作（Action）</li><li>种类（Category）</li><li>数据（Data）</li><li>附加信息（Extra）</li><li>标志（Flags）</li></ul><h3 id="组件名（Component-name）"><a href="#组件名（Component-name）" class="headerlink" title="组件名（Component name）"></a>组件名（Component name）</h3><p>直接指定窗口类的class:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></tbody></table></figure><p>还有3个方法可以指定具体的窗口:</p><ol><li>setClass：指定Context对象和窗口类的class。与通过Intent类的构造方法传递信息的作用是一样的。</li><li>setClassName：指定Context对象、字符串形式的包名和窗口类名。</li><li>setComponent：与setClassName方法类似，只是要传递的数据都封装在了ComponentName对象中。</li></ol><h4 id="1-setClass方法"><a href="#1-setClass方法" class="headerlink" title="1.setClass方法"></a>1.setClass方法</h4><p>setClass方法的原型:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Intent <span class="title">setClass</span><span class="params">(Context packageContext, Class＜?＞ cls)</span></span></span><br></pre></td></tr></tbody></table></figure><p>使用：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent2 = <span class="keyword">new</span> Intent();</span><br><span class="line">intent2.setClass(<span class="keyword">this</span>, MyActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></tbody></table></figure><h4 id="2-setClassName方法"><a href="#2-setClassName方法" class="headerlink" title="2.setClassName方法"></a>2.setClassName方法</h4><p>​        该方法有两个重载形式:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//packageContext以另外一种形式定位应用程序，这就是应用程序的Context对象（上下文对象）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Intent <span class="title">setClassName</span><span class="params">(Context packageContext, String className)</span></span></span><br><span class="line"><span class="function"><span class="comment">//使用Android应用的唯一索引PackageName定位某个具体的程序</span></span></span><br><span class="line"><span class="function"><span class="comment">//className参数表示类的全名（是PackageName+ClassName，不能只指定类名）    </span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Intent <span class="title">setClassName</span><span class="params">(String packageName, String className)</span></span></span><br></pre></td></tr></tbody></table></figure><h4 id="3-setComponent方法"><a href="#3-setComponent方法" class="headerlink" title="3.setComponent方法"></a>3.setComponent方法</h4><p>​        setComponent方法通过ComponentName对象指定PackageName、ClassName等信息，该方法的原型：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Intent <span class="title">setComponent</span><span class="params">(ComponentName component)</span></span></span><br></pre></td></tr></tbody></table></figure><p>​        使用setComponent方法之前先要创建ComponentName对象。</p><h3 id="动作（Action）"><a href="#动作（Action）" class="headerlink" title="动作（Action）"></a>动作（Action）</h3><p>​        还有一种确定窗口的方法，就是窗口动作（Activity Action）</p><p>​        就是“与窗口绑定的一个或多个字符串”，也就是说Activity Action是一个字符串，而且一个窗口可以拥有多个这样的字符串。</p><p>主窗口通常会在AndroidManifest.xml文件中有如下的声明代码：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MyActivity"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span>　</span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span>　</span><br><span class="line"><span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span>　</span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>　</span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>＜action＞标签的android:name属性值android.intent.action.MAIN就是一个系统提供的Activity Action。</p><p>通过代码指定action去显示一个窗口：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"mobile.android.android.MYACTION"</span>)</span><br><span class="line"><span class="comment">//如果系统中有多个窗口定义了该Activity Action，会显示一个选择列表，列表中显示了所有定义该Activity Action窗口，用户可以选择显示哪个窗口。    </span></span><br><span class="line">startActivity(intent)</span><br></pre></td></tr></tbody></table></figure><p>或者：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent()</span><br><span class="line">intent.setAction(<span class="string">"mobile.android.android.MYACTION"</span>)</span><br><span class="line">startActivity(intent)</span><br></pre></td></tr></tbody></table></figure><p>​    系统应用也有很多Activity定义了Activity Action，这些Activity Action可以调用Android系统内置应用中的窗口。如，照相机拍照界面、拨号界面等。尽量使用在Intent类中定义的Action常量（以ACTION_开头的都是Action常量）。这些常量包括Activity Action和Broadcast Action，系统未定义Service Action。直接在代码编辑器中输入“Intent.”就会看到所有的Action常量。</p><p><img src="/2022/12/21/Intent%E4%B8%8EIntent%20Filter/1.png" alt=""></p><h3 id="种类（Category）"><a href="#种类（Category）" class="headerlink" title="种类（Category）"></a>种类（Category）</h3><p>​        如果单凭Action无法定位唯一的窗口，那就要再加一个可以定位的标志（<strong>Category</strong>）。</p><p>​        Category实际上与Action一样，也是与窗口绑定的字符串。在声明主窗口时＜category＞标签的android:name属性值指定的就是Category。Action与Category的不同之处在于只能为Intent对象指定一个Action，而Category可以指定多个（方法名setAction和addCategory）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line"><span class="comment">//设置action</span></span><br><span class="line">intent.setAction(<span class="string">"mobile.android.action.MYACTION"</span>);</span><br><span class="line"><span class="comment">//设置category</span></span><br><span class="line">intent.addCategory(“mobile.android.category.MYCATEGORY);</span><br></pre></td></tr></tbody></table></figure><h3 id="数据-Data"><a href="#数据-Data" class="headerlink" title="数据(Data)"></a>数据(Data)</h3><p>​        Data与Action、Category并称为Android组件的3大过滤机制.</p><p>​        但Data与后两者不同的是并不是简单地通过字符串对比的方式进行匹配，而是按着一定规则进行匹配。<strong>Data</strong>本身又分为两种方式进行匹配：<strong>MIME Type</strong>和<strong>URI</strong>。</p><ul><li><strong>MIME Type</strong>是指要访问的组件处理的数据类型，例如video/mpeg4、video/mp4、video/avi等。MIME Type也可以用通配符（*）匹配某一类型的数据，例如“audio/ *”表示所有的音频数据格式。</li><li><strong>URI</strong>有些类似我们经常使用的Web地址，但要比Web地址范围更广，例如，下面的3行字符串都属于URI。</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://www.google.com</span><br><span class="line">content://mobile.android.data/cities</span><br><span class="line">ftp://192.168.17.168</span><br></pre></td></tr></tbody></table></figure><p>设置MIME Type和URI可以由下几个方法完成:</p><ol><li><p>setType方法:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//setType方法用于设置MIME Type，并且在设置后会将Uri清除</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Intent <span class="title">setType</span><span class="params">(String type)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="comment">//使用：</span></span></span><br><span class="line"><span class="function">Intent intent </span>= <span class="keyword">new</span> Intent();</span><br><span class="line">intent.setType(<span class="string">"audio/ *"</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><p>setTypeAndNormalize（String type）方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Intent <span class="title">setTypeAndNormalize</span><span class="params">(String type)</span></span></span><br></pre></td></tr></tbody></table></figure></li></ol><p>​        setTypeAndNormalize与setType的功能类似，也用于设置MIME Type，并且将Uri清空。但setTypeAndNormalize方法还可以规范MIME Type。</p><p>​        例如，如果MIMI Type设为“text/plain; charset=utf-8”，就会将后面的非MIMI Type部分去掉，变成“text/plain”。该方法还可以使MIMI Type的写法看起来更标志，例如会将“text/x-vCard”变成“text/x-vcard”。</p><ol start="3"><li><p>setData方法</p><p>setData方法用于设置Uri，并且会清空MIMI Type</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Intent <span class="title">setData</span><span class="params">(Uri data)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Intent intent </span>= <span class="keyword">new</span> Intent();</span><br><span class="line">intent.setData(Uri.parse(<span class="string">"http://192.168.17.168/process"</span>));</span><br></pre></td></tr></tbody></table></figure></li><li><p>setDataAndNormalize方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Intent <span class="title">setDataAndNormalize</span><span class="params">(Uri data)</span></span></span><br></pre></td></tr></tbody></table></figure><p>​        setDataAndNormalize与setData的功能类似，只是会将scheme变成小写形式。scheme就是指Uri开始的部分（冒号以前的部分），例如，<a href="http://www.google.com中的http就是scheme。假设有一个Uri：HTTP://www.google.com，setDataAndNormalize方法会将该Uri变成http://www.google.com。">http://www.google.com中的http就是scheme。假设有一个Uri：HTTP://www.google.com，setDataAndNormalize方法会将该Uri变成http://www.google.com。</a></p></li><li><p>setDataAndType方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于同时设置Uri和MIME Type</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Intent <span class="title">setDataAndType</span><span class="params">(Uri data, String type)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">Intent intent </span>= <span class="keyword">new</span> Intent();</span><br><span class="line">intent.setDataAndType(Uri.parse(<span class="string">"http://192.168.17.168/process"</span>),<span class="string">"audio/*"</span>);</span><br></pre></td></tr></tbody></table></figure></li><li><p>setDataAndTypeAndNormalize方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同时设置Uri和MIME Type，并且将Uri和MIME Type标准化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Intent <span class="title">setDataAndTypeAndNormalize</span><span class="params">(Uri data, String type)</span></span></span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="附加数据（Extra）"><a href="#附加数据（Extra）" class="headerlink" title="附加数据（Extra）"></a>附加数据（Extra）</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//　设置字符串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Intent <span class="title">putExtra</span><span class="params">(String name, String value)</span></span></span><br><span class="line"><span class="function"><span class="comment">//设置整数</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Intent <span class="title">putExtra</span><span class="params">(String name, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"><span class="comment">//　设置浮点数</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Intent <span class="title">putExtra</span><span class="params">(String name, <span class="keyword">float</span> value)</span></span></span><br><span class="line"><span class="function"><span class="comment">//　设置实现Parcelable接口的对象</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Intent <span class="title">putExtra</span><span class="params">(String name, Parcelable value)</span></span></span><br></pre></td></tr></tbody></table></figure><p>选中该Action，会显示该Action的详细信息,如：系统Action需要传递附加信息</p><p><img src="/2022/12/21/Intent%E4%B8%8EIntent%20Filter/2.png" alt=""></p><h3 id="标志（Flags）"><a href="#标志（Flags）" class="headerlink" title="标志（Flags）"></a>标志（Flags）</h3><p>​        Flags既不会定位窗口，也不会向窗口传递数据，Flags只用来控制窗口显示行为。</p><h2 id="显式和隐式访问Activity"><a href="#显式和隐式访问Activity" class="headerlink" title="显式和隐式访问Activity"></a>显式和隐式访问Activity</h2><p>​        <strong>显式访问</strong>Activity不会产生歧义，系统可以毫不犹豫地显示指定的Activity:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></tbody></table></figure><p>​        <strong>隐式访问</strong>Activity需要指定与窗口绑定的字符串（Action、Category和Data），至于如何设置Intent对象，要看访问的窗口在AndroidManifest.xml文件中是如何声明的，也就是说＜intent-filter＞标签里面有什么东西。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册MyActivity --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MyActivity"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MYACTION"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>使用：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"android.intent.action.MYACTION"</span>);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></tbody></table></figure><h2 id="跨应用程序访问窗口"><a href="#跨应用程序访问窗口" class="headerlink" title="跨应用程序访问窗口"></a>跨应用程序访问窗口</h2><p>​    <strong>隐式方式可以调用其他应用程序的窗口，显式方式一样可以.</strong></p><p>要了解显式调用窗口精髓需要知道如下几点:</p><ol><li><p>每一个Android应用的唯一标识就Package Name（包名），也就是AndroidManifest.xml文件中＜manifest＞标签的package属性值。只要Package Name相同，就可以认为是同一个Android应用。</p></li><li><p>如果用Intent对象指定一个窗口类，除了需要指定窗口类的class外，还需要指定窗口类所在的应用程序的Context对象（或应用程序的Package Name），所以<strong>通过Package Name和Activity Class Name（窗口类名）可以定位当前Android系统中的任意窗口</strong>。</p><p>通过Intent.<strong>setClass</strong>、Intent.<strong>setClassName</strong>和Intent.<strong>setComponent</strong>方法可以指定Package Name和Activity Class Name。</p></li></ol><p><strong>定位某个应用程序可以有如下3种方式。</strong></p><ul><li>直接指定Package Name。</li><li>另一个Android应用的Context对象。</li><li>ComponentName对象。</li></ul><p>​        只要知道目标应用程序的Package Name，直接指定即可。Context对象需要使用Context.createPackageContext方法创建:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Context.CONTEXT_INCLUDE_CODE允许代码被装载</span></span><br><span class="line"><span class="comment">//Context.CONTEXT_IGNORE_SECURITY则忽略任何安全限制。</span></span><br><span class="line">Context context = createPackageContext(<span class="string">"mobile.android.web.browser"</span>,Context.CONTEXT_INCLUDE_CODE|Context.CONTEXT_IGNORE_SECURITY);</span><br></pre></td></tr></tbody></table></figure><p>​        ComponentName对象，就是封装了Package Name（或Context对象）和Class Name（或窗口类的class）的对象，只要得到了Context和窗口类的class，就可以直接创建ComponentName对象，并通过ComponentName类的构造方法传入相应的数据即可。</p><p>案例：</p><p>打开另一个webbrowser程序的MainActivity:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">BaseActivity</span>&lt;<span class="type">ActivityMainBinding</span>&gt;</span>() {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//true：窗口退出　 false：窗口切换到后台执行，并没有退出</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> isFinished = <span class="literal">false</span></span><br><span class="line"><span class="comment">//指向WebBrowser程序的Context对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mContext:Context? = <span class="literal">null</span></span><br><span class="line">    <span class="comment">//目标class</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mClass:Class&lt;*&gt;? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> ActivityMainBinding.<span class="title">initBinding</span><span class="params">()</span></span> {</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//WebBrowser的Package Name</span></span><br><span class="line">            mContext = createPackageContext(<span class="string">"com.study.webbrowser"</span>,</span><br><span class="line">                Context.CONTEXT_INCLUDE_CODE or Context.CONTEXT_IGNORE_SECURITY )</span><br><span class="line">            <span class="comment">//动态装载MainActivity类</span></span><br><span class="line">            mClass = mContext?.classLoader?.loadClass(<span class="string">"com.study.webbrowser.MainActivity"</span>)</span><br><span class="line">        } <span class="keyword">catch</span> (e:Exception){</span><br><span class="line">            e.printStackTrace()</span><br><span class="line">        }</span><br><span class="line">    }      </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 浏览网页：Action</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v View</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onClick_Action</span><span class="params">(v:<span class="type">View</span>)</span></span>{</span><br><span class="line">        <span class="comment">//Intent.ACTION_VIEW的值是android.intent.action.VIEW</span></span><br><span class="line">        <span class="comment">//　Uri确定了Data（符合以http://开头的Uri的要求）</span></span><br><span class="line">        <span class="keyword">val</span> webIntent = Intent(Intent.ACTION_VIEW, Uri.parse(<span class="string">"http://blog.csdn.net/nokiaguy"</span>))</span><br><span class="line">        startActivity(webIntent)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 浏览网页：setClassName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v View</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onClick_SetClassName</span><span class="params">(v:<span class="type">View</span>)</span></span>{</span><br><span class="line">        <span class="keyword">val</span> webIntent = Intent();</span><br><span class="line">        <span class="comment">//直接指定了WebBrowser应用的Package Name和WebBrowserActivity类的全名</span></span><br><span class="line">        webIntent.setClassName(<span class="string">"com.study.webbrowser"</span>,<span class="string">"com.study.webbrowser.MainActivity"</span>)</span><br><span class="line">        <span class="comment">//　指定Uri</span></span><br><span class="line">        webIntent.setData(Uri.parse(<span class="string">"http://nokiaguy.blogjava.net"</span>));</span><br><span class="line">        startActivity(webIntent)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 浏览网页：setClassName_Context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v View</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onClick_SetClassName_Context</span><span class="params">(v:<span class="type">View</span>)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(mContext == <span class="literal">null</span> || mClass == <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">val</span> webIntent = Intent()</span><br><span class="line">        <span class="comment">//指定了Context对象和WebBrowserActivity类的全名</span></span><br><span class="line">        webIntent.setClassName(mContext!!,<span class="string">"com.study.webbrowser.MainActivity"</span>)</span><br><span class="line">        <span class="comment">//指定Uri</span></span><br><span class="line">        webIntent.setData(Uri.parse(<span class="string">"http://nokiaguy.cnblogs.com"</span>))</span><br><span class="line">        startActivity(webIntent)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *浏览网页：setClass</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v View</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onClick_SetClass</span><span class="params">(v:<span class="type">View</span>)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(mContext == <span class="literal">null</span> || mClass == <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">val</span> webIntent = Intent()</span><br><span class="line">        <span class="comment">//　指定Context和Class对象</span></span><br><span class="line">        webIntent.setClass(mContext!!,mClass!!)</span><br><span class="line">        <span class="comment">//　指定Uri</span></span><br><span class="line">        webIntent.setData(Uri.parse(<span class="string">"http://nokiaguy.cnblogs.com"</span>))</span><br><span class="line">        startActivity(webIntent)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *浏览网页：setComponentName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v View</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onClick_SetComponentName</span><span class="params">(v:<span class="type">View</span>)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(mContext == <span class="literal">null</span> || mClass == <span class="literal">null</span>) <span class="keyword">return</span></span><br><span class="line">        <span class="comment">//　通过ComponentName对象指定了Context和Class对象</span></span><br><span class="line">        <span class="keyword">val</span> componentName = ComponentName(mContext!!,mClass!!)</span><br><span class="line">        <span class="keyword">val</span> webIntent = Intent()</span><br><span class="line">        <span class="comment">//　指定ComponentName对象</span></span><br><span class="line">        webIntent.component = componentName</span><br><span class="line">        <span class="comment">//　指定Uri</span></span><br><span class="line">        webIntent.<span class="keyword">data</span> = Uri.parse(<span class="string">"http://nokiaguy.cnblogs.com"</span>)</span><br><span class="line">        startActivity(webIntent)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示计算器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v View</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onClick_ShowCalculator</span><span class="params">(v:<span class="type">View</span>)</span></span>{</span><br><span class="line">        <span class="keyword">val</span> intent = Intent()</span><br><span class="line">        <span class="comment">//　指定计算器的Package Name和主窗口类的全名</span></span><br><span class="line">        intent.setClassName(<span class="string">"com.android.calculator2"</span>,</span><br><span class="line">            <span class="string">"com.android.calculator2.Calculator"</span>)</span><br><span class="line">        startActivity(intent)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​        要想让某个窗口可以接收Uri，除了指定相应的Action外，还需要指定Data（用＜data＞标签设置）。对于浏览Web页面，Data只需要设置scheme即可，也就是Web协议，如http、https等.</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:name</span>=<span class="string">".MainActivity"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:exported</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">tools:ignore</span>=<span class="string">"AppLinkUrlError"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"http"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"https"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">               <span class="attr">android:name</span>=<span class="string">"android.app.lib_name"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">android:value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​        系统自带程序的Package Name和Activity Class Name有可能发生变化，那么直接访问这些程序的包名和类名就会带来一定的风险。所以在调用系统程序的窗口时应尽量使用Action，而不要直接指定包名和类名。</p><p>​        如果调用的窗口不在当前的应用程序中，在AndroidManifest.xml文件中声明窗口时必须允许该窗口被其他应用程序调用</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//不可以被其他应用程序通过显式方式调用。</span><br><span class="line">＜activity android:name=".MyActivity"/＞</span><br><span class="line">//可以被其他应用程序通过显式方式调用</span><br><span class="line">＜activity android:name=".MyActivity"android:exported="true"/＞</span><br></pre></td></tr></tbody></table></figure><p>​        <strong>显式调用：</strong>如果声明窗口时未指定任何Action，android:exported属性必须设置，而且属性值必须为true。如果指定了Action，则并不需要设置android:exported属性，或设置android:exported属性值true也可。</p><p>​        <strong>隐式调用：</strong>必须指定Action，而且android:exported属性值不需要设置，或设置该属性值为true。</p><p>获取Android应用中声明某个Action的窗口的类名也可以使用<strong>PackageManager.queryIntent Activities</strong>方法:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//　查询是否有窗口指定了叫Intent.ACTION_VIEW的Action</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class="line"><span class="comment">//　任意指定一个Uri，如果窗口指定了叫http的scheme，系统就会匹配该窗口</span></span><br><span class="line">intent.setData(Uri.parse(<span class="string">"http://blog.csdn.net/nokiaguy"</span>));</span><br><span class="line"><span class="comment">//　列出系统中所有这样的窗口信息</span></span><br><span class="line">List＜ResolveInfo＞ resolveInfos = packageManager.queryIntentActivities(intent,PackageManager.GET_INTENT_ FILTERS);</span><br><span class="line"><span class="comment">//　通常第一个程序就是Browser，当然，也可以枚举所有的窗口信息</span></span><br><span class="line"><span class="comment">//　在LogCat视图中输出第一个满足条件的窗口的类名（＜activity＞标签的android:name属性值）</span></span><br><span class="line">Log.d(<span class="string">"Activity Action"</span>,String.valueOf(resolveInfos.get(<span class="number">0</span>).activityInfo.name));</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取系统所有应用信息</span></span><br><span class="line"><span class="function">fun <span class="title">getAll</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">var</span> queryIntentActivities = mutableListOf&lt;ResolveInfo&gt;()</span><br><span class="line">    val intent = Intent(Intent.ACTION_MAIN).addCategory(Intent.CATEGORY_LAUNCHER)</span><br><span class="line">    <span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.M) {</span><br><span class="line">          queryIntentActivities =</span><br><span class="line">                packageManager.queryIntentActivities(intent, PackageManager.MATCH_ALL)</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">          queryIntentActivities = packageManager.queryIntentActivities(intent, <span class="number">0</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (info in queryIntentActivities) {</span><br><span class="line">        Log.d(<span class="string">"TAG"</span>,info.toString() + <span class="string">""</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><a href="https://blog.51cto.com/u_13316945/5832199" target="_blank" rel="noopener"><strong>Android实现获取系统应用列表</strong></a></p><h2 id="Android系统的过滤机制"><a href="#Android系统的过滤机制" class="headerlink" title="Android系统的过滤机制"></a>Android系统的过滤机制</h2><h3 id="过滤条件的设置"><a href="#过滤条件的设置" class="headerlink" title="过滤条件的设置"></a>过滤条件的设置</h3><p>​    Android通过Action、Category和Data的组合来定位窗口，但这3种过滤机制涉及的规则还是很多的。</p><p>窗口过滤条件首先需要从调用者和被调用者两方面考虑。</p><p>​    <strong>1．调用者</strong></p><p>​        <strong>调用者</strong>使用Intent的相应方法设置Action、Category和Data，也就是设置调用的窗口要满足的过滤条件。</p><p>​        Action和Data只能指定一个（分别通过setAction和setData方法设置），而Category可以指定多个（通过addCategory方法设置）。设置完过滤条件后，通常会使用Activity.startActivity方法显示满足条件的窗口。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//　通过Intent类的构造方法指定了Action，也可以通过Intent.setAction方法指定Action</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"android.intent.action.MYACTION"</span>);</span><br><span class="line"><span class="comment">//　添加了一个Category</span></span><br><span class="line">intent.addCategory(<span class="string">"android.intent.category.MYCATEGORY5"</span>);</span><br><span class="line"><span class="comment">//　指定了Data。Data通常是指Uri，也可以只MIMEType</span></span><br><span class="line">intent.setData(Uri.parse(<span class="string">"http://192.168.17.100/work/test.jsp"</span>));</span><br><span class="line"><span class="comment">//　显示窗口</span></span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></tbody></table></figure><p>​    <strong>2．被调用者</strong></p><p>声明规则，如何被调用，用＜intent-filter＞标签设置：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"MyActivity"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span>......<span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span>......<span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span>......<span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:name</span>=<span class="string">".MainActivity"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:exported</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">tools:ignore</span>=<span class="string">"AppLinkUrlError"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"http"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"https"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">               <span class="attr">android:name</span>=<span class="string">"android.app.lib_name"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">android:value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​        在＜intent-filter＞标签中可以使用＜action＞、＜category＞和＜data＞标签分别设置Action、Category和Data。但要记住＜action＞标签是必须的，如果不指定＜action＞，尽管程序可以成功编译和安装，但其他程序将无法通过隐式的方式显示该窗口（不能只指定Category和Data，而不指定Action）。</p><p>​        不管调用者是否添加Category，系统都会认为有一个默认的Category已经被添加。相当于调用者执行:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intent.addCategory(Intent.CATEGORY_DEFAULT);</span><br></pre></td></tr></tbody></table></figure><p>​        既然调用者默认加入了一个Category，那么被调用这自然也需要在过滤器（＜intent-filter＞标签）中加入如下的＜category＞标签了。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​        如果android.intent.action.MAIN和android.intent.category.LAUNCHER成对出现，并不需要指定android.intent.category.DEFAULT。其他的Action都必须要指定android.intent.category.DEFAULT。</p><h3 id="过滤器的筛选规则"><a href="#过滤器的筛选规则" class="headerlink" title="过滤器的筛选规则"></a>过滤器的筛选规则</h3><p>​        窗口类的每一个过滤器（＜intent-filter＞标签）都会在系统中注册，然后系统再根据Intent对象设置的过滤条件筛选符合条件的窗口时会逐一扫描这些过滤器，并会分别根据Action、Category和Data筛选出所有符合条件的过滤器，如果这些被筛选出的过滤器属于多个窗口，系统就会显示一个选择列表，如果只属于一个窗口，就直接显示该窗口。</p><p>​        筛选规则主要应从两个方面考虑。首先应考虑Action、Category和Data在默认情况下代表什么含义。也就是在不设置这3个过滤条件的情况下，系统会如何处理。</p><ul><li>不设置Action。由于Action是必选项，所以必须要设置Action，否则该窗口无法被其他的Android应用调用（同一个Android应用还是可以通过显式方式调用的）。</li><li>不设置Category。系统会添加一个默认的Category（android.intent.category.DEFAULT）。</li><li>不设置Data。系统会认为目标窗口不含有任何Data，也就是说如果不为Intent对象指定Data，在声明目标窗口时也不能在过滤器中使用＜data＞标签。否则即使Action和Category都匹配，该过滤器也不符合条件。</li></ul><p>​      第二个方面是Action、Category和Data如何进行匹配。系统会分别进行3次验证（分别验证这3个过滤条件），只有这3次验证都通过的过滤器才符合要求（该过滤器对应的窗口会成为候选窗口之一）</p><h4 id="1．Action验证"><a href="#1．Action验证" class="headerlink" title="1．Action验证"></a><strong>1．Action验证</strong></h4><p>​        如果某个过滤器指定了一个或多个＜action＞标签（如果没有＜action＞标签或Intent对象未设置Action，Action验证肯定失败）。系统会扫描所有的＜action＞标签，如果找到与指定Action相同的＜action＞标签，就认为Action验证通过。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">intent.setAction(<span class="string">"MYACTION1"</span>);</span><br></pre></td></tr></tbody></table></figure><p>系统中有一个过滤器的代码：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"MYACTION1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"MYACTION2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"MYACTION3"</span> /&gt;</span></span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​        在该过滤器中恰好有一个＜action＞标签的android:name属性值是MYACTION1，所以该过滤器通过了Action验证。</p><h4 id="2．Category验证"><a href="#2．Category验证" class="headerlink" title="2．Category验证"></a>2．Category验证</h4><p>​        Category验证采用了子集的方法，也就是说为Intent对象指定了N个Category，而在某一个过滤器中设置了M个Category，并且M ＞= N。那么如果N个Category是M个Category的子集，那么该过滤器通过Category验证。否则不管是M ＜ N，还是其他任何情况，Category验证都失败。</p><p>如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">intent.addCategory(<span class="string">"MYCATEGORY1"</span>);</span><br><span class="line">intent.addCategory(<span class="string">"MYCATEGORY2"</span>);</span><br><span class="line">intent.addCategory(<span class="string">"MYCATEGORY3"</span>);</span><br></pre></td></tr></tbody></table></figure><p>有两个过滤器：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">①号过滤器</span><br><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"MYACTION1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"MYACTION2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"MYACTION3"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"MYACTION4"</span> /&gt;</span></span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">②号过滤器</span><br><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"MYACTION1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"MYACTION2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"MYACTION4"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"MYACTION5"</span> /&gt;</span></span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​        由于①号过滤器包含了Intent对象设置的3个Category，所以第一个过滤器通过了Category验证。但②号过滤器由于缺少MYCATEGORY3，所以没有通过Category验证。</p><h4 id="3．Data验证"><a href="#3．Data验证" class="headerlink" title="3．Data验证"></a>3．Data验证</h4><h5 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h5><p>​        Data验证用于验证Uri和Mime Type。Uri比Url范围更广，除了可表示Web地址外，还可以表示如下格式的字符串:</p><p><strong>scheme://host:port/path</strong> 如 “<a href="http://www.google.com:8080/work/upload.jsp”" target="_blank" rel="noopener">http://www.google.com:8080/work/upload.jsp”</a></p><p>从这个字符串看，将Uri分成了如下4部分。</p><ol><li><strong>scheme</strong>：协议标识，例如，http、https、content、ftp等。</li><li><strong>host</strong>：域名、IP等。例如<a href="http://www.google.com、192.168.17.104等。" target="_blank" rel="noopener">www.google.com、192.168.17.104等。</a></li><li><strong>port</strong>：端口号，例如，80、8080等。</li><li><strong>path</strong>：资源的具体路径,如：/work/upload.jsp。</li></ol><p>一个标准的Uri:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//www.microsoft.com:8080/index.html</span></span><br><span class="line">组成部分:</span><br><span class="line">  - scheme：http。</span><br><span class="line">  - host：www.microsoft.com。  </span><br><span class="line">  - port：<span class="number">8080</span>。</span><br><span class="line">  - path：/index.html。</span><br></pre></td></tr></tbody></table></figure><p>path除了可以设置完整的路径外，还可以使用如下两种路径匹配方式:</p><ul><li><strong>pathPrefix</strong>：路径前缀。所有以pathPrefix开头的path都满足条件。例如“/in”可以匹配“/index.html”，也可以匹配“/in.jsp”。</li><li><strong>pathPattern</strong>：路径匹配模式。可以使用“<em>”或“.</em>”（星号前面加一个点）匹配相应的路径。“<em>”表示在“</em>”前面的字符会出现0个或任意多个。“.<em>”表示0个或任意多个字符。如，“abcd</em>e”可以匹配“abce”、“abcde”、“abcdde”、“abcddde”，也就是说在“abc”和“e”之间可以有0或任意多个“d”。而“ab.*cd”可以匹配“abcd”、“abxyzcd”、“ab123cd”，也就是说在“ab”和“cd”之间可以有0或多个任意字符</li></ul><p>​       不仅pathPattern属性可以使用通配符，host属性也可以使用“<em>”表示匹配所有的host（host属性值只能包含“</em>”，不能包含其他的字符）</p><p>​        Uri实际上由6个属性确定，其中前3个是scheme、host和port，还有3个路径（path、pathPrefix和pathPattern）。在一个过滤器（＜intent-filter＞标签）中可以有多个Data（用＜data＞标签定义）。要遵循如下规则:</p><ol><li>scheme是必须的，所以无论是调用者，还是被调用者，如果设置了Uri，必须指定scheme，否则Data验证一定失败。</li><li>属性不能跳跃设置，否则跳跃设置的属性将被忽略。</li><li>系统在检测每一个＜data＞标签时会根据依次检测每一个属性。例如，Intent对象指定的Uri包含scheme、host、port和path。那么系统会在当前的＜data＞标签中依次检测这4个属性（scheme、host、port和path）是否符合要求（path会检测3个属性：path、pathPrefix和pathPattern，这3个属性只要有一个通过即可）。只有同时符合要求，才会通过Data验证。</li><li>系统会检索过滤器中的所有Data来查找相应的属性。如，在一个过滤器中定义了3个Data，其中一个只指定了scheme和host，而另两个Data中只指定了port属性（两个Data指定了不同的属性）。而Uri是<a href="http://www.microsoft.com:8080。在Uri中包含了scheme、host和port。系统在验证第一个Data时自然要考虑这3个属性，但scheme和host都通过验证后，发现第一个Data中并没有设置port，这时系统并不认为验证失败，而是看看当前过滤器的其他Data中是否设置了port属性。恰好发现另外两个Data都设置了port属性，系统会分别拿这两个port属性值逐个与Uri中的端口号（8080）比较，只要有一个port是8080，就会通过Data验证。">http://www.microsoft.com:8080。在Uri中包含了scheme、host和port。系统在验证第一个Data时自然要考虑这3个属性，但scheme和host都通过验证后，发现第一个Data中并没有设置port，这时系统并不认为验证失败，而是看看当前过滤器的其他Data中是否设置了port属性。恰好发现另外两个Data都设置了port属性，系统会分别拿这两个port属性值逐个与Uri中的端口号（8080）比较，只要有一个port是8080，就会通过Data验证。</a></li><li>如果同时指定了path、pathPrefix和pathPattern属性，系统会依次处理这3个属性，直到一个属性的验证通过为止。也就是说这3个属性直接的关系是“或”，而不是“与”。</li><li>设置path和pathPrefix属性时必须以“/”开头，例如“/index.html”、“/abc”等。pathPattern属性值如果以“.<em>”开头，则不需要加“/”，因为“.</em>”已经包含“/”了。但如果不以“.*”开头，则pathPattern属性值必须以“/”开头。</li><li>如果Uri没有指定所有的过滤条件，例如，只指定了scheme和host，那么Data也不能设置Uri未指定的属性。在定义过滤器时，Data的过滤条件不能超过Uri中包含的信息，否则Data验证必然失败。</li><li>如果Uri指定的过滤条件比Data多，并且Uri与Data都指定的过滤条件都通过了验证，则通过Data验证。例如，Uri指定了scheme、host和port，而Data只指定了scheme。如果两个scheme相同，系统则认为通过Data验证。</li><li>如果同时设置了Uri与Mime Type。系统会分别验证Uri和Mime Type。</li><li>Uri是大小写敏感的，这一点与平常使用的Uri不同。</li></ol><p>​      Data不仅指Uri，也指Mime Type。Uri和Mime Type可以同时使用，也可以单独使用一个。如果同时使用Uri和Mime Type，要使用<strong>Intent.setDataAndType</strong>方法进行设置，否则Uri和Mime Type会互相覆盖</p><h5 id="Mime-Type"><a href="#Mime-Type" class="headerlink" title="Mime Type"></a>Mime Type</h5><p>​        Mime Type就是指可以处理的资源类型，例如“audio/ *”用于处理所有的音频资源，“audio/mp3”只用于处理MP3音频格式，“video/ *”用于处理所有的视频资源。在Data中使用mimeType属性设置Mime Type。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//这种情况下只有Uri和Mime Type同时通过验证，Data验证才算通过。</span><br><span class="line"><span class="tag">&lt;<span class="name">data</span></span></span><br><span class="line"><span class="tag">      <span class="attr">android:host</span>=<span class="string">"*"</span>　　</span></span><br><span class="line"><span class="tag">      <span class="attr">android:port</span>=<span class="string">"8080"</span>　　</span></span><br><span class="line"><span class="tag">      <span class="attr">android:path</span>=<span class="string">"/work/upload.jsp"</span>　　</span></span><br><span class="line"><span class="tag">      <span class="attr">android:scheme</span>=<span class="string">"http"</span>　　</span></span><br><span class="line"><span class="tag">      <span class="attr">android:mimeType</span>=<span class="string">"audio/*"</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>Data验证要想通过，需要同时通过如下3种验证。</strong></p><ol><li><strong>scheme、host、port、path（包括pathPrefix和pathPattern）。这4个属性的关系是“与”，只有同时满足这4个属性，才算通过验证。</strong></li><li><strong>ath、pathPrefix和pathPattern。这3个属性的关系是“或”，只要通过一个属性就算通过验证。</strong></li><li><strong>Uri（scheme、host、port、path、pathPrefix和pathPattern）和Mime Type。关系是“与”，如果同时设置了Uri和Mime Type，必须同时满足条件才算通过验证。</strong></li></ol><h3 id="过滤机制应用"><a href="#过滤机制应用" class="headerlink" title="过滤机制应用"></a>过滤机制应用</h3><p>通常Uri只指定scheme，顶多与Mime Type一起使用。</p><p>FilterProducer程序中为MainActivity类设置了7个过滤器：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:name</span>=<span class="string">".MainActivity"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ①号过滤器：用于启动窗口，在这里不需要考虑 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- ②号过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MYACTION1"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MYACTION2"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.MYCATEGORY1"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.MYCATEGORY2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- ③号过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MYACTION3"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MYACTION4"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.MYCATEGORY3"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.MYCATEGORY4"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- ④号过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MYACTION5"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.MYCATEGORY5"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--下面给出一个符合条件的Uri，只匹配scheme，Uri其他部分随意指定　　　　　　   http://www.microsoft.com:8888/index.html--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"http"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:mimeType</span>=<span class="string">"audio/*"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:mimeType</span>=<span class="string">"video/*"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- ⑤号过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MYACTION6"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--下面是一个符合条件的Uri http://www.google.com:8080/work/upload.jsp　　--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:host</span>=<span class="string">"*"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:mimeType</span>=<span class="string">"audio/*"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:path</span>=<span class="string">"/work/upload.jsp"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:port</span>=<span class="string">"8080"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:scheme</span>=<span class="string">"http"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- ⑥号过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MYACTION7"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--下面是一个符合条件的Uri　ftp://192.168.17.100:8080/work/upload.html　　--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:host</span>=<span class="string">"192.168.17.100"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:mimeType</span>=<span class="string">"audio/*"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">              <span class="attr">android:port</span>=<span class="string">"8080"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:scheme</span>=<span class="string">"ftp"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:pathPattern</span>=<span class="string">".*.html"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ⑦号过滤器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MYACTION7"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--　下面是3个符合条件的Uri</span></span><br><span class="line"><span class="comment">path属性验证通过　　　　　https://192.168.17.111:8888/work/test.up　　　　　　</span></span><br><span class="line"><span class="comment">pathPattern属性验证通过　https://192.168.17.111:8888/p/m/abc.html</span></span><br><span class="line"><span class="comment">       pathPrefix属性验证通过　https://192.168.17.111:8888/test/up.aspx　　--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:host</span>=<span class="string">"192.168.17.111"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:mimeType</span>=<span class="string">"audio/*"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:path</span>=<span class="string">"/work/test.up"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:pathPattern</span>=<span class="string">".*.html"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:pathPrefix</span>=<span class="string">"/test"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:port</span>=<span class="string">"8888"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:scheme</span>=<span class="string">"https"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">               <span class="attr">android:name</span>=<span class="string">"android.app.lib_name"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">android:value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>FilterConsumer根据FilterProducer的过滤规则启动FilterProducer：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() {</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第②号过滤器通过验证，利用了Action和Category验证规则，未使用Data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v View</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onClick_IntentFilter2</span><span class="params">(v:<span class="type">View</span>)</span></span>{</span><br><span class="line">        <span class="keyword">val</span> intent = Intent(<span class="string">"android.intent.action.MYACTION1"</span>)</span><br><span class="line">        intent.addCategory(<span class="string">"android.intent.category.MYCATEGORY1"</span>)</span><br><span class="line">        intent.addCategory(<span class="string">"android.intent.category.MYCATEGORY2"</span>)</span><br><span class="line">        startActivity(intent)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ③号过滤器通过验证，未指定Category</span></span><br><span class="line"><span class="comment">     * 因为默认已经为Intent对象添加了android.intent.category.DEFAULT</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v View</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onClick_IntentFilter3</span><span class="params">(v:<span class="type">View</span>)</span></span>{</span><br><span class="line">        <span class="keyword">val</span> intent = Intent(<span class="string">"android.intent.action.MYACTION4"</span>)</span><br><span class="line">        startActivity(intent)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ④号过滤器通过验证，Uri匹配了scheme（http），并且匹配了第1个Data（“audio/ *”）</span></span><br><span class="line"><span class="comment">     * 在进行Data验证时利用了Data验证规则的第8条</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v View</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onClick_IntentFilter4</span><span class="params">(v:<span class="type">View</span>)</span></span>{</span><br><span class="line">        <span class="keyword">val</span> intent = Intent(<span class="string">"android.intent.action.MYACTION5"</span>)</span><br><span class="line">        intent.setDataAndType(Uri.parse(<span class="string">"http://www.microsoft.com:8888/index.html"</span>),<span class="string">"audio/mp3"</span>)</span><br><span class="line">        startActivity(intent)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ⑤号过滤器通过验证</span></span><br><span class="line"><span class="comment">     * 在进行Data验证时利用了Data验证规则的第3、9条</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v View</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onClick_IntentFilter5</span><span class="params">(v:<span class="type">View</span>)</span></span>{</span><br><span class="line">        <span class="keyword">val</span> intent = Intent(<span class="string">"android.intent.action.MYACTION6"</span>)</span><br><span class="line">        intent.setDataAndType(Uri.parse(<span class="string">"http://www.google.com:8080/work/upload.jsp"</span>),<span class="string">"audio/*"</span>)</span><br><span class="line">        startActivity(intent)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ⑥号过滤器通过验证</span></span><br><span class="line"><span class="comment">     * 在进行Data验证时利用了Data验证规则的第3、4、9条</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v View</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onClick_IntentFilter6</span><span class="params">(v: <span class="type">View</span>)</span></span>{</span><br><span class="line">        <span class="keyword">val</span> intent = Intent(<span class="string">"android.intent.action.MYACTION7"</span>)</span><br><span class="line">        intent.setDataAndType(Uri.parse(<span class="string">"ftp://192.168.17.100:8080/work/upload.html"</span>),<span class="string">"audio/*"</span>)</span><br><span class="line">        startActivity(intent)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ⑦号过滤器通过验证</span></span><br><span class="line"><span class="comment">     * 在进行Data验证时利用了Data验证规则的第3、5、9条</span></span><br><span class="line"><span class="comment">     * 下面的代码调用了3次setDataAndType方法，分别设置了3个Uri，其中前两次加了注释，</span></span><br><span class="line"><span class="comment">     * 这3个Uri都符合要求，Uri的路径分别匹配path、pathPrefix和pahtPattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v View</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onClick_IntentFilter7</span><span class="params">(v:<span class="type">View</span>)</span></span>{</span><br><span class="line">        <span class="keyword">val</span> intent = Intent(<span class="string">"android.intent.action.MYACTION7"</span>)</span><br><span class="line">        <span class="comment">//intent.setDataAndType(Uri.parse("https://192.168.17.111:8888/work/test.up"), "audio/wav");</span></span><br><span class="line">        <span class="comment">//intent.setDataAndType(Uri.parse("https://192.168.17.111:8888/test/up.aspx"), "audio/wav");</span></span><br><span class="line">        intent.setDataAndType(Uri.parse(<span class="string">"https://192.168.17.111:8888/p/m/abc.html"</span>),<span class="string">"audio/wav"</span>)</span><br><span class="line">        startActivity(intent)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据对方的包名和全类名称启动对方的activity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v View</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onClick_IntentFilter8</span><span class="params">(v:<span class="type">View</span>)</span></span>{</span><br><span class="line">        <span class="keyword">val</span> intent = Intent()</span><br><span class="line">        intent.setClassName(<span class="string">"com.study.filterproducer"</span>,<span class="string">"com.study.filterproducer.MainActivity"</span>)</span><br><span class="line">        startActivity(intent)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="Android源代码与过滤器"><a href="#Android源代码与过滤器" class="headerlink" title="Android源代码与过滤器"></a>Android源代码与过滤器</h2><h3 id="系统内置程序有哪些窗口可以利用"><a href="#系统内置程序有哪些窗口可以利用" class="headerlink" title="系统内置程序有哪些窗口可以利用"></a>系统内置程序有哪些窗口可以利用</h3><p>在Intent类中定义了一些Action常量，这些常量用来调用系统的一些窗口或接收系统广播。</p><p><img src="/2022/12/21/Intent%E4%B8%8EIntent%20Filter/3.png" alt=""></p><p>​        系统内置程序的APK文件都在系统的目录中（/system/app），如果没有root权限根本访问不了该目录，更别提获取APK文件了。尽管熟悉Linux的知道可以用su或sudo命令暂时将用户权限提升到root。但很多手机安装的Android系统根本就没有su或sudo命令，所以为了方法更通用，采用直接查看Android源代码的方法获取需要的信息。</p><p><a href="https://www.androidos.net.cn/sourcecode" target="_blank" rel="noopener">Android系统源码</a></p><p>​        Android系统内置应用程序的源代码都放在了如下的目录：＜Android源代码根目录＞/packages/apps</p><p>常用内置应用的目录：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Browser：浏览器。</span><br><span class="line">Calculator：计算器。</span><br><span class="line">Calendar：日历。</span><br><span class="line">Camera：照相机。</span><br><span class="line">Contacts：联系人    </span><br><span class="line">Launcher2：Android系统的启动程序。在系统启动后第一个运行的就是该程序，主要包括桌面、图标、程序列表等。经常提及的定制ROM(刷机包)，UI部分主要就是修改Launcher2。</span><br></pre></td></tr></tbody></table></figure><h4 id="打开系统计算器"><a href="#打开系统计算器" class="headerlink" title="打开系统计算器"></a>打开系统计算器</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">String calculatorPackage = <span class="keyword">null</span>;</span><br><span class="line">PackageManager pm = mContext.getPackageManager();</span><br><span class="line"><span class="comment">// 查询所有已经安装的应用程序</span></span><br><span class="line">List&lt;ApplicationInfo&gt; appInfos= pm.getInstalledApplications(PackageManager.GET_UNINSTALLED_PACKAGES);<span class="comment">// GET_UNINSTALLED_PACKAGES代表已删除，但还有安装目录的</span></span><br><span class="line"><span class="keyword">for</span> (ApplicationInfo applicationInfo : appInfos){</span><br><span class="line">    String packageName = applicationInfo.packageName;</span><br><span class="line">    <span class="keyword">if</span> (packageName.contains(<span class="string">"calculator"</span>)){</span><br><span class="line">        calculatorPackage = packageName;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">Intent intent = mContext.getPackageManager().getLaunchIntentForPackage(calculatorPackage);</span><br><span class="line">mContext.startActivity(intent);</span><br></pre></td></tr></tbody></table></figure><p>＜Android源代码根目录＞/packages/apps/Calculator/AndroidManifest.xml:</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.android.calculator2"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher_calculator"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/CalculatorTheme"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">".Calculator"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:windowSoftInputMode</span>=<span class="string">"stateAlwaysHidden"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.APP_CALCULATOR"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>调用：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick_Calculator</span><span class="params">(View view)</span></span>{</span><br><span class="line">    <span class="comment">//Intent intent = new Intent("android.intent.action.MAIN");</span></span><br><span class="line">    <span class="comment">//intent.addCategory("android.intent.category.APP_CALCULATOR");</span></span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN);</span><br><span class="line">    intent.addCategory(Intent.CATEGORY_APP_CALCULATOR);</span><br><span class="line">    startActivity(intent);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="用浏览器（Browser）显示网页"><a href="#用浏览器（Browser）显示网页" class="headerlink" title="用浏览器（Browser）显示网页"></a>用浏览器（Browser）显示网页</h4><p>＜Android源代码根目录＞/packages/apps/Browser/AndroidManifest.xml里的一个过滤器：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"BrowserActivity"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">android:label</span>=<span class="string">"@string/application_name"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">android:launchMode</span>=<span class="string">"singleTask"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">android:alwaysRetainTaskState</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">android:configChanges</span>=<span class="string">"orientation|keyboardHidden|keyboard|screenSize|locale"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">android:theme</span>=<span class="string">"@style/BrowserTheme"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">android:windowSoftInputMode</span>=<span class="string">"adjustResize"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.speech.action.VOICE_SEARCH_RESULTS"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 2号 For these schemes were not particular MIME type has been</span></span><br><span class="line"><span class="comment">                 supplied, we are a good candidate. --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"http"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"https"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"about"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"javascript"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>     </span><br><span class="line">......</span><br><span class="line">    <span class="comment">&lt;!--  3号 We are also the main entry point of the browser. --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.APP_BROWSER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>使用上面的2号过滤器跳转:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW,Uri.parse(<span class="string">"http://blog.csdn.net/nokiaguy"</span>));</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></tbody></table></figure><p>使用3号：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"android.intent.action.MAIN"</span>);</span><br><span class="line">intent.addCategory(Intent.CATEGORY_BROWSABLE);</span><br><span class="line"><span class="comment">//Intent.CATEGORY_APP_BROWSER是android.intent.category.APP_BROWSER对应的常量</span></span><br><span class="line">intent.addCategory(Intent.CATEGORY_APP_BROWSER);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></tbody></table></figure><h4 id="拨打电话（Phone）与授权"><a href="#拨打电话（Phone）与授权" class="headerlink" title="拨打电话（Phone）与授权"></a>拨打电话（Phone）与授权</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Intent callIntent = <span class="keyword">new</span> Intent(Intent.ACTION_CALL,Uri.parse(<span class="string">"tel:12345678"</span>));</span><br><span class="line">startActivity(callIntent);</span><br></pre></td></tr></tbody></table></figure><p>＜Android源代码根目录＞/packages/apps/Phone/AndroidManifest.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.CALL"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"tel"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​        拨号盘类（OutgoingCallBroadcaster）的声明代码在＜activity＞标签中设置了android:permission属性，并指定了android.permission.CALL_PHONE权限，所以在调用者的AndroidManifest.xml文件中要加入如下的代码才可以成功进行拨号。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.CALL_PHONE"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>注意：</p><p>​        有的Uri并未指定“//”，例如“tel:12345678”。实际上这是由相应的程序进行处理的，因为如果不指定“//”，是无法通过Uri.getHost方法获取Host的，自然也就无法获取电话号的。不过处理来电的程序（Phone）会从“tel:12345678”中解析出电话号。如果某些程序只能从Uri的host中获取数据，那就必须加“//”了。</p><h4 id="获取第三方程序中可调用的窗口"><a href="#获取第三方程序中可调用的窗口" class="headerlink" title="获取第三方程序中可调用的窗口"></a>获取第三方程序中可调用的窗口</h4><p>​        解开sina_weibo.apk文件后，再解压根目录会找到一个AndroidManifest.xml文件，不过该文件是被编译过的，无法使用文本编辑器查看其内容。但可以使用一些工具将其反编译。一个简单的工具AXMLPrinter2，该工具用Java编写，是一个jar文件，所以可以在任何支持JDK的操作系统平台上使用。该工具的下载地址如下：<a href="http://android4me.googlecode.com/files/AXMLPrinter2.jar" target="_blank" rel="noopener">http://android4me.googlecode.com/files/AXMLPrinter2.jar</a></p><p>​        将AXMLPrinter2.jar文件与AndroidManifest.xml文件放到一个目录，然后在控制台（终端）进入该目录，并执行如下命令，将AndroidManifest.xml文件解压为AndroidManifest.txt：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ./AXMLPrinter.jar ./AndroidManifest.xml ＞ ./AndroidManifest.txt</span><br></pre></td></tr></tbody></table></figure><h2 id="传递附加数据（Extra）"><a href="#传递附加数据（Extra）" class="headerlink" title="传递附加数据（Extra）"></a>传递附加数据（Extra）</h2><p>通常可以使用如下两种方式向窗口传递数据</p><ol><li>通过Data传递数据。</li><li>通过putExtra传递附加数据。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//　写入附加数据</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">intent.putExtra(<span class="string">"key1"</span>, <span class="number">20</span>);</span><br><span class="line">intent.putExtra(<span class="string">"key2"</span>, <span class="string">'c'</span>);</span><br><span class="line">intent.putExtra(<span class="string">"key3"</span>,<span class="string">"value"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//　读取附加数据</span></span><br><span class="line"><span class="comment">//　0是默认值</span></span><br><span class="line"><span class="keyword">int</span> n = intent.getIntExtra(<span class="string">"key1"</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//　'c'是默认值</span></span><br><span class="line"><span class="keyword">char</span> c = intent.getCharExtra(<span class="string">"key2"</span>, <span class="string">'c'</span>);</span><br><span class="line">String s = intent.getStringExtra(<span class="string">"key3"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//还可以使用Bundle对象设置完附加数据</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">bundle.putInt(<span class="string">"key1"</span>, <span class="number">20</span>);</span><br><span class="line">bundle.putChar(<span class="string">"key2"</span>, <span class="string">'c'</span>);</span><br><span class="line">bundle.putString(<span class="string">"key3"</span>, <span class="string">"value"</span>);</span><br><span class="line">intent.putExtras(bundle);</span><br></pre></td></tr></tbody></table></figure><h2 id="解析数据"><a href="#解析数据" class="headerlink" title="解析数据"></a>解析数据</h2><p>​        除了会通过Intent对象传递数据外，还需要在被调用窗口中获取这些数据。例如，向某个窗口传入了一个Uri。通常会在窗口类的onCreate方法中将Uri分解，获取Uri的各个部分，例如，scheme、host、port、path等。这些信息都可以从Intent类的相应方法获取:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">获取Action：Intent.getAction方法</span><br><span class="line">获取多个Category：Intent.getCategories方法</span><br><span class="line">获取Mime Type：Intent.getType方法</span><br><span class="line"><span class="comment">//　直接获取Uri对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Uri <span class="title">getData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//　获取字符串形式的Uri</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDataString</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//　获取scheme</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getScheme</span><span class="params">()</span></span></span><br><span class="line"><span class="function">获取Flags：Intent.getFlags方法</span></span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;Android系统的信使：Intent&quot;&gt;&lt;a href=&quot;#Android系统的信使：Intent&quot; class=&quot;headerlink&quot; title=&quot;Android系统的信使：Intent&quot;&gt;&lt;/a&gt;Android系统的信使：Intent&lt;/h2&gt;&lt;p&gt;​        Intent对象被应用于4大应用程序组件中的3个（Activity、Service和Broadcast Receiver），而Content Provider会采用其他方式访问。&lt;/p&gt;
&lt;p&gt;服务（Service）和广播（Broadcast）的使用方法和窗口（Activity）类似。&lt;/p&gt;
&lt;p&gt;开始服务：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Intent serviceIntent = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, MyService&lt;span class=&quot;class&quot;&gt;.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;startService(serviceIntent);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;发送广播:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//　mybroadcast是广播字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Intent broadcastIntent = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Intent(&lt;span class=&quot;string&quot;&gt;&quot;mybroadcast&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//　向系统发送一条广播&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sendBroadcast(broadcastIntent);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;Intent对象&quot;&gt;&lt;a href=&quot;#Intent对象&quot; class=&quot;headerlink&quot; title=&quot;Intent对象&quot;&gt;&lt;/a&gt;Intent对象&lt;/h2&gt;&lt;p&gt;Intent对象可以完成3项工作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定位窗口：通过Component name、Action、Category和Data可以定位一个或多个Activity。&lt;/li&gt;
&lt;li&gt;传递数据：通过Data和Extra。&lt;/li&gt;
&lt;li&gt;控制访问组件的行为（窗口、服务和广播）：通过Flags。&lt;/li&gt;&lt;/ol&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
    
      <category term="Android权威指南2" scheme="https://hluck.github.io/tags/Android%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%972/"/>
    
  </entry>
  
  <entry>
    <title>窗口（Activity）与视图（View）</title>
    <link href="https://hluck.github.io/2022/12/19/%E7%AA%97%E5%8F%A3%EF%BC%88Activity%EF%BC%89%E4%B8%8E%E8%A7%86%E5%9B%BE%EF%BC%88View%EF%BC%89/"/>
    <id>https://hluck.github.io/2022/12/19/%E7%AA%97%E5%8F%A3%EF%BC%88Activity%EF%BC%89%E4%B8%8E%E8%A7%86%E5%9B%BE%EF%BC%88View%EF%BC%89/</id>
    <published>2022-12-19T03:58:23.688Z</published>
    <updated>2022-12-28T14:06:27.073Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h3 id="声明和使用Activity"><a href="#声明和使用Activity" class="headerlink" title="声明和使用Activity"></a>声明和使用Activity</h3><h4 id="Activity的基本用法"><a href="#Activity的基本用法" class="headerlink" title="Activity的基本用法"></a>Activity的基本用法</h4><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:name</span>=<span class="string">".MainActivity"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:exported</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:label</span>=<span class="string">"@string/title_activity_datetime"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">               <span class="attr">android:name</span>=<span class="string">"android.app.lib_name"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">android:value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​        Action和Category分别是android.intent.action.MAIN和android.intent.category.LAUNCHER,这是系统用于调用第一个显示的Activity的Action和Category。这个Action和Category可以在多个Activity中使用，如果在一个应用程序中声明了多个使用该Action和Category的窗口，系统会在程序列表中生成多个程序图标，每个图标对应某一个使用android.intent.action.MAIN和android.intent.category.LAUNCHER的窗口。当单击某个图标后就会显示与其对应的窗口。程序启动时还是显示第一个使用android.intent.action.MAIN和android.intent.category.LAUNCHER的窗口。</p><h4 id="Activity的生命周期"><a href="#Activity的生命周期" class="headerlink" title="Activity的生命周期"></a>Activity的生命周期</h4><p>7个生命周期方法的定义如下：</p><a id="more"></a><ul><li>protected void onCreate(Bundle savedInstanceState)</li><li>protected void onStart()</li><li>protected void onResume()</li><li>protected void onPause()</li><li>protected void onStop()</li><li>protected void onRestart()</li><li>protected void onDestroy()</li></ul><p>上面7个生命周期方法分别在4个阶段按一定的顺序进行调用，这4个阶段如下:</p><p><strong>开始Activity：</strong>在这个阶段依次执行3个生命周期方法，分别是<strong>onCreate</strong>、<strong>onStart</strong>和<strong>onResume</strong>。</p><p><strong>Activity失去焦点：</strong>如果在Activity获得焦点的情况下进入其他的Activity或应用程序，当前的Activity会失去焦点。在这一阶段会依次执行<strong>onPause</strong>和<strong>onStop</strong>方法。</p><p><strong>Activity重新获得焦点：</strong>如果Activity重新获得焦点，会依次执行3个生命周期方法，分别是<strong>onRestart</strong>、<strong>onStart</strong>和<strong>onResume</strong>。</p><p><strong>关闭Activity：</strong>当Activity被关闭时系统会依次执行3个生命周期方法，分别是<strong>onPause</strong>、<strong>onStop</strong>和<strong>onDestroy</strong>。</p><p>​        如果在执行onPause方法的过程中Activity重新获得了焦点，然后又失去了焦点，系统将不会再执行onStop方法，而是按如下顺序执行相应的生命周期方法：<strong>onPause -＞ onResume-＞ onPause</strong></p><p>​        如果在执行onStop方法的过程中Activity重新获得了焦点，然后又失去了焦点，系统将不会执行onDestroy方法，而是按如下顺序执行相应的生命周期方法：<strong>onStop→onRestart→onStart→onResume→onPause→onStop</strong></p><p><img src="/2022/12/19/%E7%AA%97%E5%8F%A3%EF%BC%88Activity%EF%BC%89%E4%B8%8E%E8%A7%86%E5%9B%BE%EF%BC%88View%EF%BC%89/1.png" alt=""></p><p>Activity有如下3种生命周期：</p><p><strong>整体生命周期：</strong>onCreate→……→onDestroy。</p><p><strong>可视生命周期：</strong>onStart→……→onStop。</p><p><strong>焦点生命周期：</strong>onResume→onPause。</p><h3 id="窗口的常用事件"><a href="#窗口的常用事件" class="headerlink" title="窗口的常用事件"></a>窗口的常用事件</h3><h4 id="设置窗口标题事件（onTitleChanged）"><a href="#设置窗口标题事件（onTitleChanged）" class="headerlink" title="设置窗口标题事件（onTitleChanged）"></a>设置窗口标题事件（onTitleChanged）</h4><p>​        窗口的标题可以在声明窗口时通过＜activity＞标签的android:label属性指定，也可以在代码中通过setTitle方法动态设置。当窗口标题被设置后，会调用onTitleChanged方法,该方法的原型如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onTitleChanged</span><span class="params">(CharSequence title, <span class="keyword">int</span> color)</span></span>;</span><br></pre></td></tr></tbody></table></figure><p>​        其中title参数表示改变后的窗口标题，可通过setTitle方法设置，color参数表示改变后的窗口标题颜色，可以通过setTitleColor方法设置。无论是调用setTitle方法还是调用setTitleColor方法都会调用onTitleChanged来捕获标题的变化。</p><p>​        onPostCreate方法，该方法会在窗口完全显示后调用，也就是说onTitleChanged方法会在onCreate和onRestoreInstanceState方法之后调用,也就是说在默认情况下onPostCreate方法也调用了onTitleChanged方法</p><h4 id="键盘按下和抬起事件（onKeyDown和onKeyUp）"><a href="#键盘按下和抬起事件（onKeyDown和onKeyUp）" class="headerlink" title="键盘按下和抬起事件（onKeyDown和onKeyUp）"></a>键盘按下和抬起事件（onKeyDown和onKeyUp）</h4><p>​        其实按键单击就是按键按下和抬起的组合动作，所以窗口事件中并不能捕获按键单击事件，而只能捕获按键按下和抬起事件，分别用onKeyDown和onKeyUp方法捕获。这两个方法的原型如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyUp</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span></span></span><br></pre></td></tr></tbody></table></figure><p>​        keyCode表示按下或抬起的按键代码，通过event参数则可以获得更多的按键信息。        </p><p>​        如果这两个方法返回true，表示按键事件已经处理完毕，不会再调用其他回调方法处理按键事件了。如果还想将处理动作继续传递下去，该方法应返回false。</p><h5 id="如何捕捉Home键的动作"><a href="#如何捕捉Home键的动作" class="headerlink" title="如何捕捉Home键的动作"></a>如何捕捉Home键的动作</h5><p>​        onKeyDown和onKeyUp方法无法来捕获Home键的动作.</p><p>​        按Home键程序并没有退出（窗口的生命周期只执行到onStop方法），只是切换到后台运行了。而按Back键或调用finish方法则关闭当前程序，当前窗口的生命周期也就结束了。系统会在调用onDestroy方法后释放窗口对象（但一些资源并未释放，如静态变量），按Home和Back键都执行的最后一个方法是onStop，所以很容易想到在onStop方法中处理按Home键的动作。</p><p>​        由于窗口不管以何种方式关闭（按Back键、执行finish方法等），都会调用Activity.finish方法，而且该方法是在调用窗口生命周期方法之前就调用了，也就是说调用onPause方法之前会首先调用finish方法。而按Home键系统并不会调用finish方法，所以覆盖finish方法，并在finish方法中设置标志</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">BaseActivity</span>&lt;<span class="type">ActivityMainBinding</span>&gt;</span>() {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//true：窗口退出　 false：窗口切换到后台执行，并没有退出</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> isFinished = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> ActivityMainBinding.<span class="title">initBinding</span><span class="params">()</span></span> {</span><br><span class="line">        title = taskId.toString()</span><br><span class="line">        mBinding.btnShowDate.setOnClickListener {</span><br><span class="line">            <span class="keyword">val</span> sdf = SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">            showDialog(<span class="string">"显示当前日期"</span>,sdf.format(Date()))</span><br><span class="line">        }</span><br><span class="line">        mBinding.btnShowTime.setOnClickListener {</span><br><span class="line">            <span class="keyword">val</span> sdf = SimpleDateFormat(<span class="string">"HH:mm:ss"</span>)</span><br><span class="line">            showDialog(<span class="string">"显示当前时间"</span>,sdf.format(Date()))</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当窗口重新开始时执行该方法，该方法可以处理重新切换回当前程序后要完成的工作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStart</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onStart()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当窗口移到后台执行或退出时执行该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStop</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="comment">//如果isFinished=false，表示当前窗口只是切换到后台运行，并没有退出</span></span><br><span class="line">        <span class="keyword">if</span> (!isFinished){</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>,<span class="string">"窗口已经在后台运行（按了Home键）!"</span>,Toast.LENGTH_SHORT).show()</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">super</span>.onStop()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">showDialog</span><span class="params">(title:<span class="type">String</span>, msg:<span class="type">String</span>)</span></span>{</span><br><span class="line">        AlertDialog.Builder(<span class="keyword">this</span>)</span><br><span class="line">            .setIcon(android.R.drawable.ic_dialog_info)</span><br><span class="line">            .setTitle(title)</span><br><span class="line">            .setMessage(msg)</span><br><span class="line">            .setPositiveButton(<span class="string">"确定"</span>,<span class="literal">null</span>)</span><br><span class="line">            .show()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 捕捉按键按下事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyCode Int 按键代码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event KeyEvent</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onKeyDown</span><span class="params">(keyCode: <span class="type">Int</span>, event: <span class="type">KeyEvent</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">        Log.d(<span class="string">"KeyCode"</span>,keyCode.toString())</span><br><span class="line">        <span class="comment">//输出按键的重复次数</span></span><br><span class="line">        Log.d(<span class="string">"RepeatCount"</span>,event?.repeatCount.toString())</span><br><span class="line">        <span class="keyword">if</span> (event?.repeatCount == <span class="number">200</span>){</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>,<span class="string">"已经按了一会了，累了吧，该松开了"</span>,Toast.LENGTH_SHORT).show()</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_BACK){</span><br><span class="line">            Log.d(<span class="string">"main"</span>,<span class="string">"BACK DOWN"</span>)</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(keyCode, event)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只要窗口退出，就一定会调用finish方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">finish</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="comment">//设置标志</span></span><br><span class="line">        isFinished = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">super</span>.finish()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * //　捕获按键抬起事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyCode Int</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event KeyEvent</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onKeyUp</span><span class="params">(keyCode: <span class="type">Int</span>, event: <span class="type">KeyEvent</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">        <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_BACK){</span><br><span class="line">            Log.d(<span class="string">"main"</span>,<span class="string">"BACK UP"</span>)</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onKeyUp(keyCode,event)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="任意情况下捕捉键盘事件（dispatchKeyEvent）"><a href="#任意情况下捕捉键盘事件（dispatchKeyEvent）" class="headerlink" title="任意情况下捕捉键盘事件（dispatchKeyEvent）"></a>任意情况下捕捉键盘事件（dispatchKeyEvent）</h4><p>​        通过dispatchKeyEvent方法在任何情况下捕捉到按键事件（仍然无法捕捉到Home按键的动作）。</p><p>dispatchKeyEvent方法的原型如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchKeyEvent</span><span class="params">(KeyEvent event)</span></span></span><br></pre></td></tr></tbody></table></figure><p>​        event参数的含义与onKeyDown及onKeyUp方法的event参数的含义相同。该方法返回true，表示已经处理了按键事件，其他的处理方法不再调用，如果还想让其他按键事件方法进行处理，该方法要返回false。</p><p>​        由于按键分为按下和抬起两个动作，而只有一个dispatchKeyEvent方法，所以该方法会被调用两次（按下调用一次，抬起调用一次）,通过如下代码判断是按下的动作，还是抬起的动作:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">dispatchKeyEvent</span><span class="params">(event: <span class="type">KeyEvent</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">    <span class="keyword">if</span> (event?.action == KeyEvent.ACTION_DOWN){</span><br><span class="line">        Log.d(<span class="string">"Main"</span>,<span class="string">"down"</span>)</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (event?.action == KeyEvent.ACTION_UP){</span><br><span class="line">        Log.d(<span class="string">"Main"</span>,<span class="string">"up"</span>)</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.dispatchKeyEvent(event)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="回退事件（onBackPressed）"><a href="#回退事件（onBackPressed）" class="headerlink" title="回退事件（onBackPressed）"></a>回退事件（onBackPressed）</h4><p>​        <strong>onBackPressed方法单独捕捉Back键的动作</strong>。该方法没有参数，也没有返回值，因为该方法是调用链上最后一个调用的，而且只捕获Back按键的动作，所以并不需要参数和返回值。onBackPressed方法始终只调用一次，不管是按下和抬起。</p><h4 id="按键长按事件（onKeyLongPress）"><a href="#按键长按事件（onKeyLongPress）" class="headerlink" title="按键长按事件（onKeyLongPress）"></a>按键长按事件（onKeyLongPress）</h4><p>​        简单地实现onKeyLongPress方法并不会被调用，还必须在onKeyDown方法中调用KeyEvent.startTracking方法，并且onKeyDown方法返回true才可能捕捉到按键长按事件。</p><p>​        <strong>startTracking</strong>方法用于跟踪按键动作，例如按下的时间等。</p><p>​        使用startTracking方法还应注意的是该方法同时只能跟踪一个按键，如果在跟踪的过程中按下了别的按键，当前跟踪过程将停止，转而跟踪新按下的按键。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 捕捉按键按下事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyCode Int 按键代码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event KeyEvent</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onKeyDown</span><span class="params">(keyCode: <span class="type">Int</span>, event: <span class="type">KeyEvent</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">        Log.d(<span class="string">"KeyCode"</span>,keyCode.toString())</span><br><span class="line">        <span class="comment">//输出按键的重复次数</span></span><br><span class="line">        Log.d(<span class="string">"RepeatCount"</span>,event?.repeatCount.toString())</span><br><span class="line">        <span class="keyword">if</span> (event?.repeatCount == <span class="number">200</span>){</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>,<span class="string">"已经按了一会了，累了吧，该松开了"</span>,Toast.LENGTH_SHORT).show()</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_BACK){</span><br><span class="line">            Log.d(<span class="string">"main"</span>,<span class="string">"BACK DOWN"</span>)</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//必须调用startTracking方法</span></span><br><span class="line">        event?.startTracking()</span><br><span class="line">        <span class="comment">//必须返回true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onKeyLongPress</span><span class="params">(keyCode: <span class="type">Int</span>, event: <span class="type">KeyEvent</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">        Log.d(<span class="string">"main"</span>,<span class="string">"长按了"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onKeyLongPress(keyCode, event)</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h4 id="屏幕触摸事件（onTouchEvent）"><a href="#屏幕触摸事件（onTouchEvent）" class="headerlink" title="屏幕触摸事件（onTouchEvent）"></a>屏幕触摸事件（onTouchEvent）</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span></span></span><br></pre></td></tr></tbody></table></figure><p>​        event参数可以获取与触摸相关的信息,例如，触摸点的屏幕坐标，当前的触摸状态是按下，还是抬起，如果Android支持鼠标，还可以获取按下的是鼠标的哪几个键。</p><p>​        如果onTouchEvent方法返回true，表示该方法已经处理完了屏幕触摸工作，不会再将屏幕触摸动作传递给下一个可以接收到该事件的方法。如果该方法返回false，则会允许调用下一个可以处理屏幕触摸动作的方法。</p><p>输出当前触摸屏幕的状态以及触摸点的X、Y坐标值:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Android系统使用的坐标系的0点坐标在屏幕的左上角，坐标值是（0,0）。</span></span><br><span class="line"><span class="comment">     * 屏幕从左向右为x轴的正方向，</span></span><br><span class="line"><span class="comment">     * 屏幕从上到下为y轴的正方向。</span></span><br><span class="line"><span class="comment">     * MotionEvent.getY方法返回的Y坐标值包括标题栏的高度。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event MotionEvent</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTouchEvent</span><span class="params">(event: <span class="type">MotionEvent</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">    <span class="comment">//　按下状态</span></span><br><span class="line">    <span class="keyword">if</span>(event?.action == MotionEvent.ACTION_DOWN){</span><br><span class="line">        Log.d(<span class="string">"onTouchEvent"</span>,<span class="string">"DOWN"</span>)</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (event?.action == MotionEvent.ACTION_UP){ <span class="comment">//　抬起状态</span></span><br><span class="line">        Log.d(<span class="string">"onTouchEvent"</span>,<span class="string">"UP"</span>)</span><br><span class="line">    }</span><br><span class="line">    Log.d(<span class="string">"onTouchEvent"</span>,<span class="string">"X坐标：<span class="subst">${event?.x}</span>"</span>)</span><br><span class="line">    Log.d(<span class="string">"onTouchEvent"</span>,<span class="string">"Y坐标：<span class="subst">${event?.y}</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="窗口获得焦点事件（onWindowFocusChanged）"><a href="#窗口获得焦点事件（onWindowFocusChanged）" class="headerlink" title="窗口获得焦点事件（onWindowFocusChanged）"></a>窗口获得焦点事件（onWindowFocusChanged）</h4><p>​        除了可以使用窗口生命周期的onResume和onPause方法处理窗口获得和失去焦点的动作，还可以使用onWindowFocusChanged方法来处理窗口获得和失去焦点的动作。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onWindowFocusChanged</span><span class="params">(<span class="keyword">boolean</span> hasFocus)</span></span></span><br></pre></td></tr></tbody></table></figure><p>​        其中hasFocus参数表示窗口是否获得了焦点，如果该参数值为true，表示窗口已经获得了焦点；如果为false，表示窗口失去了焦点。</p><p>​        如果窗口的焦点发生变化，该方法会在onResume或onPause方法后面调用。</p><h3 id="在不同Activity之间传递数据"><a href="#在不同Activity之间传递数据" class="headerlink" title="在不同Activity之间传递数据"></a>在不同Activity之间传递数据</h3><h4 id="使用Intent传递数据"><a href="#使用Intent传递数据" class="headerlink" title="使用Intent传递数据"></a>使用Intent传递数据</h4><p>​        通过Intent.putExtra方法可以将简单类型的数据或可序列化的对象保存在Intent对象中，然后在目标Activity中使用getXxx（getInt、getString等）方法获得这些数据。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> intent = Intent(<span class="keyword">this</span>,MainActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line"><span class="comment">//传递String类型的值</span></span><br><span class="line">intent.putExtra(<span class="string">"something"</span>,<span class="string">"lucky to you."</span>)</span><br><span class="line"><span class="comment">//传递int类型的值</span></span><br><span class="line">intent.putExtra(<span class="string">"intValue"</span>,<span class="number">100</span>)</span><br><span class="line"><span class="keyword">val</span> <span class="keyword">data</span> = Data()</span><br><span class="line"><span class="keyword">data</span>.id = <span class="number">1000</span></span><br><span class="line"><span class="keyword">data</span>.name = <span class="string">"heloo"</span></span><br><span class="line"><span class="comment">//传递可序列化的对象</span></span><br><span class="line">intent.putExtra(<span class="string">"objValue"</span>,<span class="keyword">data</span>)</span><br><span class="line">startActivity(intent)</span><br></pre></td></tr></tbody></table></figure><p>获取Intent传来的值：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//　获得String类型的值　　　　</span></span><br><span class="line">String intentString =　getIntent().getStringExtra(<span class="string">"intent_string"</span>);</span><br><span class="line"><span class="comment">//　获得Integer类型的值　　　　</span></span><br><span class="line"><span class="keyword">int</span> intentInteger = getIntent().getExtras().getInt(<span class="string">"intent_integer"</span>);</span><br><span class="line"><span class="comment">//　获得Data类型的值　　　　</span></span><br><span class="line">Data data = (Data)getIntent().getExtras().get(<span class="string">"intent_object"</span>);</span><br></pre></td></tr></tbody></table></figure><h4 id="使用静态变量传递数据"><a href="#使用静态变量传递数据" class="headerlink" title="使用静态变量传递数据"></a>使用静态变量传递数据</h4><p>​        Intent无法传递不能序列化的对象，也就是没有实现java.io.Serializable接口的类创建的对象。例如，存储图像数据的Bitmap对象就无法通过Intent对象进行传递。如果传递自定义类的对象，也必须实现java.io.Serializable接口才可以。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity2</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>{　　</span><br><span class="line">    <span class="comment">//　下面定义了3个静态变量　　</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String name;　　</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> id;　　</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Data data;</span><br><span class="line">    ...</span><br></pre></td></tr></tbody></table></figure><p>​        之后在显示MyActivity2之前（调用startActivity方法之前）为这些静态变量赋值。</p><h4 id="使用剪贴板传递数据"><a href="#使用剪贴板传递数据" class="headerlink" title="使用剪贴板传递数据"></a>使用剪贴板传递数据</h4><p>​        剪贴板只能存储简单类型数据或可序列化的对象，对于某些不可序列化的对象如果可以将其转换成字节流（字节数组），也可以将这些对象保存到剪贴板中，例如Bitmap对象（保存图像的对象）是不可序列化的，但可以将其保存的图像数据转换为字节数组，这样就可以将其保存到剪贴板中了。</p><p>将可序列化的Data对象转换为Base64编码后以字符串形式存储在剪贴板中：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mBinding.btn3.setOnClickListener {</span><br><span class="line">    <span class="keyword">val</span> intent3 = Intent(<span class="keyword">this</span><span class="symbol">@MainActivity</span>,Activity2::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">    <span class="comment">//获取剪贴板对象（ClipboardManager）</span></span><br><span class="line">    <span class="keyword">val</span> clipboard = getSystemService(Context.CLIPBOARD_SERVICE) <span class="keyword">as</span> ClipboardManager</span><br><span class="line">    <span class="comment">//创建Data对象</span></span><br><span class="line">    <span class="keyword">val</span> clipData = Data(<span class="number">666</span>,<span class="string">"通过Clipboard传递的数据"</span>)</span><br><span class="line">    <span class="comment">//　创建字节数组输出流对象，用于将Data对象转换为字节流</span></span><br><span class="line">    <span class="keyword">val</span> baos = ByteArrayOutputStream()</span><br><span class="line">    <span class="comment">//用于保存Data对象生成的Base64格式的字符串</span></span><br><span class="line">    <span class="keyword">var</span> base64Str = <span class="string">""</span></span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">val</span> oos = ObjectOutputStream(baos)</span><br><span class="line">        <span class="comment">//将Data对象写入对象输出流</span></span><br><span class="line">        oos.writeObject(clipData)</span><br><span class="line">        <span class="comment">//将字节流进行Base64编码</span></span><br><span class="line">        base64Str = android.util.Base64.encodeToString(baos.toByteArray(),android.util.Base64.DEFAULT)</span><br><span class="line">        oos.close()</span><br><span class="line">    }<span class="keyword">catch</span> (e:java.lang.Exception){</span><br><span class="line">        e.printStackTrace()</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//获取存储文本数据的剪贴板数据对象（ClipData）</span></span><br><span class="line">    <span class="keyword">val</span> clipDate = ClipData.newPlainText(<span class="string">"data"</span>,base64Str)</span><br><span class="line">    <span class="comment">//设置主剪贴板</span></span><br><span class="line">    clipboard.setPrimaryClip(clipDate)</span><br><span class="line">    <span class="comment">//显示MyActivity3窗口</span></span><br><span class="line">    startActivity(intent3)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​        在MyActivity2窗口类的onCreate方法中会从剪贴板中获取Base64编码字符串，并将该编码字符串还原为Data对象：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> Activity2Binding.<span class="title">initBinding</span><span class="params">()</span></span> {</span><br><span class="line">    <span class="comment">//获取剪贴板对象（ClipboardManager）</span></span><br><span class="line">    <span class="keyword">val</span> clipboard = getSystemService(Context.CLIPBOARD_SERVICE) <span class="keyword">as</span> ClipboardManager</span><br><span class="line">    <span class="comment">//从剪贴板中获取Base64编码字符串</span></span><br><span class="line">    <span class="keyword">val</span> base64Str = clipboard.primaryClip!!.getItemAt(<span class="number">0</span>).text.toString()</span><br><span class="line">    <span class="comment">//将Base64编码字符串解码成字节数组</span></span><br><span class="line">    <span class="keyword">val</span> buff:ByteArray = Base64.decode(base64Str,Base64.DEFAULT)</span><br><span class="line">    <span class="keyword">val</span> bais = ByteArrayInputStream(buff)</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">val</span> ois = ObjectInputStream(bais)</span><br><span class="line">        <span class="comment">//将字节流还原成Data对象</span></span><br><span class="line">        <span class="keyword">val</span> <span class="keyword">data</span> = ois.readObject() <span class="keyword">as</span> Data</span><br><span class="line">        <span class="comment">//将Base64编码原文和Data对象的字段值显示在TextView控件中</span></span><br><span class="line">        mBinding.textView.text = <span class="string">"<span class="variable">$base64Str</span>  data.id:<span class="subst">${data.id}</span>  data.name:<span class="subst">${data.name}</span>"</span></span><br><span class="line">    } <span class="keyword">catch</span> (e:Exception){}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="获取系统管理对象"><a href="#获取系统管理对象" class="headerlink" title="获取系统管理对象"></a>获取系统管理对象</h5><p>​        在Context类中定义了若干个常量，分别对应系统的不同管理对象，例如，Context.ACCOUNT_SERVICE（账户管理对象）、Context.ACTIVITY_SERVICE（窗口管理对象）、Context.AUDIO_SERVICE（音频管理对象）等。下面是获得这3个管理对象的代码，在后面的章节中会逐渐使用到这些以及更多的管理对象。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取账户管理对象</span></span><br><span class="line">AccountManager accountManager = (AccountManager)getSystemService(Context.ACCOUNT_SERVICE);</span><br><span class="line"><span class="comment">//　获取窗口管理对象</span></span><br><span class="line">ActivityManager activityManager = (ActivityManager)getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class="line"><span class="comment">//获取音频管理对象</span></span><br><span class="line">AudioManager audioManager = (AudioManager)getSystemService(Context.AUDIO_SERVICE);</span><br></pre></td></tr></tbody></table></figure><h4 id="使用全局对象传递数据"><a href="#使用全局对象传递数据" class="headerlink" title="使用全局对象传递数据"></a>使用全局对象传递数据</h4><p>​        虽然使用静态变量可以传递任意类型的数据，但官方并不建议这样做。</p><p>​        全局对象这种方式可完全取代静态变量。</p><p>​        Android中的全局对象类似于Java Web中的这个Application域，除非将Android应用程序彻底清除出内存，否则全局对象将一直可以访问。</p><p>​        全局对象所对应的类必须从android.app.Application继承。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAPP</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String country;</span><br><span class="line">    <span class="keyword">public</span> Data data;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>注意:</strong></p><p>​        全局类中不需要定义静态变量，只需要定义普通成员变量即可，但全局类中必须要有一个无参数的构造方法，或不编写构造方法（系统会自动建立一个无参数的构造方法）。全局类和窗口类是一样的，由系统使用全局类自动创建全局对象，因此，全局类必须要有一个无参数的构造方法。</p><p>​        在编写完全局类后，还需要通过＜application＞标签的android:name属性指定全局类名，否则系统是不会自动创建全局对象的。</p><p>​        无论读写全局对象，都必须先获取全局对象，通过Activity.<strong>getApplicationContext</strong>方法可以很容易地在程序的任何位置获取全局对象.</p><p>首先获得了MyApp对象，然后为MyApp对象中的字段赋值:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//　获取MyApp对象</span></span><br><span class="line">MyApp myApp = (MyApp) getApplicationContext();</span><br><span class="line">myApp.country = <span class="string">"美国"</span>;</span><br><span class="line">myApp.data.id = <span class="number">1234</span>;</span><br><span class="line">myApp.data.name = <span class="string">"飞碟"</span>;</span><br><span class="line">intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyActivity4<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></tbody></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>​        对于向其他窗口传递简单类型（int、String、short、Boolean等）或可序列化的对象时，建议使用Intent对象进行数据传递。如果传递不可序列化的对象，可以采用静态变量或全局对象的方式，不过按照官方的建议，最好采用全局对象的方式。另外，如果想使某些数据长时间驻留内存，以便程序随时取用，最好采用全局对象的形式，当然，如果数据不复杂，也可以采用静态变量。至于剪贴板，如果不是非常特殊的情况，并不建议使用。因为这可能会影响到其他的程序（因为其他的程序可能会使用到剪贴板）。</p><h3 id="从Activity返回数据"><a href="#从Activity返回数据" class="headerlink" title="从Activity返回数据"></a>从Activity返回数据</h3><p>​        采用Intent对象的方式来返回数据。使用这种方式返回数据，需要使用startActivityForResult方法来显示Activity，代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyActivity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">startActivityForResult(intent, <span class="number">1</span>);</span><br></pre></td></tr></tbody></table></figure><p>​        其中startActivityForResult方法的第2个参数是一个int类型的请求码，可以是任意的整数，只是为了区分请求的来源，以便处理返回结果。</p><p>MyActivity向上一个acitvity返回数据:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//　metEditText是从布局文件创建的EditText对象</span></span><br><span class="line">String value = metEditText.getText().toString();</span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">intent.putExtra(<span class="string">"value"</span>, value);</span><br><span class="line"><span class="comment">//　通过Intent对象返回结果，setResult方法的第1个参数是一个响应码，与请求码类似</span></span><br><span class="line">setResult(<span class="number">2</span>, intent);</span><br><span class="line"><span class="comment">//　关闭当前的Activity,返回上一个Activity</span></span><br><span class="line">finish();</span><br></pre></td></tr></tbody></table></figure><p>在显示MyActivity的ResultActivity类中实现onActivityResult方法来处理返回的结果，代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Overrideprotected</span> </span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span></span>{</span><br><span class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">    　<span class="keyword">switch</span> (requestCode){</span><br><span class="line">         <span class="keyword">case</span> <span class="number">1</span>:　<span class="comment">//　请求码</span></span><br><span class="line">             <span class="keyword">switch</span> (resultCode){</span><br><span class="line">                  <span class="keyword">case</span> <span class="number">2</span>:　　<span class="comment">//　响应码</span></span><br><span class="line">                     setTitle(data.getStringExtra(<span class="string">"value"</span>));　　<span class="comment">//　将返回值作为标题来设置</span></span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">                  <span class="keyword">default</span>:</span><br><span class="line">                     <span class="keyword">break</span>;</span><br><span class="line">             }</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">default</span>:</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">     }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="视图（View）"><a href="#视图（View）" class="headerlink" title="视图（View）"></a>视图（View）</h3><h4 id="视图简介"><a href="#视图简介" class="headerlink" title="视图简介"></a>视图简介</h4><p>​        Android SDK中的视图类可分为3种：布局（Layout）类、视图容器（View Container）类和视图类（例如，TextView就是一个直接继承于View类的视图类）。这3种类都是android.view.View的子类。</p><p><img src="/2022/12/19/%E7%AA%97%E5%8F%A3%EF%BC%88Activity%EF%BC%89%E4%B8%8E%E8%A7%86%E5%9B%BE%EF%BC%88View%EF%BC%89/2.png" alt=""></p><h4 id="在代码中控制视图"><a href="#在代码中控制视图" class="headerlink" title="在代码中控制视图"></a>在代码中控制视图</h4><p>动态添加视图:</p><ol><li>获得当前的容器视图对象。</li><li>获得或创建待添加的视图对象。</li><li>将相应的视图对象添加到容器视图中。</li></ol><p>假设有两个XML布局文件：test1.xml和test2.xml。将test2.xml添加到test1.xml的LinearLayout对象中:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//　获得test1.xml中的LinearLayout对象</span></span><br><span class="line">LinearLayout textLinearLayout1 = (LinearLayout)getLayoutInflater().inflate(R.layout. test1, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//将test1.xml中的LinearLayout对象设为当前容器视图</span></span><br><span class="line">setContentView(testLinearLayout1);</span><br><span class="line"><span class="comment">//获得test2.xml中的LinearLayout对象，并将该对象添加到test1.xml的LinearLayout对象中</span></span><br><span class="line"><span class="comment">//getLayoutInflater方法可以获取LayoutInflater对象，通常该对象用来装载独立的XML布局文件</span></span><br><span class="line">LinearLayout testLinearLayout2 = (LinearLayout)getLayoutInflater().inflate(R.layout. test2, testLinearLayout1);</span><br></pre></td></tr></tbody></table></figure><p>​        其中inflate方法的第1个参数表示XML布局资源文件的ID，第2个参数表示获得容器视图对象后，要将该对象添加到哪个容器视图对象中，在这里是testLinearLayout1对象。如果不想将获得的容器视图对象添加到任何其他的容器中，inflate方法的第2个参数值为null。</p><p>也可以使用addView方法向容器视图中添加视图对象，但要将inflate方法的第2个参数值设为null:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得test1.xml中的LinearLayout对象</span></span><br><span class="line">LinearLayout textLinearLayout1 = (LinearLayout)getLayoutInflater().inflate(R.layout. test1, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//将test1.xml中的LinearLayout对象设为当前容器视图</span></span><br><span class="line">setContentView(testLinearLayout1);</span><br><span class="line"><span class="comment">//获得test2.xml中的LinearLayout对象，并将该对象添加到test1.xml的LinearLayout对象中</span></span><br><span class="line">LinearLayout testLinearLayout2 = (LinearLayout)getLayoutInflater().inflate(R.layout. test2, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//将testLinearLayout2添加到testLinearLayout1中</span></span><br><span class="line">testLinearLayout1.addView(testLinearLayout2);</span><br></pre></td></tr></tbody></table></figure><p>还可以完全使用Java代码创建一个视图对象，并将该对象添加到容器视图中:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EditText editText = <span class="keyword">new</span> EditText(<span class="keyword">this</span>);</span><br><span class="line">testLinearLayout1.addView(editText);</span><br></pre></td></tr></tbody></table></figure><h3 id="显示系统窗口"><a href="#显示系统窗口" class="headerlink" title="显示系统窗口"></a>显示系统窗口</h3><p>​        任何一个窗口都可以与一个字符串绑定，这些字符串被称为Activity Action，也可以简称为Action。系统中的任何程序都可以通过这个字符串找到在任何程序中的任何窗口，而且系统中的很多可以调用的窗口都定义了相应的常量。这些常量大多在Intent类中定义，例如，Intent.ACTION_CALL对应于电话拨号窗口。如果系统中有多个窗口与同一个Action绑定，会首先显示一个选择菜单，由用户选择显示哪个窗口。</p><h4 id="直接拨号"><a href="#直接拨号" class="headerlink" title="直接拨号"></a>直接拨号</h4><p>拨号功能对应的Action是Intent.ACTION_CALL，使用这个Action必须要指定一个Uri</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent callIntent = <span class="keyword">new</span> Intent(Intent.ACTION_CALL,Uri.parse(<span class="string">"tel:12345678"</span>));</span><br><span class="line">startActivity(callIntent);</span><br></pre></td></tr></tbody></table></figure><h4 id="将电话号传入拨号程序"><a href="#将电话号传入拨号程序" class="headerlink" title="将电话号传入拨号程序"></a>将电话号传入拨号程序</h4><p>​        想将电话号自动传入Android内置的拨号程序，然后再做进一步的处理，需要使用Intent.ACTION_DIAL，该Action也需要一个“tel:电话号”格式的Uri</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent dialIntent = <span class="keyword">new</span> Intent(Intent.ACTION_DIAL,Uri.parse(<span class="string">"tel:87654321"</span>));</span><br><span class="line">startActivity(dialIntent);</span><br></pre></td></tr></tbody></table></figure><h4 id="调用拨号程序"><a href="#调用拨号程序" class="headerlink" title="调用拨号程序"></a>调用拨号程序</h4><p>如果不想将电话号传入拨号程序，而只想显示拨号窗口:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示拨号窗口只需要指定Intent类构造方法的第1个参数，并不需要指定任何的Uri</span></span><br><span class="line">Intent touchDialerIntent = <span class="keyword">new</span> Intent(<span class="string">"com.android.phone.action.TOUCH_DIALER"</span>);</span><br><span class="line">startActivity(touchDialerIntent);</span><br></pre></td></tr></tbody></table></figure><h4 id="浏览网页"><a href="#浏览网页" class="headerlink" title="浏览网页"></a>浏览网页</h4><p>​        Android SDK内置的Web浏览器也对外提供了Action，可以通过这个Action来传递一个Web网址，并通过Web浏览器来打开这个Web网址:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent webIntent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW,Uri.parse(<span class="string">"http://blog.csdn.net/nokiaguy"</span>));</span><br><span class="line">startActivity(webIntent);</span><br></pre></td></tr></tbody></table></figure><h4 id="查看联系人"><a href="#查看联系人" class="headerlink" title="查看联系人"></a>查看联系人</h4><p>查看联系人的Action是“com.android.contacts.action.LIST_CONTACTS”</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent contactListIntent = <span class="keyword">new</span> Intent(<span class="string">"com.android.contacts.action.LIST_CONTACTS"</span>);</span><br><span class="line">startActivity(contactListIntent);</span><br></pre></td></tr></tbody></table></figure><h4 id="显示系统设置界面（设置主界面、Wi-Fi设置界面）"><a href="#显示系统设置界面（设置主界面、Wi-Fi设置界面）" class="headerlink" title="显示系统设置界面（设置主界面、Wi-Fi设置界面）"></a>显示系统设置界面（设置主界面、Wi-Fi设置界面）</h4><p>​        显示系统设置主界面的Action是“android.settings. SETTINGS”:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent settingsIntent = <span class="keyword">new</span> Intent(<span class="string">"android.settings.SETTINGS"</span>);</span><br><span class="line">startActivity(settingsIntent);</span><br></pre></td></tr></tbody></table></figure><p>​        显示Wi-Fi设置界面的Action是“android.settings.WIFI_ SETTINGS”:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent wifiSettingsIntent = <span class="keyword">new</span> Intent(<span class="string">"android.settings.WIFI_SETTINGS"</span>);</span><br><span class="line">startActivity(wifiSettingsIntent);</span><br></pre></td></tr></tbody></table></figure><h4 id="启动处理音频的程序"><a href="#启动处理音频的程序" class="headerlink" title="启动处理音频的程序"></a>启动处理音频的程序</h4><p>​        通过Intent.ACTION_GET_CONTENT动作来选择拥有相同类型的应用，如下面的代码会显示一个包含所有处理音频的程序列表:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent audioIntent = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</span><br><span class="line">audioIntent.setType(<span class="string">"audio/ *"</span>);</span><br><span class="line">startActivity(Intent.createChooser(audioIntent, <span class="string">"选择音频程序"</span>));</span><br></pre></td></tr></tbody></table></figure><h4 id="回到Home窗口（相当于按Home键）"><a href="#回到Home窗口（相当于按Home键）" class="headerlink" title="回到Home窗口（相当于按Home键）"></a>回到Home窗口（相当于按Home键）</h4><p>其实整个桌面程序（包括Home主界面、程序列表、动态壁纸等）是Android系统启动后运行的第一个程序（程序名称为Launcher2），而在Launcher2中的Home窗口恰巧有如下一个Action。</p><p><strong>android.intent.action.MAIN</strong></p><p>Category是另外一类与窗口绑定的字符串。与Action共同定位某一个或某一组窗口</p><p>与Home窗口绑定的Category是android.intent.category.HOME。所以回到主界面的代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent gohomeIntent = <span class="keyword">new</span> Intent(<span class="string">"android.intent.action.MAIN"</span>);</span><br><span class="line">gohomeIntent.addCategory(<span class="string">"android.intent.category.HOME"</span>);</span><br><span class="line">startActivity(gohomeIntent);</span><br></pre></td></tr></tbody></table></figure><h3 id="与Activity相关的技巧与特效"><a href="#与Activity相关的技巧与特效" class="headerlink" title="与Activity相关的技巧与特效"></a>与Activity相关的技巧与特效</h3><h4 id="全屏显示（隐藏标题栏和状态栏）"><a href="#全屏显示（隐藏标题栏和状态栏）" class="headerlink" title="全屏显示（隐藏标题栏和状态栏）"></a>全屏显示（隐藏标题栏和状态栏）</h4><p>​        全屏需要隐藏两部分内容：标题栏和状态栏。</p><p>​        其中标题栏是属于窗口的一部分，而状态栏是属于Android系统的一部分，通常会在状态栏中显示各种通知信息以及网络、电池等硬件状态、当前时间等信息。</p><p>​        1.在Activity.onCreate方法中通过requestWindowFeature和setFlags方法隐藏标题栏和状态栏：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FullScreenActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span></span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">//隐藏窗口标题栏,requestWindowFeature方法必须在setContentView方法之前调用。</span></span><br><span class="line">        requestWindowFeature(Window.FEATURE_NO_TITLE);</span><br><span class="line">        setContentView(R.layout.activity_full_screen);</span><br><span class="line">        <span class="comment">//　隐藏系统状态栏,setFlags方法只是控制系统的UI，所以该方法可以在代码的任何位置调用。</span></span><br><span class="line">        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,　　　　　　　　WindowManager.LayoutParams.FLAG_FULLSCREEN);</span><br><span class="line">    }</span><br><span class="line">        </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​        除了使用Java代码隐藏窗口标题栏和系统状态栏外，还可以在AndroidManifest.xml文件中声明窗口时就设置窗口为全屏状态，或单独隐藏标题栏和状态栏。</p><p>​        如果只想隐藏窗口标题栏，可以使用Theme.NoTitleBar主题，如果想连系统状态栏一起隐藏，可以使用Theme.NoTitleBar.Fullscreen主题（系统未提供只隐藏系统状态栏的主题）。</p><p>只隐藏窗口标题栏。</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;activityandroid:theme=<span class="string">"@android:style/Theme.NoTitleBar"</span>　　            android:name=<span class="string">"mobile.android.fullscreen.FullScreenActivity"</span>&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/activity&gt;</span><br></pre></td></tr></tbody></table></figure><p>隐藏窗口标题栏和系统状态栏（全屏状态）。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:theme</span>=<span class="string">"@android:style/Theme.NoTitleBar.Fullscreen"</span>　　<span class="attr">android:name</span>=<span class="string">"mobile.android.fullscreen.FullScreenActivity"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>自定义主题。例如，可以在res/values目录建立一个styles.xml文件:</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"Theme.FullScreen"</span> <span class="attr">parent</span>=<span class="string">"android:Theme"</span>&gt;</span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--　隐藏标题栏　--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--　隐藏状态栏　--&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowFullscreen"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>使用下面的形式设置＜activity＞标签的android:theme属性:</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:theme</span>=<span class="string">"@style/Theme.FullScreen"</span>　　    <span class="attr">android:name</span>=<span class="string">"mobile.android.fullscreen.FullScreenActivity"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>setContentView方法不仅将根视图与窗口绑定，而且还根据某些特性设置了标题栏的各种状态</p><h4 id="定制窗口标题栏"><a href="#定制窗口标题栏" class="headerlink" title="定制窗口标题栏"></a>定制窗口标题栏</h4><h5 id="直接修改标题栏上的控件"><a href="#直接修改标题栏上的控件" class="headerlink" title="直接修改标题栏上的控件"></a>直接修改标题栏上的控件</h5><p>​        <strong>Window.getDecorView方法可以获取窗口最顶层的视图对象</strong>，标题布局和窗口中控件的布局都在该视图中，所以理论上通过控件的ID就可以获取相应的视图对象（类型强行转换后就可以变成相应控件类的对象），不过对于显示标题文本的TextView控件的ID我们并不知道，就算知道了也不建议使用，因为这是Android内部使用的常量，很有可能不同Android版本的ID不一样，所以需要使用其他方法来获取该TextView控件。</p><h4 id="改变窗口大小、位置和透明度"><a href="#改变窗口大小、位置和透明度" class="headerlink" title="改变窗口大小、位置和透明度"></a>改变窗口大小、位置和透明度</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class ChangeActivity : BaseActivity&lt;ActivityChangeBinding&gt;(),OnSeekBarChangeListener {</span><br><span class="line"></span><br><span class="line">    override fun ActivityChangeBinding.initBinding() {</span><br><span class="line">        <span class="comment">//获取用于设置窗口属性的LayoutParams的对象</span></span><br><span class="line">        val layoutParams = window.attributes</span><br><span class="line">        layoutParams.height = <span class="number">200</span></span><br><span class="line">        layoutParams.width = <span class="number">300</span></span><br><span class="line">        layoutParams.y = <span class="number">50</span></span><br><span class="line">        <span class="comment">//设置窗口垂直位置时必须设置Gravity.TOP或Gravity.BOTTOM</span></span><br><span class="line">        layoutParams.gravity = Gravity.TOP</span><br><span class="line">        <span class="comment">//设置窗口属性</span></span><br><span class="line">        window.attributes = layoutParams</span><br><span class="line">        mBinding.seekBar.setOnSeekBarChangeListener(<span class="keyword">this</span><span class="meta">@ChangeActivity</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">onProgressChanged</span><span class="params">(seekBar: SeekBar?, progress: Int, fromUser: Boolean)</span> </span>{</span><br><span class="line">        val layoutParams = window.attributes</span><br><span class="line">        Log.d(<span class="string">"TAG"</span>,<span class="string">"$progress"</span>)</span><br><span class="line">        <span class="comment">//设置窗口的透明度。alpha为0表示窗口完全透明，为1表示窗口不透明</span></span><br><span class="line">        layoutParams.alpha = (progress/<span class="number">100</span>).toFloat()</span><br><span class="line">        window.attributes = layoutParams</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">onStartTrackingTouch</span><span class="params">(seekBar: SeekBar?)</span> </span>{}</span><br><span class="line">    <span class="function">override fun <span class="title">onStopTrackingTouch</span><span class="params">(seekBar: SeekBar?)</span> </span>{}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​        LayoutParams.y会根据LayoutParams.gravity的值来确定具体的含义，如果LayoutParams.gravity的值是Gravity.TOP，LayoutParams.y表示窗口顶边到顶端的距离；如果为Gravity.BOTTOM，LayoutParams.y表示窗口底边到底端的距离。</p><p>通过主题设置窗口透明度:</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"Transparent"</span> <span class="attr">parent</span>=<span class="string">"Theme.ShowDateTime"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@android:drawable/toast_frame<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--   设置窗口是透明的     --&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowIsTranslucent"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:name</span>=<span class="string">".ChangeActivity"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:theme</span>=<span class="string">"@style/Transparent"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:exported</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:name</span>=<span class="string">"android.app.lib_name"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:value</span>=<span class="string">""</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="按两次关闭窗口"><a href="#按两次关闭窗口" class="headerlink" title="按两次关闭窗口"></a>按两次关闭窗口</h4><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangeActivity</span> : <span class="type">BaseActivity</span>&lt;<span class="type">ActivityChangeBinding</span>&gt;</span>(),OnSeekBarChangeListener {</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按Back键关闭窗口的计数，本例要求按两次关闭窗口，所以只有count=2时才关闭窗口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> count = <span class="number">1</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">finish</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">2</span>){</span><br><span class="line">            <span class="keyword">super</span>.finish()</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span><span class="symbol">@ChangeActivity</span>,<span class="string">"再按一次退出"</span>,Toast.LENGTH_SHORT).show()</span><br><span class="line">            count ++</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="窗口截屏"><a href="#窗口截屏" class="headerlink" title="窗口截屏"></a>窗口截屏</h4><p><a href="https://blog.csdn.net/m0_56144365/article/details/124803826" target="_blank" rel="noopener">窗口截屏</a></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h3 id=&quot;声明和使用Activity&quot;&gt;&lt;a href=&quot;#声明和使用Activity&quot; class=&quot;headerlink&quot; title=&quot;声明和使用Activity&quot;&gt;&lt;/a&gt;声明和使用Activity&lt;/h3&gt;&lt;h4 id=&quot;Activity的基本用法&quot;&gt;&lt;a href=&quot;#Activity的基本用法&quot; class=&quot;headerlink&quot; title=&quot;Activity的基本用法&quot;&gt;&lt;/a&gt;Activity的基本用法&lt;/h4&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;activity&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;.MainActivity&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;android:exported&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;android:label&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@string/title_activity_datetime&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;intent-filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.intent.action.MAIN&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.intent.category.LAUNCHER&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;intent-filter&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta-data&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;               &lt;span class=&quot;attr&quot;&gt;android:name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;android.app.lib_name&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;               &lt;span class=&quot;attr&quot;&gt;android:value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;activity&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​        Action和Category分别是android.intent.action.MAIN和android.intent.category.LAUNCHER,这是系统用于调用第一个显示的Activity的Action和Category。这个Action和Category可以在多个Activity中使用，如果在一个应用程序中声明了多个使用该Action和Category的窗口，系统会在程序列表中生成多个程序图标，每个图标对应某一个使用android.intent.action.MAIN和android.intent.category.LAUNCHER的窗口。当单击某个图标后就会显示与其对应的窗口。程序启动时还是显示第一个使用android.intent.action.MAIN和android.intent.category.LAUNCHER的窗口。&lt;/p&gt;
&lt;h4 id=&quot;Activity的生命周期&quot;&gt;&lt;a href=&quot;#Activity的生命周期&quot; class=&quot;headerlink&quot; title=&quot;Activity的生命周期&quot;&gt;&lt;/a&gt;Activity的生命周期&lt;/h4&gt;&lt;p&gt;7个生命周期方法的定义如下：&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
    
      <category term="Android权威指南2" scheme="https://hluck.github.io/tags/Android%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%972/"/>
    
  </entry>
  
  <entry>
    <title>Android应用程序架构</title>
    <link href="https://hluck.github.io/2022/12/19/Android%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%9E%B6%E6%9E%84/"/>
    <id>https://hluck.github.io/2022/12/19/Android%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%9E%B6%E6%9E%84/</id>
    <published>2022-12-19T03:01:05.963Z</published>
    <updated>2022-12-28T14:04:48.408Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h3 id="Android应用程序中的资源"><a href="#Android应用程序中的资源" class="headerlink" title="Android应用程序中的资源"></a>Android应用程序中的资源</h3><h4 id="资源存放在哪里"><a href="#资源存放在哪里" class="headerlink" title="资源存放在哪里"></a>资源存放在哪里</h4><p>​        在Android工程中有一个res目录。在该目录下有若干个子目录，例如，drawable-hdpi、layout、menu、values等，这些子目录有很多都是本地化的资源目录，也就是说这些资源目录中的资源只有Android应用程序运行在特定的环境中才会使用。例如，drawable-hdpi用于存放图像资源，该资源目录仅针对高密度的屏幕才会使用。而真正的资源目录是前面的drawable。如果不考虑本地化，可以直接在res目录中建立一个drawable目录。该目录的图像资源在其他本地化图像资源目录中没有符合要求的图像资源的情况下会使用res/drawable目录中的图像资源。</p><p>​        Android系统会首先考虑某一类型的资源是否有本地化资源目录，并且本地化资源目录中是否有符合要求的资源，然后才会考虑默认的资源目录。也就是说系统会首先确认当前屏幕密度是否为高密度，如果是高密度屏幕，会首先到values-hdpi目录寻找资源文件，如果未找到，才会到values目录中继续寻找</p><h4 id="资源的基本使用方法"><a href="#资源的基本使用方法" class="headerlink" title="资源的基本使用方法"></a>资源的基本使用方法</h4><p>​        在编译Android应用程序的同时，系统会使用一个资源文件编译程序（aapt）对这些资源文件进行编译。这些资源主要包括图像资源（/res/drawable）、动画资源（res/anim）、布局资源（res/layout）、菜单资源（res/menu）等。Android会为每一种资源在R类中生成一个唯一的ID，这个ID是int类型的变量。</p><p>R源文件：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mobile.android.show.datetime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">R</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">attr</span> </span>{</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">drawable</span> </span>{</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ic_action_search=<span class="number">0x7f020000</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ic_launcher=<span class="number">0x7f020001</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">id</span> </span>{</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> btnShowDate=<span class="number">0x7f070000</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> btnShowTime=<span class="number">0x7f070001</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> menu_settings=<span class="number">0x7f070002</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">layout</span> </span>{</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> activity_datetime=<span class="number">0x7f030000</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">menu</span> </span>{</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> activity_datetime=<span class="number">0x7f060000</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">string</span> </span>{</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> app_name=<span class="number">0x7f040000</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> hello_world=<span class="number">0x7f040001</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> menu_settings=<span class="number">0x7f040002</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> title_activity_datetime=<span class="number">0x7f040003</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">style</span> </span>{</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AppTheme=<span class="number">0x7f050000</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>​        ADT为res目录中每一个子目录或标签（例如，res/values/strings.xml中的＜string＞标签）都生成了一个静态的子类，不仅如此，还为XML布局文件中的每一个指定id属性的控件生成了唯一的ID，并封装在id子类中。这就意味着在Android应用程序中可以通过ID使用这些控件。</p><p>​        Android SDK中的很多方法都支持直接使用ID值来引用资源，例如，android.app.Activity.setTitle方法除了支持以字符串形式设置Activity的标题外，还支持以字符串资源ID的形式设置Activity的标签。例如，下面的代码使用字符串资源重新设置了Activity的标题。</p><p><strong>setTitle(R.string.hello);</strong></p><h3 id="Android的应用程序组件"><a href="#Android的应用程序组件" class="headerlink" title="Android的应用程序组件"></a>Android的应用程序组件</h3><p>​        在Android程序中没有Main函数，取而代之的是一系列的组件，这些组件都可以单独实例化。应用程序向外共享功能一般也是通过这4种应用程序组件实现的。</p><h4 id="窗口（Activity）组件"><a href="#窗口（Activity）组件" class="headerlink" title="窗口（Activity）组件"></a>窗口（Activity）组件</h4><p>​        onCreate对Activity进行初始化。通过setContentView方法可以将Activity与View绑定，setContentView方法的参数一般为XML布局文件的资源ID。实际上，<strong>Activity上并不能自己放控件，而必须将控件放到与Activity绑定的View上。</strong></p><h4 id="服务（Service）组件"><a href="#服务（Service）组件" class="headerlink" title="服务（Service）组件"></a>服务（Service）组件</h4><p>​        服务没有可视化接口，但可以在后台运行。每一个服务类必须继承自android.app.Service类。</p><p>​        其他的程序还可以与服务进行通信。当与服务连接成功后，就可以利用服务中共享出来的接口与服务进行通信了。</p><h4 id="广播接收者（Broadcast-receivers）组件"><a href="#广播接收者（Broadcast-receivers）组件" class="headerlink" title="广播接收者（Broadcast receivers）组件"></a>广播接收者（Broadcast receivers）组件</h4><p>​        广播接收者组件的唯一功能就是接收广播消息。</p><p>​        有很多时候，广播消息是由系统发出的，例如，时区的变化、电池的电量不足、收到短信等。除此之外，应用程序还可以发送自定义广播消息，例如，通知其他的程序数据已经下载完毕，并且这些数据已经可以使用了。</p><p>​        所有的广播接收者类必须继承自android.content. BroadcastReceiver类。</p><p>​        广播接收者与服务一样，都没有用户接口，但在广播接收者中可以启动一个Activity来响应广播消息。</p><h4 id="内容提供者（Content-Provider）组件"><a href="#内容提供者（Content-Provider）组件" class="headerlink" title="内容提供者（Content Provider）组件"></a>内容提供者（Content Provider）组件</h4><p>​        内容提供者可以为其他应用程序提供数据，这些数据可以保存在文件系统中，例如，SQLite数据库或任何其他格式的文件。每一个内容提供者是一个类，这些类都需要从android.content. ContentProvider类继承。</p><p>​        在ContentProvider类中定义了一系列的方法，通过这些方法可以使其他的应用程序获得和存储内容提供者所支持的数据。但在应用程序中不能直接调用这些方法，而需要通过android.content.ContentResolver类的方法来调用内容提供者类中提供的方法。</p><h3 id="AndroidManifest-xml文件的结构"><a href="#AndroidManifest-xml文件的结构" class="headerlink" title="AndroidManifest.xml文件的结构"></a>AndroidManifest.xml文件的结构</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">permission</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">permission-tree</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">instrumentation</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-configuration</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-feature</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">supports-screens</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">compatible-screens</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">supports-gl-texture</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">action</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">data</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta-data</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity-alias</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta-data</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">service</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta-data</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">receiver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta-data</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">provider</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta-data</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">use-library</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h3 id=&quot;Android应用程序中的资源&quot;&gt;&lt;a href=&quot;#Android应用程序中的资源&quot; class=&quot;headerlink&quot; title=&quot;Android应用程序中的资源&quot;&gt;&lt;/a&gt;Android应用程序中的资源&lt;/h3&gt;&lt;h4 id=&quot;资源存放在哪里&quot;&gt;&lt;a href=&quot;#资源存放在哪里&quot; class=&quot;headerlink&quot; title=&quot;资源存放在哪里&quot;&gt;&lt;/a&gt;资源存放在哪里&lt;/h4&gt;&lt;p&gt;​        在Android工程中有一个res目录。在该目录下有若干个子目录，例如，drawable-hdpi、layout、menu、values等，这些子目录有很多都是本地化的资源目录，也就是说这些资源目录中的资源只有Android应用程序运行在特定的环境中才会使用。例如，drawable-hdpi用于存放图像资源，该资源目录仅针对高密度的屏幕才会使用。而真正的资源目录是前面的drawable。如果不考虑本地化，可以直接在res目录中建立一个drawable目录。该目录的图像资源在其他本地化图像资源目录中没有符合要求的图像资源的情况下会使用res/drawable目录中的图像资源。&lt;/p&gt;
&lt;p&gt;​        Android系统会首先考虑某一类型的资源是否有本地化资源目录，并且本地化资源目录中是否有符合要求的资源，然后才会考虑默认的资源目录。也就是说系统会首先确认当前屏幕密度是否为高密度，如果是高密度屏幕，会首先到values-hdpi目录寻找资源文件，如果未找到，才会到values目录中继续寻找&lt;/p&gt;
&lt;h4 id=&quot;资源的基本使用方法&quot;&gt;&lt;a href=&quot;#资源的基本使用方法&quot; class=&quot;headerlink&quot; title=&quot;资源的基本使用方法&quot;&gt;&lt;/a&gt;资源的基本使用方法&lt;/h4&gt;&lt;p&gt;​        在编译Android应用程序的同时，系统会使用一个资源文件编译程序（aapt）对这些资源文件进行编译。这些资源主要包括图像资源（/res/drawable）、动画资源（res/anim）、布局资源（res/layout）、菜单资源（res/menu）等。Android会为每一种资源在R类中生成一个唯一的ID，这个ID是int类型的变量。&lt;/p&gt;
&lt;p&gt;R源文件：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; mobile.android.show.datetime;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;R&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;attr&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;drawable&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ic_action_search=&lt;span class=&quot;number&quot;&gt;0x7f020000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ic_launcher=&lt;span class=&quot;number&quot;&gt;0x7f020001&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;id&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; btnShowDate=&lt;span class=&quot;number&quot;&gt;0x7f070000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; btnShowTime=&lt;span class=&quot;number&quot;&gt;0x7f070001&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; menu_settings=&lt;span class=&quot;number&quot;&gt;0x7f070002&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;layout&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; activity_datetime=&lt;span class=&quot;number&quot;&gt;0x7f030000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;menu&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; activity_datetime=&lt;span class=&quot;number&quot;&gt;0x7f060000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;string&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; app_name=&lt;span class=&quot;number&quot;&gt;0x7f040000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; hello_world=&lt;span class=&quot;number&quot;&gt;0x7f040001&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; menu_settings=&lt;span class=&quot;number&quot;&gt;0x7f040002&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; title_activity_datetime=&lt;span class=&quot;number&quot;&gt;0x7f040003&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;style&lt;/span&gt; &lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; AppTheme=&lt;span class=&quot;number&quot;&gt;0x7f050000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
    
      <category term="Android权威指南2" scheme="https://hluck.github.io/tags/Android%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%972/"/>
    
  </entry>
  
  <entry>
    <title>第一个应用程序</title>
    <link href="https://hluck.github.io/2022/12/19/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
    <id>https://hluck.github.io/2022/12/19/%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</id>
    <published>2022-12-19T02:43:44.324Z</published>
    <updated>2022-12-28T14:02:48.483Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p><a href="https://www.androidos.net.cn/sourcecode" target="_blank" rel="noopener">Android系统源码查看</a></p><h2 id="Android应用程序的编译过程"><a href="#Android应用程序的编译过程" class="headerlink" title="Android应用程序的编译过程"></a>Android应用程序的编译过程</h2><p>​        <strong>Android应用程序（APK文件）并不是基于传统的JVM的，而是基于Dalivk虚拟机的。</strong> 什么是android DVM:Dalvik是Google公司自己设计用于Android平台的Java虚拟机,每一个Dalvik 应用作为一个独立的Linux 进程执行。</p><p>​        其中JVM是Sun公司开发的（现在属于Oracle公司）基于堆栈的Java虚拟机，后者是Google公司开发的基于寄存器的Java虚拟机。在这两种虚拟机上运行的Java程序的语法相同，但二进制并不兼容。也就是说JVM的.class文件并不能在Dalivk虚拟机上直接运行，而Dalivk虚拟机格式的执行文件（.apk）也不能直接在JVM上运行。</p><p>编译Android应用程序需要如下的4步</p><ol><li>Android Resource Manager：<strong>根据res目录中的资源在R类中生成相应的子类和变量</strong>。</li><li>Android Pref Compiler：<strong>编译res目录中的资源</strong></li><li>Java Builder：<strong>将Java源代码编译成.class文件。</strong></li><li>Android Package Builder：<strong>将.class文件编译成Dalivk虚拟机格式的文件（classes.dex），然后将classes.dex和其他文件一起打包成apk文件</strong>。</li></ol><p>​        ADT（Android开发工具）首先处理了Android工程中的资源，然后将Java代码编译成JVM格式的.class文件。最后再将.class文件转换成Dalivk虚拟机格式的classes.dex文件，并进一步打包成apk文件。而传统的Java程序只会将.java文件编译成.class文件，也就是说只执行了图3-12所示编译步骤的第3步。因此，Android应用程序编译生成最终的apk文件的步骤要比编译传统的Java程序多了3步，这也是为什么编译Android工程会比较慢的主要原因。</p><p>​        任何Android应用程序（apk文件）都必须签名才能使用。</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
    
      <category term="Android权威指南2" scheme="https://hluck.github.io/tags/Android%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%972/"/>
    
  </entry>
  
  <entry>
    <title>Android动画</title>
    <link href="https://hluck.github.io/2022/12/12/Android%E5%8A%A8%E7%94%BB/"/>
    <id>https://hluck.github.io/2022/12/12/Android%E5%8A%A8%E7%94%BB/</id>
    <published>2022-12-12T07:43:41.598Z</published>
    <updated>2022-12-25T11:37:34.841Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>Android的动画分为三大类：<strong>帧动画</strong>、<strong>补间动画</strong>和<strong>属性动画</strong>。</p><h2 id="帧动画"><a href="#帧动画" class="headerlink" title="帧动画"></a>帧动画</h2><p>​        帧动画是实现原理最简单的一种，跟现实生活中的电影胶卷类似，都是在短时间内连续播放多张图片，从而模拟动态画面的效果。</p><h3 id="帧动画的实现"><a href="#帧动画的实现" class="headerlink" title="帧动画的实现"></a>帧动画的实现</h3><h4 id="通过代码实现"><a href="#通过代码实现" class="headerlink" title="通过代码实现"></a>通过代码实现</h4><p>​        帧动画由动画图形<strong>AnimationDrawable</strong>生成。下面是AnimationDrawable的常用方法：</p><ul><li>addFrame：添加一幅图片帧，并指定该帧的持续时间（单位毫秒）。</li><li>setOneShot：设置是否只播放一次。为true表示只播放一次，为false表示循环播放。</li><li>start：开始播放。注意，设置宿主视图后才能进行播放。</li><li>stop：停止播放。</li><li>isRunning：判断是否正在播放。</li></ul><p>​      有了动画图形，还得有一个宿主视图显示该图形，一般使用图像视图ImageView承载AnimationDrawable，即<strong>调用ImageView对象的setImageDrawable方法将动画图形加载到图像视图中</strong>。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码方式显示帧动画</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressLint(<span class="meta-string">"UseCompatLoadingForDrawables"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">showFrameAnimByCode</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="comment">//帧动画需要把每帧图片加入AnimationDrawable队列</span></span><br><span class="line">    animationDrawable.apply {</span><br><span class="line">        <span class="comment">//添加一幅图片帧，并指定该帧的持续时间（单位毫秒）。</span></span><br><span class="line">        addFrame(resources.getDrawable(R.drawable.flow_p1,<span class="keyword">this</span><span class="symbol">@FrameAnimActivity</span>.theme),<span class="number">50</span>)</span><br><span class="line">        addFrame(resources.getDrawable(R.drawable.flow_p2,<span class="keyword">this</span><span class="symbol">@FrameAnimActivity</span>.theme),<span class="number">50</span>)</span><br><span class="line">        addFrame(resources.getDrawable(R.drawable.flow_p3,<span class="keyword">this</span><span class="symbol">@FrameAnimActivity</span>.theme),<span class="number">50</span>)</span><br><span class="line">        addFrame(resources.getDrawable(R.drawable.flow_p4,<span class="keyword">this</span><span class="symbol">@FrameAnimActivity</span>.theme),<span class="number">50</span>)</span><br><span class="line">        addFrame(resources.getDrawable(R.drawable.flow_p5,<span class="keyword">this</span><span class="symbol">@FrameAnimActivity</span>.theme),<span class="number">50</span>)</span><br><span class="line">        addFrame(resources.getDrawable(R.drawable.flow_p6,<span class="keyword">this</span><span class="symbol">@FrameAnimActivity</span>.theme),<span class="number">50</span>)</span><br><span class="line">        addFrame(resources.getDrawable(R.drawable.flow_p7,<span class="keyword">this</span><span class="symbol">@FrameAnimActivity</span>.theme),<span class="number">50</span>)</span><br><span class="line">        addFrame(resources.getDrawable(R.drawable.flow_p8,<span class="keyword">this</span><span class="symbol">@FrameAnimActivity</span>.theme),<span class="number">50</span>)</span><br><span class="line">        <span class="comment">//setOneShot为true表示只播放一次，为false表示循环播放</span></span><br><span class="line">        isOneShot = <span class="literal">false</span></span><br><span class="line">        mBinding.ivFrameAnim.setImageDrawable(<span class="keyword">this</span>)</span><br><span class="line">        start()</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="通过xml方式实现"><a href="#通过xml方式实现" class="headerlink" title="通过xml方式实现"></a>通过xml方式实现</h4><p>​        先把帧图片的排列定义在一个XML文件中；然后在代码中直接调用ImageView对象的setImageResource方法，加载帧动画的图形定义文件；再调用ImageView对象的getDrawable方法，获得动画图形的实例，并进行后续的播放操作。</p><p>如:定义drawable文件，frame_anim.xml:</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">animation-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:oneshot</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">"@drawable/flow_p1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"50"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">"@drawable/flow_p2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"50"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">"@drawable/flow_p3"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"50"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">"@drawable/flow_p4"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"50"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">"@drawable/flow_p5"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"50"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">"@drawable/flow_p6"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"50"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">"@drawable/flow_p7"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"50"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">"@drawable/flow_p8"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:duration</span>=<span class="string">"50"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">animation-list</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><a id="more"></a><p>在Activity中创建方法调用：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * xml方式启动帧动画</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">showFrameAnimByXml</span><span class="params">()</span></span>{</span><br><span class="line">    mBinding.ivFrameAnim.setImageResource(R.drawable.frame_anim)</span><br><span class="line">    animationDrawable = mBinding.ivFrameAnim.drawable <span class="keyword">as</span> AnimationDrawable</span><br><span class="line">    animationDrawable.start()</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="显示GIF动画"><a href="#显示GIF动画" class="headerlink" title="显示GIF动画"></a>显示GIF动画</h3><p>​        Android虽然号称支持PNG、JPG、GIF三种图片格式，但是并不支持直接播放GIF动图，如果在图像视图中加载一张GIF文件，只会显示GIF文件的第一帧图片。</p><h4 id="借助帧动画播放拆解后的组图"><a href="#借助帧动画播放拆解后的组图" class="headerlink" title="借助帧动画播放拆解后的组图"></a>借助帧动画播放拆解后的组图</h4><p>​        将GIF文件分解为一系列图片数据，并获取每帧的持续时间，然后通过动画图形动态加载每帧图片。</p><p>从GIF文件中分解帧图片有现成的开源代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.animationstudy.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.graphics.Bitmap;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Bitmap.Config;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Handler for read &amp; extract Bitmap from *.gif  </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GifImage</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">// to store *.gif data, Bitmap &amp; delay</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GifFrame</span> </span>{</span><br><span class="line"><span class="comment">// to access image &amp; delay w/o interface</span></span><br><span class="line"><span class="keyword">public</span> Bitmap image;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> delay;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GifFrame</span><span class="params">(Bitmap im, <span class="keyword">int</span> del)</span> </span>{</span><br><span class="line">image = im;</span><br><span class="line">delay = del;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// to define some error type</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATUS_OK = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATUS_FORMAT_ERROR = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STATUS_OPEN_ERROR = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> status;</span><br><span class="line"><span class="keyword">protected</span> InputStream in;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> width; <span class="comment">// full image width</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> height; <span class="comment">// full image height</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">boolean</span> gctFlag; <span class="comment">// global color table used</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> gctSize; <span class="comment">// size of global color table</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> loopCount = <span class="number">1</span>; <span class="comment">// iterations; 0 = repeat forever</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span>[] gct; <span class="comment">// global color table</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span>[] lct; <span class="comment">// local color table</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span>[] act; <span class="comment">// active color table</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> bgIndex; <span class="comment">// background color index</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> bgColor; <span class="comment">// background color</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> lastBgColor; <span class="comment">// previous bg color</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> pixelAspect; <span class="comment">// pixel aspect ratio</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">boolean</span> lctFlag; <span class="comment">// local color table flag</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">boolean</span> interlace; <span class="comment">// interlace flag</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> lctSize; <span class="comment">// local color table size</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> ix, iy, iw, ih; <span class="comment">// current image rectangle</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> lrx, lry, lrw, lrh;</span><br><span class="line"><span class="keyword">protected</span> Bitmap image; <span class="comment">// current frame</span></span><br><span class="line"><span class="keyword">protected</span> Bitmap lastImage; <span class="comment">// previous frame</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> frameindex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFrameindex</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">return</span> frameindex;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFrameindex</span><span class="params">(<span class="keyword">int</span> frameindex)</span> </span>{</span><br><span class="line"><span class="keyword">this</span>.frameindex = frameindex;</span><br><span class="line"><span class="keyword">if</span> (frameindex &gt; frames.size() - <span class="number">1</span>) {</span><br><span class="line">frameindex = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">byte</span>[] block = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">256</span>]; <span class="comment">// current data block</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> blockSize = <span class="number">0</span>; <span class="comment">// block size</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// last graphic control extension info</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> dispose = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 0=no action; 1=leave in place; 2=restore to bg; 3=restore to prev</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> lastDispose = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">boolean</span> transparency = <span class="keyword">false</span>; <span class="comment">// use transparent color</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> delay = <span class="number">0</span>; <span class="comment">// delay in milliseconds</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> transIndex; <span class="comment">// transparent color index</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MaxStackSize = <span class="number">4096</span>;</span><br><span class="line"><span class="comment">// max decoder pixel stack size</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// LZW decoder working arrays</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">short</span>[] prefix;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">byte</span>[] suffix;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">byte</span>[] pixelStack;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">byte</span>[] pixels;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Vector&lt;GifFrame&gt; frames; <span class="comment">// frames read from current file</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> frameCount;</span><br><span class="line"></span><br><span class="line"><span class="comment">// to get its Width / Height</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">return</span> width;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHeigh</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">return</span> height;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Gets display duration for specified frame.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment"> *            int index of frame</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> delay in milliseconds</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDelay</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">delay = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> ((n &gt;= <span class="number">0</span>) &amp;&amp; (n &lt; frameCount)) {</span><br><span class="line">delay = ((GifFrame) frames.elementAt(n)).delay;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> delay;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFrameCount</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">return</span> frameCount;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">getImage</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">return</span> getFrame(<span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLoopCount</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">return</span> loopCount;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setPixels</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">int</span>[] dest = <span class="keyword">new</span> <span class="keyword">int</span>[width * height];</span><br><span class="line"><span class="comment">// fill in starting image contents based on last image's dispose code</span></span><br><span class="line"><span class="keyword">if</span> (lastDispose &gt; <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">if</span> (lastDispose == <span class="number">3</span>) {</span><br><span class="line"><span class="comment">// use image before last</span></span><br><span class="line"><span class="keyword">int</span> n = frameCount - <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">0</span>) {</span><br><span class="line">lastImage = getFrame(n - <span class="number">1</span>);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">lastImage = <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (lastImage != <span class="keyword">null</span>) {</span><br><span class="line">lastImage.getPixels(dest, <span class="number">0</span>, width, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line"><span class="comment">// copy pixels</span></span><br><span class="line"><span class="keyword">if</span> (lastDispose == <span class="number">2</span>) {</span><br><span class="line"><span class="comment">// fill last image rect area with background color</span></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (!transparency) {</span><br><span class="line">c = lastBgColor;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lrh; i++) {</span><br><span class="line"><span class="keyword">int</span> n1 = (lry + i) * width + lrx;</span><br><span class="line"><span class="keyword">int</span> n2 = n1 + lrw;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = n1; k &lt; n2; k++) {</span><br><span class="line">dest[k] = c;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// copy each source line to the appropriate place in the destination</span></span><br><span class="line"><span class="keyword">int</span> pass = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> inc = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> iline = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ih; i++) {</span><br><span class="line"><span class="keyword">int</span> line = i;</span><br><span class="line"><span class="keyword">if</span> (interlace) {</span><br><span class="line"><span class="keyword">if</span> (iline &gt;= ih) {</span><br><span class="line">pass++;</span><br><span class="line"><span class="keyword">switch</span> (pass) {</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">iline = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">iline = <span class="number">2</span>;</span><br><span class="line">inc = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">iline = <span class="number">1</span>;</span><br><span class="line">inc = <span class="number">2</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">line = iline;</span><br><span class="line">iline += inc;</span><br><span class="line">}</span><br><span class="line">line += iy;</span><br><span class="line"><span class="keyword">if</span> (line &lt; height) {</span><br><span class="line"><span class="keyword">int</span> k = line * width;</span><br><span class="line"><span class="keyword">int</span> dx = k + ix; <span class="comment">// start of line in dest</span></span><br><span class="line"><span class="keyword">int</span> dlim = dx + iw; <span class="comment">// end of dest line</span></span><br><span class="line"><span class="keyword">if</span> ((k + width) &lt; dlim) {</span><br><span class="line">dlim = k + width; <span class="comment">// past dest edge</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> sx = i * iw; <span class="comment">// start of line in source</span></span><br><span class="line"><span class="keyword">while</span> (dx &lt; dlim) {</span><br><span class="line"><span class="comment">// map color and insert in destination</span></span><br><span class="line"><span class="keyword">int</span> index = ((<span class="keyword">int</span>) pixels[sx++]) &amp; <span class="number">0xff</span>;</span><br><span class="line"><span class="keyword">int</span> c = act[index];</span><br><span class="line"><span class="keyword">if</span> (c != <span class="number">0</span>) {</span><br><span class="line">dest[dx] = c;</span><br><span class="line">}</span><br><span class="line">dx++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">image = Bitmap.createBitmap(dest, width, height, Config.RGB_565);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">getFrame</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">Bitmap im = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> ((n &gt;= <span class="number">0</span>) &amp;&amp; (n &lt; frameCount)) {</span><br><span class="line">im = ((GifFrame) frames.elementAt(n)).image;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> im;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> GifFrame[] getFrames() {</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> != frames)</span><br><span class="line"><span class="keyword">return</span> frames.toArray(<span class="keyword">new</span> GifFrame[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Bitmap <span class="title">nextBitmap</span><span class="params">()</span> </span>{</span><br><span class="line">frameindex++;</span><br><span class="line"><span class="keyword">if</span> (frameindex &gt; frames.size() - <span class="number">1</span>) {</span><br><span class="line">frameindex = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> ((GifFrame) frames.elementAt(frameindex)).image;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextDelay</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">return</span> ((GifFrame) frames.elementAt(frameindex)).delay;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// to read &amp; parse all *.gif stream</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(InputStream is)</span> </span>{</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">if</span> (is != <span class="keyword">null</span>) {</span><br><span class="line">in = is;</span><br><span class="line">readHeader();</span><br><span class="line"><span class="keyword">if</span> (!err()) {</span><br><span class="line">readContents();</span><br><span class="line"><span class="keyword">if</span> (frameCount &lt; <span class="number">0</span>) {</span><br><span class="line">status = STATUS_FORMAT_ERROR;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">status = STATUS_OPEN_ERROR;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">is.close();</span><br><span class="line">} <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> status;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decodeImageData</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">int</span> NullCode = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> npix = iw * ih;</span><br><span class="line"><span class="keyword">int</span> available, clear, code_mask, code_size, end_of_information, in_code, old_code, bits, code, count, i, datum, data_size, first, top, bi, pi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((pixels == <span class="keyword">null</span>) || (pixels.length &lt; npix)) {</span><br><span class="line">pixels = <span class="keyword">new</span> <span class="keyword">byte</span>[npix]; <span class="comment">// allocate new pixel array</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (prefix == <span class="keyword">null</span>) {</span><br><span class="line">prefix = <span class="keyword">new</span> <span class="keyword">short</span>[MaxStackSize];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (suffix == <span class="keyword">null</span>) {</span><br><span class="line">suffix = <span class="keyword">new</span> <span class="keyword">byte</span>[MaxStackSize];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (pixelStack == <span class="keyword">null</span>) {</span><br><span class="line">pixelStack = <span class="keyword">new</span> <span class="keyword">byte</span>[MaxStackSize + <span class="number">1</span>];</span><br><span class="line">}</span><br><span class="line"><span class="comment">// Initialize GIF data stream decoder.</span></span><br><span class="line">data_size = read();</span><br><span class="line">clear = <span class="number">1</span> &lt;&lt; data_size;</span><br><span class="line">end_of_information = clear + <span class="number">1</span>;</span><br><span class="line">available = clear + <span class="number">2</span>;</span><br><span class="line">old_code = NullCode;</span><br><span class="line">code_size = data_size + <span class="number">1</span>;</span><br><span class="line">code_mask = (<span class="number">1</span> &lt;&lt; code_size) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (code = <span class="number">0</span>; code &lt; clear; code++) {</span><br><span class="line">prefix[code] = <span class="number">0</span>;</span><br><span class="line">suffix[code] = (<span class="keyword">byte</span>) code;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Decode GIF pixel stream.</span></span><br><span class="line">datum = bits = count = first = top = pi = bi = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; npix;) {</span><br><span class="line"><span class="keyword">if</span> (top == <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">if</span> (bits &lt; code_size) {</span><br><span class="line"><span class="comment">// Load bytes until there are enough bits for a code.</span></span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">0</span>) {</span><br><span class="line"><span class="comment">// Read a new data block.</span></span><br><span class="line">count = readBlock();</span><br><span class="line"><span class="keyword">if</span> (count &lt;= <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">bi = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">datum += (((<span class="keyword">int</span>) block[bi]) &amp; <span class="number">0xff</span>) &lt;&lt; bits;</span><br><span class="line">bits += <span class="number">8</span>;</span><br><span class="line">bi++;</span><br><span class="line">count--;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line"><span class="comment">// Get the next code.</span></span><br><span class="line">code = datum &amp; code_mask;</span><br><span class="line">datum &gt;&gt;= code_size;</span><br><span class="line">bits -= code_size;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Interpret the code</span></span><br><span class="line"><span class="keyword">if</span> ((code &gt; available) || (code == end_of_information)) {</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (code == clear) {</span><br><span class="line"><span class="comment">// Reset decoder.</span></span><br><span class="line">code_size = data_size + <span class="number">1</span>;</span><br><span class="line">code_mask = (<span class="number">1</span> &lt;&lt; code_size) - <span class="number">1</span>;</span><br><span class="line">available = clear + <span class="number">2</span>;</span><br><span class="line">old_code = NullCode;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (old_code == NullCode) {</span><br><span class="line">pixelStack[top++] = suffix[code];</span><br><span class="line">old_code = code;</span><br><span class="line">first = code;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">}</span><br><span class="line">in_code = code;</span><br><span class="line"><span class="keyword">if</span> (code == available) {</span><br><span class="line">pixelStack[top++] = (<span class="keyword">byte</span>) first;</span><br><span class="line">code = old_code;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (code &gt; clear) {</span><br><span class="line">pixelStack[top++] = suffix[code];</span><br><span class="line">code = prefix[code];</span><br><span class="line">}</span><br><span class="line">first = ((<span class="keyword">int</span>) suffix[code]) &amp; <span class="number">0xff</span>;</span><br><span class="line"><span class="comment">// Add a new string to the string table,</span></span><br><span class="line"><span class="keyword">if</span> (available &gt;= MaxStackSize) {</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">pixelStack[top++] = (<span class="keyword">byte</span>) first;</span><br><span class="line">prefix[available] = (<span class="keyword">short</span>) old_code;</span><br><span class="line">suffix[available] = (<span class="keyword">byte</span>) first;</span><br><span class="line">available++;</span><br><span class="line"><span class="keyword">if</span> (((available &amp; code_mask) == <span class="number">0</span>)</span><br><span class="line">&amp;&amp; (available &lt; MaxStackSize)) {</span><br><span class="line">code_size++;</span><br><span class="line">code_mask += available;</span><br><span class="line">}</span><br><span class="line">old_code = in_code;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pop a pixel off the pixel stack.</span></span><br><span class="line">top--;</span><br><span class="line">pixels[pi++] = pixelStack[top];</span><br><span class="line">i++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">for</span> (i = pi; i &lt; npix; i++) {</span><br><span class="line">pixels[i] = <span class="number">0</span>; <span class="comment">// clear missing pixels</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">err</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">return</span> status != STATUS_OK;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// to initia variable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">status = STATUS_OK;</span><br><span class="line">frameCount = <span class="number">0</span>;</span><br><span class="line">frames = <span class="keyword">new</span> Vector&lt;GifFrame&gt;();</span><br><span class="line">gct = <span class="keyword">null</span>;</span><br><span class="line">lct = <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">int</span> curByte = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">curByte = in.read();</span><br><span class="line">} <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">status = STATUS_FORMAT_ERROR;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> curByte;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">readBlock</span><span class="params">()</span> </span>{</span><br><span class="line">blockSize = read();</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (blockSize &gt; <span class="number">0</span>) {</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n &lt; blockSize) {</span><br><span class="line">count = in.read(block, n, blockSize - n);</span><br><span class="line"><span class="keyword">if</span> (count == -<span class="number">1</span>) {</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">n += count;</span><br><span class="line">}</span><br><span class="line">} <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (n &lt; blockSize) {</span><br><span class="line">status = STATUS_FORMAT_ERROR;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Global Color Table</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span>[] readColorTable(<span class="keyword">int</span> ncolors) {</span><br><span class="line"><span class="keyword">int</span> nbytes = <span class="number">3</span> * ncolors;</span><br><span class="line"><span class="keyword">int</span>[] tab = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">byte</span>[] c = <span class="keyword">new</span> <span class="keyword">byte</span>[nbytes];</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">n = in.read(c);</span><br><span class="line">} <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">e.printStackTrace();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (n &lt; nbytes) {</span><br><span class="line">status = STATUS_FORMAT_ERROR;</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">tab = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>]; <span class="comment">// max size to avoid bounds checks</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; ncolors) {</span><br><span class="line"><span class="keyword">int</span> r = ((<span class="keyword">int</span>) c[j++]) &amp; <span class="number">0xff</span>;</span><br><span class="line"><span class="keyword">int</span> g = ((<span class="keyword">int</span>) c[j++]) &amp; <span class="number">0xff</span>;</span><br><span class="line"><span class="keyword">int</span> b = ((<span class="keyword">int</span>) c[j++]) &amp; <span class="number">0xff</span>;</span><br><span class="line">tab[i++] = <span class="number">0xff000000</span> | (r &lt;&lt; <span class="number">16</span>) | (g &lt;&lt; <span class="number">8</span>) | b;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> tab;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Image Descriptor</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">readContents</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="comment">// read GIF file content blocks</span></span><br><span class="line"><span class="keyword">boolean</span> done = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">while</span> (!(done || err())) {</span><br><span class="line"><span class="keyword">int</span> code = read();</span><br><span class="line"><span class="keyword">switch</span> (code) {</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x2C</span>: <span class="comment">// image separator</span></span><br><span class="line">readImage();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x21</span>: <span class="comment">// extension</span></span><br><span class="line">code = read();</span><br><span class="line"><span class="keyword">switch</span> (code) {</span><br><span class="line"><span class="keyword">case</span> <span class="number">0xf9</span>: <span class="comment">// graphics control extension</span></span><br><span class="line">readGraphicControlExt();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">0xff</span>: <span class="comment">// application extension</span></span><br><span class="line">readBlock();</span><br><span class="line">String app = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) {</span><br><span class="line">app += (<span class="keyword">char</span>) block[i];</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (app.equals(<span class="string">"NETSCAPE2.0"</span>)) {</span><br><span class="line">readNetscapeExt();</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">skip(); <span class="comment">// don't care</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>: <span class="comment">// uninteresting extension</span></span><br><span class="line">skip();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">0x3b</span>: <span class="comment">// terminator</span></span><br><span class="line">done = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">0x00</span>: <span class="comment">// bad byte, but keep going and see what happens</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">status = STATUS_FORMAT_ERROR;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">readGraphicControlExt</span><span class="params">()</span> </span>{</span><br><span class="line">read(); <span class="comment">// block size</span></span><br><span class="line"><span class="keyword">int</span> packed = read(); <span class="comment">// packed fields</span></span><br><span class="line">dispose = (packed &amp; <span class="number">0x1c</span>) &gt;&gt; <span class="number">2</span>; <span class="comment">// disposal method</span></span><br><span class="line"><span class="keyword">if</span> (dispose == <span class="number">0</span>) {</span><br><span class="line">dispose = <span class="number">1</span>; <span class="comment">// elect to keep old image if discretionary</span></span><br><span class="line">}</span><br><span class="line">transparency = (packed &amp; <span class="number">1</span>) != <span class="number">0</span>;</span><br><span class="line">delay = readShort() * <span class="number">10</span>; <span class="comment">// delay in milliseconds</span></span><br><span class="line">transIndex = read(); <span class="comment">// transparent color index</span></span><br><span class="line">read(); <span class="comment">// block terminator</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// to get Stream - Head</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">readHeader</span><span class="params">()</span> </span>{</span><br><span class="line">String id = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) {</span><br><span class="line">id += (<span class="keyword">char</span>) read();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (!id.toUpperCase().startsWith(<span class="string">"GIF"</span>)) {</span><br><span class="line">status = STATUS_FORMAT_ERROR;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">readLSD();</span><br><span class="line"><span class="keyword">if</span> (gctFlag &amp;&amp; !err()) {</span><br><span class="line">gct = readColorTable(gctSize);</span><br><span class="line">bgColor = gct[bgIndex];</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">readImage</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="comment">// offset of X</span></span><br><span class="line">ix = readShort(); <span class="comment">// (sub)image position &amp; size</span></span><br><span class="line"><span class="comment">// offset of Y</span></span><br><span class="line">iy = readShort();</span><br><span class="line"><span class="comment">// width of bitmap</span></span><br><span class="line">iw = readShort();</span><br><span class="line"><span class="comment">// height of bitmap</span></span><br><span class="line">ih = readShort();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Local Color Table Flag</span></span><br><span class="line"><span class="keyword">int</span> packed = read();</span><br><span class="line">lctFlag = (packed &amp; <span class="number">0x80</span>) != <span class="number">0</span>; <span class="comment">// 1 - local color table flag</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Interlace Flag, to array with interwoven if ENABLE, with order</span></span><br><span class="line"><span class="comment">// otherwise</span></span><br><span class="line">interlace = (packed &amp; <span class="number">0x40</span>) != <span class="number">0</span>; <span class="comment">// 2 - interlace flag</span></span><br><span class="line"><span class="comment">// 3 - sort flag</span></span><br><span class="line"><span class="comment">// 4-5 - reserved</span></span><br><span class="line">lctSize = <span class="number">2</span> &lt;&lt; (packed &amp; <span class="number">7</span>); <span class="comment">// 6-8 - local color table size</span></span><br><span class="line"><span class="keyword">if</span> (lctFlag) {</span><br><span class="line">lct = readColorTable(lctSize); <span class="comment">// read table</span></span><br><span class="line">act = lct; <span class="comment">// make local table active</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">act = gct; <span class="comment">// make global table active</span></span><br><span class="line"><span class="keyword">if</span> (bgIndex == transIndex) {</span><br><span class="line">bgColor = <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">int</span> save = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (transparency) {</span><br><span class="line">save = act[transIndex];</span><br><span class="line">act[transIndex] = <span class="number">0</span>; <span class="comment">// set transparent color if specified</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (act == <span class="keyword">null</span>) {</span><br><span class="line">status = STATUS_FORMAT_ERROR; <span class="comment">// no color table defined</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span> (err()) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">decodeImageData(); <span class="comment">// decode pixel data</span></span><br><span class="line">skip();</span><br><span class="line"><span class="keyword">if</span> (err()) {</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">frameCount++;</span><br><span class="line"><span class="comment">// create new image to receive frame data</span></span><br><span class="line">image = Bitmap.createBitmap(width, height, Config.RGB_565);</span><br><span class="line"><span class="comment">// createImage(width, height);</span></span><br><span class="line">setPixels(); <span class="comment">// transfer pixel data to image</span></span><br><span class="line">frames.addElement(<span class="keyword">new</span> GifFrame(image, delay)); <span class="comment">// add image to frame</span></span><br><span class="line"><span class="comment">// list</span></span><br><span class="line"><span class="keyword">if</span> (transparency) {</span><br><span class="line">act[transIndex] = save;</span><br><span class="line">}</span><br><span class="line">resetFrame();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Logical Screen Descriptor</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">readLSD</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="comment">// logical screen size</span></span><br><span class="line">width = readShort();</span><br><span class="line">height = readShort();</span><br><span class="line"><span class="comment">// packed fields</span></span><br><span class="line"><span class="keyword">int</span> packed = read();</span><br><span class="line">gctFlag = (packed &amp; <span class="number">0x80</span>) != <span class="number">0</span>; <span class="comment">// 1 : global color table flag</span></span><br><span class="line"><span class="comment">// 2-4 : color resolution</span></span><br><span class="line"><span class="comment">// 5 : gct sort flag</span></span><br><span class="line">gctSize = <span class="number">2</span> &lt;&lt; (packed &amp; <span class="number">7</span>); <span class="comment">// 6-8 : gct size</span></span><br><span class="line">bgIndex = read(); <span class="comment">// background color index</span></span><br><span class="line">pixelAspect = read(); <span class="comment">// pixel aspect ratio</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">readNetscapeExt</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">do</span> {</span><br><span class="line">readBlock();</span><br><span class="line"><span class="keyword">if</span> (block[<span class="number">0</span>] == <span class="number">1</span>) {</span><br><span class="line"><span class="comment">// loop count sub-block</span></span><br><span class="line"><span class="keyword">int</span> b1 = ((<span class="keyword">int</span>) block[<span class="number">1</span>]) &amp; <span class="number">0xff</span>;</span><br><span class="line"><span class="keyword">int</span> b2 = ((<span class="keyword">int</span>) block[<span class="number">2</span>]) &amp; <span class="number">0xff</span>;</span><br><span class="line">loopCount = (b2 &lt;&lt; <span class="number">8</span>) | b1;</span><br><span class="line">}</span><br><span class="line">} <span class="keyword">while</span> ((blockSize &gt; <span class="number">0</span>) &amp;&amp; !err());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// read 8 bit data</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">readShort</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="comment">// read 16-bit value, LSB first</span></span><br><span class="line"><span class="keyword">return</span> read() | (read() &lt;&lt; <span class="number">8</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">resetFrame</span><span class="params">()</span> </span>{</span><br><span class="line">lastDispose = dispose;</span><br><span class="line">lrx = ix;</span><br><span class="line">lry = iy;</span><br><span class="line">lrw = iw;</span><br><span class="line">lrh = ih;</span><br><span class="line">lastImage = image;</span><br><span class="line">lastBgColor = bgColor;</span><br><span class="line">dispose = <span class="number">0</span>;</span><br><span class="line">transparency = <span class="keyword">false</span>;</span><br><span class="line">delay = <span class="number">0</span>;</span><br><span class="line">lct = <span class="keyword">null</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Skips variable length blocks up to and including next zero length block.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">skip</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">do</span> {</span><br><span class="line">readBlock();</span><br><span class="line">} <span class="keyword">while</span> ((blockSize &gt; <span class="number">0</span>) &amp;&amp; !err());</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>显示gif的示例代码：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 借助于帧动画技术显示gif</span></span><br><span class="line"><span class="comment">     * 将GIF文件分解为一系列图片数据，并获取每帧的持续时间，然后通过动画图形动态加载每帧图片。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">showGifAnim</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">val</span> inputStream = resources.openRawResource(R.raw.welcome)</span><br><span class="line">        <span class="keyword">val</span> gifImage = GifImage()</span><br><span class="line">        <span class="keyword">when</span>(<span class="keyword">val</span> code = gifImage.read(inputStream)){</span><br><span class="line">            GifImage.STATUS_OK -&gt; {</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="keyword">val</span> frameList = gifImage.frames</span><br><span class="line">                <span class="keyword">val</span> animationDrawable = AnimationDrawable()</span><br><span class="line">                frameList.forEach {</span><br><span class="line">                    <span class="comment">//BitmapDrawable用于把Bitmap格式转换为Drawable格式</span></span><br><span class="line">                    <span class="keyword">val</span> bitmapDrawable = BitmapDrawable(resources,it.image)</span><br><span class="line">                    animationDrawable.addFrame(bitmapDrawable,it.delay)</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">//循环播放</span></span><br><span class="line">                animationDrawable.isOneShot = <span class="literal">false</span></span><br><span class="line">                mBinding.ivGif.setImageDrawable(animationDrawable)</span><br><span class="line">                animationDrawable.start()</span><br><span class="line">            }</span><br><span class="line">            GifImage.STATUS_FORMAT_ERROR -&gt; {</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"该图片不是gif格式"</span>, Toast.LENGTH_LONG).show()</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> -&gt; {</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, <span class="string">"gif图片读取失败:<span class="variable">$code</span>"</span>, Toast.LENGTH_LONG).show()</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h4 id="利用ImageDecoder结合动画图形播放动图"><a href="#利用ImageDecoder结合动画图形播放动图" class="headerlink" title="利用ImageDecoder结合动画图形播放动图"></a>利用ImageDecoder结合动画图形播放动图</h4><p>​        Android从9.0开始增加了新的图像解码器ImageDecoder，该解码器支持直接读取GIF文件的图像数据，通过搭配具备动画特征的图形工具Animatable即可轻松实现在App中播放GIF动图。</p><p>​        Android 9.0新增了ImageDecoder，该图像解码器不但支持播放GIF动图，也支持谷歌公司自研的WebP图片。WebP格式是谷歌公司在2010年推出的新一代图片格式，在压缩方面比JPEG格式更高效，且拥有相同的图像质量，同时WebP的图片大小比JPEG图片平均要小30%。另外，WebP也支持动图效果，ImageDecoder从WebP图片读取出Drawable对象之后即可转换成Animatable实例进行动画播放和停止播放的操作。</p><p>示例：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresApi(Build.VERSION_CODES.P)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">showAnimateDrawable</span><span class="params">(imgId:<span class="type">Int</span>)</span></span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//利用Android9新增的ImageDecoder获取图像来源</span></span><br><span class="line">            <span class="keyword">val</span> source = ImageDecoder.createSource(resources,imgId)</span><br><span class="line">            <span class="comment">// 从数据源中解码得到图形数据</span></span><br><span class="line">            <span class="keyword">val</span> drawable = ImageDecoder.decodeDrawable(source)</span><br><span class="line">            mBinding.ivGif.setImageDrawable(drawable)</span><br><span class="line">            <span class="keyword">if</span> (drawable <span class="keyword">is</span> Animatable){</span><br><span class="line">                (mBinding.ivGif.drawable <span class="keyword">as</span> Animatable).start()</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (e:java.lang.Exception){</span><br><span class="line">            e.printStackTrace()</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h3 id="淡入淡出动画"><a href="#淡入淡出动画" class="headerlink" title="淡入淡出动画"></a>淡入淡出动画</h3><p>​        Android提供了过渡图形<strong>TransitionDrawable</strong>处理两张图片之间的渐变显示，即淡入淡出的动画效果。</p><p>​        过渡图形同样需要宿主视图显示该图形，即调用图像视图的setImageDrawable方法进行图形加载操作。下面是TransitionDrawable的常用方法：</p><ul><li>构造方法：指定过渡图形的图形数组。<strong>该图形数组大小为2，包含前后两张图形</strong>。</li><li><strong>startTransition</strong>：开始过渡操作。这里需要先设置宿主视图再进行渐变显示。</li><li><strong>resetTransition</strong>：重置过渡操作。</li><li><strong>reverseTransition</strong>：倒过来执行过渡操作。</li></ul><p>示例：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressLint(<span class="meta-string">"UseCompatLoadingForDrawables"</span>)</span></span><br><span class="line">   <span class="function"><span class="keyword">fun</span> <span class="title">showFadeAnimation</span><span class="params">()</span></span>{</span><br><span class="line">       <span class="comment">// 淡入淡出动画需要先定义一个图形资源数组，用于变换图片</span></span><br><span class="line">       <span class="keyword">val</span> drawableArr = arrayOf(getDrawable(R.drawable.fade_begin),getDrawable(R.drawable.fade_end))</span><br><span class="line">       <span class="comment">// 创建一个用于淡入淡出动画的过渡图形</span></span><br><span class="line">       <span class="keyword">val</span> transDrawable = TransitionDrawable(drawableArr)</span><br><span class="line">       <span class="comment">//设置过渡图形</span></span><br><span class="line">       mBinding.ivFadeAnim.setImageDrawable(transDrawable)</span><br><span class="line">       <span class="comment">// 是否启用交叉淡入。启用后淡入效果更柔和</span></span><br><span class="line">       transDrawable.isCrossFadeEnabled = <span class="literal">true</span></span><br><span class="line">       <span class="comment">// 开始时长3秒的过渡转换</span></span><br><span class="line">       transDrawable.startTransition(<span class="number">3000</span>)</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><h2 id="补间动画"><a href="#补间动画" class="headerlink" title="补间动画"></a>补间动画</h2><h3 id="补间动画的种类"><a href="#补间动画的种类" class="headerlink" title="补间动画的种类"></a>补间动画的种类</h3><p>​        Android提供了补间动画，它允许开发者实现某个视图的动态变换，具体包括4种动画效果，分别是<strong>灰度动画</strong>、<strong>平移动画</strong>、<strong>缩放动画</strong>和<strong>旋转动画</strong>。</p><p>​        <strong>为什么把这4种动画称作补间动画呢？</strong>因为由开发者提供动画的起始状态值与终止状态值，然后系统按照时间推移计算中间的状态值，并自动把中间状态的视图补充到起止视图的变化过程中，自动补充中间视图的动画就被简称为“补间动画”。</p><p>​        4种补间动画（灰度动画AlphaAnimation、平移动画TranslateAnimation、缩放动画ScaleAnimation和旋转动画RotateAnimation）都来自于共同的动画类Animation，因此同时拥有Animation的属性与方法。</p><p>Animation的常用方法：</p><ul><li><strong>setFillAfter：设置是否维持结束画面。</strong>true表示动画结束后停留在结束画面，false表示动画结束后恢复到开始画面。</li><li><strong>setRepeatMode：设置动画的重播模式</strong>。Animation.RESTART表示从头开始，Animation.REVERSE表示倒过来播放。默认为Animation.RESTART。</li><li><strong>setRepeatCount：设置动画的重播次数</strong>。默认值为0，表示只播放一次；值为ValueAnimator.INFINITE时表示持续重播。</li><li><strong>setDuration：设置动画的持续时间，单位为毫秒</strong>。</li><li><strong>setInterpolator：设置动画的插值器。</strong></li><li><strong>setAnimationListener：设置动画的监听器。</strong>需实现接口AnimationListener的3个方法：<ol><li>onAnimationStart：在动画开始时触发。</li><li>onAnimationEnd：在动画结束时触发。</li><li>onAnimationRepeat：在动画重播时触发。</li></ol></li></ul><p>​        与帧动画一样，补间动画也需要找一个宿主视图，对宿主视图施展动画效果；<strong>不同的是，帧动画的宿主视图只能是由ImageView派生出来的视图家族（图像视图、图像按钮等），而补间动画的宿主视图可以是任意视图，只要派生自View类就行</strong>。</p><p>​        给补间动画指定宿主视图的方式很简单，调用宿主对象的<strong>startAnimation</strong>方法即可命令宿主视图<strong>开始播放动画</strong>，调用宿主对象的<strong>clearAnimation</strong>方法即可要求宿主视图<strong>清除动画</strong>。</p><h4 id="补间动画初始化方式"><a href="#补间动画初始化方式" class="headerlink" title="补间动画初始化方式"></a>补间动画初始化方式</h4><h5 id="初始化灰度动画"><a href="#初始化灰度动画" class="headerlink" title="初始化灰度动画"></a>初始化灰度动画</h5><p>​        在构造方法中指定视图透明度的前后数值，取值为0.0～1.0（0表示完全不透明，1表示完全透明）。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个灰度动画。从完全透明变为即将不透明</span></span><br><span class="line"><span class="keyword">val</span> alphaAnim = AlphaAnimation(<span class="number">1f</span>,<span class="number">0.1f</span>)</span><br></pre></td></tr></tbody></table></figure><h5 id="初始化平移动画"><a href="#初始化平移动画" class="headerlink" title="初始化平移动画"></a>初始化平移动画</h5><p>​        <strong>在构造方法中指定视图在平移前后左上角的坐标值</strong>。其中，第一个参数为平移前的横坐标，第二个参数为平移后的横坐标，第三个参数为平移前的纵坐标，第四个参数为平移后的纵坐标。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个平移动画。向左平移100dp</span></span><br><span class="line">translateAnim = TranslateAnimation(<span class="number">1f</span>, Utils.dip2px(<span class="keyword">this</span>,-<span class="number">100f</span>).toFloat(),<span class="number">1f</span>,<span class="number">1f</span>)</span><br></pre></td></tr></tbody></table></figure><h5 id="初始化缩放动画"><a href="#初始化缩放动画" class="headerlink" title="初始化缩放动画"></a>初始化缩放动画</h5><p>​        <strong>在构造方法中指定视图横纵坐标的前后缩放比例。</strong>缩放比例取值为0.5时表示缩小到原来的二分之一，取值为2时表示放大到原来的两倍。其中，第一个参数为缩放前的横坐标比例，第二个参数为缩放后的横坐标比例，第三个参数为缩放前的纵坐标比例，第四个参数为缩放后的纵坐标比例。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个缩放动画。宽度不变，高度变为原来的二分之一</span></span><br><span class="line"><span class="keyword">val</span> scaleAnim = ScaleAnimation(<span class="number">1f</span>,<span class="number">1f</span>,<span class="number">1f</span>,<span class="number">0.5f</span>)</span><br></pre></td></tr></tbody></table></figure><h5 id="初始化旋转动画"><a href="#初始化旋转动画" class="headerlink" title="初始化旋转动画"></a>初始化旋转动画</h5><p>​        在构造方法中指定视图的旋转角度。其中，第一个参数为旋转前的角度，第二个参数为旋转后的角度，第三个参数为圆心的横坐标类型，第四个参数为圆心横坐标的数值比例，第五个参数为圆心的纵坐标类型，第六个参数为圆心纵坐标的数值比例。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个旋转动画。围绕着圆心顺时针旋转360度</span></span><br><span class="line"><span class="keyword">val</span> rotateAnim = RotateAnimation(<span class="number">0f</span>,<span class="number">360f</span>,Animation.RELATIVE_TO_SELF,</span><br><span class="line">            <span class="number">0.5f</span>,Animation.RELATIVE_TO_SELF,<span class="number">0.5f</span>)</span><br></pre></td></tr></tbody></table></figure><p>坐标类型的取值说明:</p><ul><li><strong>ABSOLUTE</strong>：绝对位置    </li><li><strong>RELATIVE_TO_SELF</strong>：相对自身的位置</li><li><strong>RELATIVE_TO_PARENT</strong>：相对父视图的位置</li></ul><p>示例：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.animationstudy.ui</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.view.View</span><br><span class="line"><span class="keyword">import</span> android.view.animation.AlphaAnimation</span><br><span class="line"><span class="keyword">import</span> android.view.animation.Animation</span><br><span class="line"><span class="keyword">import</span> android.view.animation.Animation.AnimationListener</span><br><span class="line"><span class="keyword">import</span> android.view.animation.RotateAnimation</span><br><span class="line"><span class="keyword">import</span> android.view.animation.ScaleAnimation</span><br><span class="line"><span class="keyword">import</span> android.view.animation.TranslateAnimation</span><br><span class="line"><span class="keyword">import</span> android.widget.AdapterView</span><br><span class="line"><span class="keyword">import</span> android.widget.AdapterView.OnItemSelectedListener</span><br><span class="line"><span class="keyword">import</span> android.widget.ArrayAdapter</span><br><span class="line"><span class="keyword">import</span> com.study.animationstudy.R</span><br><span class="line"><span class="keyword">import</span> com.study.animationstudy.base.BaseActivity</span><br><span class="line"><span class="keyword">import</span> com.study.animationstudy.databinding.ActivityTweenAnimBinding</span><br><span class="line"><span class="keyword">import</span> com.study.animationstudy.util.Utils</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TweenAnimActivity</span> : <span class="type">BaseActivity</span>&lt;<span class="type">ActivityTweenAnimBinding</span>&gt;</span>(),AnimationListener {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明四个补间动画对象</span></span><br><span class="line">    <span class="comment">//灰度动画</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> alphaAnim:Animation</span><br><span class="line">    <span class="comment">//平移动画</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> translateAnim:Animation</span><br><span class="line">    <span class="comment">//缩放动画</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> scaleAnim:Animation</span><br><span class="line">    <span class="comment">//旋转动画</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> rotateAnim:Animation</span><br><span class="line">    <span class="keyword">var</span> isEnd = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> ActivityTweenAnimBinding.<span class="title">initBinding</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="comment">//初始化补间动画</span></span><br><span class="line">        initTweenAnim()</span><br><span class="line">        <span class="comment">//初始化spinner</span></span><br><span class="line">        initTweenSpinner()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化补间动画</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">initTweenAnim</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">// 创建一个灰度动画。从完全透明变为即将不透明</span></span><br><span class="line">        alphaAnim = AlphaAnimation(<span class="number">1f</span>,<span class="number">0.1f</span>)</span><br><span class="line">        <span class="comment">// 设置动画的播放时长</span></span><br><span class="line">        alphaAnim.duration = <span class="number">3000</span></span><br><span class="line">        <span class="comment">// 设置维持结束画面</span></span><br><span class="line">        alphaAnim.fillAfter = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个平移动画。向左平移100dp</span></span><br><span class="line">        translateAnim = TranslateAnimation(<span class="number">1f</span>, Utils.dip2px(<span class="keyword">this</span>,-<span class="number">100f</span>).toFloat(),<span class="number">1f</span>,<span class="number">1f</span>)</span><br><span class="line">        <span class="comment">// 设置动画的播放时长</span></span><br><span class="line">        translateAnim.duration = <span class="number">3000</span></span><br><span class="line">        <span class="comment">// 设置维持结束画面</span></span><br><span class="line">        translateAnim.fillAfter = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个缩放动画。宽度不变，高度变为原来的二分之一</span></span><br><span class="line">        scaleAnim = ScaleAnimation(<span class="number">1f</span>,<span class="number">1f</span>,<span class="number">1f</span>,<span class="number">0.5f</span>)</span><br><span class="line">        <span class="comment">// 设置动画的播放时长</span></span><br><span class="line">        scaleAnim.duration = <span class="number">3000</span></span><br><span class="line">        <span class="comment">// 设置维持结束画面</span></span><br><span class="line">        scaleAnim.fillAfter = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个旋转动画。围绕着圆心顺时针旋转360度</span></span><br><span class="line">        rotateAnim = RotateAnimation(<span class="number">0f</span>,<span class="number">360f</span>,Animation.RELATIVE_TO_SELF,</span><br><span class="line">            <span class="number">0.5f</span>,Animation.RELATIVE_TO_SELF,<span class="number">0.5f</span>)</span><br><span class="line">        <span class="comment">// 设置动画的播放时长</span></span><br><span class="line">        rotateAnim.duration = <span class="number">3000</span></span><br><span class="line">        <span class="comment">// 设置维持结束画面</span></span><br><span class="line">        rotateAnim.fillAfter = <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> tweenArr = arrayOf(<span class="string">"灰度动画"</span>, <span class="string">"平移动画"</span>, <span class="string">"缩放动画"</span>, <span class="string">"旋转动画"</span>)</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化动画类型下拉框</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">initTweenSpinner</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">val</span> tweenArrayAdapter = ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>,R.layout.item_select,tweenArr)</span><br><span class="line">        mBinding.spTween.apply {</span><br><span class="line">            prompt = <span class="string">"请选择补间动画类型"</span></span><br><span class="line">            adapter = tweenArrayAdapter</span><br><span class="line">            onItemSelectedListener = <span class="keyword">object</span> :OnItemSelectedListener{</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onItemSelected</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                    parent: <span class="type">AdapterView</span>&lt;*&gt;?,</span></span></span><br><span class="line"><span class="function"><span class="params">                    view: <span class="type">View</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">                    position: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                    id: <span class="type">Long</span></span></span></span><br><span class="line"><span class="function"><span class="params">                )</span></span> {</span><br><span class="line">                    <span class="comment">// 播放指定类型的补间动画</span></span><br><span class="line">                    playTweenAnim(position)</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onNothingSelected</span><span class="params">(parent: <span class="type">AdapterView</span>&lt;*&gt;?)</span></span> {</span><br><span class="line"></span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">            setSelection(<span class="number">0</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 播放指定类型的补间动画</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">playTweenAnim</span><span class="params">(type:<span class="type">Int</span>)</span></span>{</span><br><span class="line">        <span class="keyword">when</span>(type){</span><br><span class="line">            <span class="comment">// 灰度动画</span></span><br><span class="line">            <span class="number">0</span> -&gt; {</span><br><span class="line">                <span class="comment">// 开始播放灰度动画</span></span><br><span class="line">                mBinding.ivTweenAnim.startAnimation(alphaAnim)</span><br><span class="line">                <span class="comment">// 给灰度动画设置动画事件监听器</span></span><br><span class="line">                alphaAnim.setAnimationListener(<span class="keyword">this</span>)</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 平移动画</span></span><br><span class="line">            <span class="number">1</span> -&gt; {</span><br><span class="line">                mBinding.ivTweenAnim.startAnimation(translateAnim)</span><br><span class="line">                translateAnim.setAnimationListener(<span class="keyword">this</span>)</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 缩放动画</span></span><br><span class="line">            <span class="number">2</span> -&gt; {</span><br><span class="line">                mBinding.ivTweenAnim.startAnimation(scaleAnim)</span><br><span class="line">                scaleAnim.setAnimationListener(<span class="keyword">this</span>)</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 旋转动画</span></span><br><span class="line">            <span class="number">3</span> -&gt; {</span><br><span class="line">                mBinding.ivTweenAnim.startAnimation(rotateAnim)</span><br><span class="line">                rotateAnim.setAnimationListener(<span class="keyword">this</span>)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationStart</span><span class="params">(animation: <span class="type">Animation</span>?)</span></span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationEnd</span><span class="params">(animation: <span class="type">Animation</span>?)</span></span> {</span><br><span class="line">        animation?.let {</span><br><span class="line">            <span class="keyword">when</span>(it){</span><br><span class="line">                <span class="comment">//灰度动画</span></span><br><span class="line">                <span class="keyword">is</span> AlphaAnimation -&gt; {</span><br><span class="line">                    <span class="comment">// 创建一个灰度动画。从完全透明变为即将不透明</span></span><br><span class="line">                    <span class="keyword">val</span> alphaAnim2 = AlphaAnimation(<span class="number">0.1f</span>,<span class="number">1f</span>)</span><br><span class="line">                    <span class="comment">// 设置动画的播放时长</span></span><br><span class="line">                    alphaAnim2.duration = <span class="number">1000</span></span><br><span class="line">                    <span class="comment">// 设置维持结束画面</span></span><br><span class="line">                    alphaAnim2.fillAfter = <span class="literal">true</span></span><br><span class="line">                    <span class="comment">//开始播放灰度动画</span></span><br><span class="line">                    mBinding.ivTweenAnim.startAnimation(alphaAnim2)</span><br><span class="line">                    alphaAnim2.setAnimationListener(<span class="keyword">object</span> :AnimationListener{</span><br><span class="line">                        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationStart</span><span class="params">(animation: <span class="type">Animation</span>?)</span></span> {</span><br><span class="line"></span><br><span class="line">                        }</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationEnd</span><span class="params">(animation: <span class="type">Animation</span>?)</span></span> {</span><br><span class="line">                            playTweenAnim(<span class="number">0</span>)</span><br><span class="line">                        }</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationRepeat</span><span class="params">(animation: <span class="type">Animation</span>?)</span></span> {</span><br><span class="line"></span><br><span class="line">                        }</span><br><span class="line">                    })</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">//平移动画</span></span><br><span class="line">                <span class="keyword">is</span> TranslateAnimation -&gt; {</span><br><span class="line">                    <span class="comment">// 创建一个平移动画。向左平移100dp</span></span><br><span class="line">                    <span class="keyword">val</span> translateAnim = TranslateAnimation(Utils.dip2px(<span class="keyword">this</span>,-<span class="number">100f</span>).toFloat(),<span class="number">1f</span>,<span class="number">1f</span>,<span class="number">1f</span>)</span><br><span class="line">                    <span class="comment">// 设置动画的播放时长</span></span><br><span class="line">                    translateAnim.duration = <span class="number">3000</span></span><br><span class="line">                    <span class="comment">// 设置维持结束画面</span></span><br><span class="line">                    translateAnim.fillAfter = <span class="literal">true</span></span><br><span class="line">                    <span class="comment">//开始播放灰度动画</span></span><br><span class="line">                    mBinding.ivTweenAnim.startAnimation(translateAnim)</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">//缩放动画</span></span><br><span class="line">                <span class="keyword">is</span> ScaleAnimation -&gt; {</span><br><span class="line">                    <span class="comment">// 创建一个缩放动画。宽度不变，高度变为原来的二倍</span></span><br><span class="line">                    <span class="keyword">val</span> scaleAnim = ScaleAnimation(<span class="number">1f</span>,<span class="number">1f</span>,<span class="number">0.5f</span>,<span class="number">1f</span>)</span><br><span class="line">                    <span class="comment">// 设置动画的播放时长</span></span><br><span class="line">                    scaleAnim.duration = <span class="number">3000</span></span><br><span class="line">                    <span class="comment">// 设置维持结束画面</span></span><br><span class="line">                    scaleAnim.fillAfter = <span class="literal">true</span></span><br><span class="line">                    <span class="comment">//开始播放灰度动画</span></span><br><span class="line">                    mBinding.ivTweenAnim.startAnimation(scaleAnim)</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">//旋转动画</span></span><br><span class="line">                <span class="keyword">is</span> RotateAnimation -&gt; {</span><br><span class="line">                    <span class="comment">// 创建一个旋转动画。围绕着圆心逆时针旋转360度</span></span><br><span class="line">                    <span class="keyword">val</span> rotateAnim = RotateAnimation(<span class="number">0f</span>,-<span class="number">360f</span>,Animation.RELATIVE_TO_SELF,</span><br><span class="line">                        <span class="number">0.5f</span>,Animation.RELATIVE_TO_SELF,<span class="number">0.5f</span>)</span><br><span class="line">                    <span class="comment">// 设置动画的播放时长</span></span><br><span class="line">                    rotateAnim.duration = <span class="number">3000</span></span><br><span class="line">                    <span class="comment">// 设置维持结束画面</span></span><br><span class="line">                    rotateAnim.fillAfter = <span class="literal">true</span></span><br><span class="line">                    <span class="comment">//开始播放灰度动画</span></span><br><span class="line">                    mBinding.ivTweenAnim.startAnimation(rotateAnim)</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationRepeat</span><span class="params">(animation: <span class="type">Animation</span>?)</span></span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="补间动画的原理"><a href="#补间动画的原理" class="headerlink" title="补间动画的原理"></a>补间动画的原理</h3><p>​        补间动画只提供了基本的动态变换，如果想要复杂的动画效果，比如像钟摆一样左摆一下再右摆一下，补间动画就无能为力了。如果了解补间动画的实现原理，进行适当的改造，就能使其符合实际的业务需求。</p><p>查看RotateAnimation的源码，发现除了一堆构造方法外剩下的代码只有如下3个方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Called at the end of constructor methods to initialize, if possible, values for</span></span><br><span class="line"><span class="comment"> * the pivot point. This is only possible for ABSOLUTE pivot values.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initializePivotPoint</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">if</span> (mPivotXType == ABSOLUTE) {</span><br><span class="line">        mPivotX = mPivotXValue;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (mPivotYType == ABSOLUTE) {</span><br><span class="line">        mPivotY = mPivotYValue;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">applyTransformation</span><span class="params">(<span class="keyword">float</span> interpolatedTime, Transformation t)</span> </span>{</span><br><span class="line">    <span class="keyword">float</span> degrees = mFromDegrees + ((mToDegrees - mFromDegrees) * interpolatedTime);</span><br><span class="line">    <span class="keyword">float</span> scale = getScaleFactor();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mPivotX == <span class="number">0.0f</span> &amp;&amp; mPivotY == <span class="number">0.0f</span>) {</span><br><span class="line">        t.getMatrix().setRotate(degrees);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        t.getMatrix().setRotate(degrees, mPivotX * scale, mPivotY * scale);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">int</span> parentWidth, <span class="keyword">int</span> parentHeight)</span> </span>{</span><br><span class="line">    <span class="keyword">super</span>.initialize(width, height, parentWidth, parentHeight);</span><br><span class="line">    mPivotX = resolveSize(mPivotXType, mPivotXValue, width, parentWidth);</span><br><span class="line">    mPivotY = resolveSize(mPivotYType, mPivotYValue, height, parentHeight);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​        与动画播放有关的代码只有<strong>applyTransformation</strong>方法。该方法很简单，提供了两个输入参数：第一个参数为插值时间，即逝去的时间所占的百分比；第二个参数为转换器。方法内部<strong>根据插值时间计算当前所处的角度数值，最后使用转换器把视图旋转到该角度</strong>。</p><p><strong>补间动画的关键在于利用插值时间计算状态值。</strong></p><p>​        查看其他补间动画的源码，发现都与RotateAnimation的处理大同小异，对中间状态的视图变换处理不外乎以下两个步骤：</p><ol><li>根据插值时间计算当前的状态值（如灰度、平移距离、缩放比率、旋转角度等）。</li><li>在宿主视图上使用该状态值执行变换操作。</li></ol><p>例如：钟摆的左右摆动，这个摆动操作其实由3段旋转动画构成。</p><ol><li>以上面的端点为圆心，钟摆以垂直向下的状态向左旋转，转到左边的某个角度停住（比如左转60度）。</li><li>钟摆从左边向右边旋转，转到右边的某个角度停住（比如右转120度，与垂直方向的夹角为60度）。</li><li>钟摆从右边再向左旋转，当其摆到垂直方向时完成一个周期的摇摆动作。</li></ol><p>根据插值时间计算对应的角度，具体到代码实现上需要做以下两处调整：</p><ol><li>旋转动画初始化时只有两个度数，即起始角度和终止角度。摇摆动画需要3个参数，即中间角度（既是起始角度也是终止角度）、摆到左侧的角度和摆到右侧的角度。</li><li>根据插值时间估算当前所处的角度。对于摇摆动画来说，需要做3个分支判断（对应之前3段旋转动画）。如果整个动画持续4秒，那么0～1秒为往左的旋转动画，该区间的起始角度为中间角度，终止角度为摆到左侧的角度；1～3秒为往右的旋转动画，该区间的起始角度为摆到左侧的角度，终止角度为摆到右侧的角度；3～4秒为往左的旋转动画，该区间的起始角度为摆到右侧的角度，终止角度为中间角度。</li></ol><p>摇摆动画代码片段：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在动画变换过程中调用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> interpolatedTime Float</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> t Transformation</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">applyTransformation</span><span class="params">(interpolatedTime: <span class="type">Float</span>, t: <span class="type">Transformation</span>?)</span></span> {</span><br><span class="line">    <span class="keyword">var</span> degrees = <span class="number">0f</span></span><br><span class="line">    <span class="comment">// 摆到左边端点时的时间比例</span></span><br><span class="line">    <span class="keyword">val</span> leftPos = (<span class="number">1f</span>/<span class="number">4f</span>)</span><br><span class="line">    <span class="comment">// 摆到右边端点时的时间比例</span></span><br><span class="line">    <span class="keyword">val</span> rightPos = (<span class="number">3f</span>/<span class="number">4f</span>)</span><br><span class="line">    <span class="keyword">when</span>{</span><br><span class="line">        <span class="comment">// 从中间线往左边端点摆</span></span><br><span class="line">        interpolatedTime &lt;= leftPos -&gt; {</span><br><span class="line">            degrees = mMiddleDegrees + ((mLeftDegrees - mMiddleDegrees) * interpolatedTime * <span class="number">4</span>)</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 从左边端点往右边端点摆</span></span><br><span class="line">        interpolatedTime &gt; leftPos &amp;&amp; interpolatedTime &lt; rightPos -&gt; {</span><br><span class="line">            <span class="comment">// 从左边端点往右边端点摆</span></span><br><span class="line">            degrees = mLeftDegrees + (mRightDegrees - mLeftDegrees) * (interpolatedTime - leftPos) * <span class="number">2</span></span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 从右边端点往中间线摆</span></span><br><span class="line">        <span class="keyword">else</span> -&gt; {</span><br><span class="line">            <span class="comment">// 从右边端点往中间线摆</span></span><br><span class="line">            degrees = mRightDegrees + (mMiddleDegrees - mRightDegrees) * (interpolatedTime - rightPos) * <span class="number">4</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//获得缩放比率</span></span><br><span class="line">    <span class="keyword">val</span> scale = scaleFactor</span><br><span class="line">    <span class="keyword">if</span> (mPivotX == <span class="number">0.0f</span> &amp;&amp; mPivotY == <span class="number">0.0f</span>){</span><br><span class="line">        t?.matrix?.setRotate(degrees)</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        t?.matrix?.setRotate(degrees,mPivotX * scale,mPivotY * scale)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="集合动画"><a href="#集合动画" class="headerlink" title="集合动画"></a>集合动画</h3><p>​        如一边旋转一边缩放，这时便会用到集合动画AnimationSet把几个补间动画组装起来，实现让某视图同时呈现多种动画的效果。因为集合动画与补间动画一样继承自Animation类，所以拥有补间动画的基本方法。集合动画不像一般补间动画那样提供构造方法，而是通过<strong>addAnimation</strong>方法把别的补间动画加入本集合动画中:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimSetActivity</span> : <span class="type">BaseActivity</span>&lt;<span class="type">ActivityAnimSetBinding</span>&gt;</span>(),AnimationListener {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> aniSet:AnimationSet</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> ActivityAnimSetBinding.<span class="title">initBinding</span><span class="params">()</span></span> {</span><br><span class="line">        initAnimation()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化集合动画</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initAnimation</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">// 创建一个灰度动画 0.0～1.0（0表示完全不透明，1表示完全透明）</span></span><br><span class="line">        <span class="keyword">val</span> alphaAnimation = AlphaAnimation(<span class="number">1f</span>,<span class="number">0.1f</span>)</span><br><span class="line">        <span class="comment">// 设置动画的播放时长</span></span><br><span class="line">        alphaAnimation.duration = <span class="number">3000</span></span><br><span class="line">        <span class="comment">// 设置维持结束画面</span></span><br><span class="line">        alphaAnimation.fillAfter = <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 创建一个平移动画 向左平移200，第一个参数是原始横坐标，第二个参数是平移后的的横坐标，第三个参数是原始纵坐标，第四个参数是平移后的纵坐标</span></span><br><span class="line">        <span class="keyword">val</span> translateAnimation = TranslateAnimation(<span class="number">1f</span>,-<span class="number">200f</span>,<span class="number">1f</span>,<span class="number">1f</span>)</span><br><span class="line">        <span class="comment">// 设置动画的播放时长</span></span><br><span class="line">        translateAnimation.duration = <span class="number">3000</span></span><br><span class="line">        <span class="comment">// 设置维持结束画面</span></span><br><span class="line">        translateAnimation.fillAfter = <span class="literal">true</span></span><br><span class="line">         <span class="comment">// 创建一个缩放动画,第一个参数是缩放前的横坐标比例，第二个是缩放后的横坐标比例，第三个是缩放前的纵坐标比例，第四个是缩放后的纵坐标比例</span></span><br><span class="line">        <span class="keyword">val</span> scaleAnimation = ScaleAnimation(<span class="number">1f</span>,<span class="number">1f</span>,<span class="number">1f</span>,<span class="number">0.5f</span>)</span><br><span class="line">        <span class="comment">// 设置动画的播放时长</span></span><br><span class="line">        scaleAnimation.duration = <span class="number">3000</span></span><br><span class="line">        <span class="comment">// 设置维持结束画面</span></span><br><span class="line">        scaleAnimation.fillAfter = <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 创建一个旋转动画</span></span><br><span class="line">        <span class="keyword">val</span> rotateAnimation = RotateAnimation(<span class="number">0f</span>,<span class="number">360f</span>,Animation.RELATIVE_TO_SELF,<span class="number">0.5f</span>,Animation.RELATIVE_TO_SELF,<span class="number">0.5f</span>)</span><br><span class="line">        <span class="comment">// 设置动画的播放时长</span></span><br><span class="line">        rotateAnimation.duration = <span class="number">3000</span></span><br><span class="line">        <span class="comment">// 设置维持结束画面</span></span><br><span class="line">        rotateAnimation.fillAfter = <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 创建一个集合动画</span></span><br><span class="line">        aniSet = AnimationSet(<span class="literal">true</span>)</span><br><span class="line">        <span class="comment">// 下面在代码中添加集合动画</span></span><br><span class="line">        aniSet.addAnimation(alphaAnimation)</span><br><span class="line">        aniSet.addAnimation(translateAnimation)</span><br><span class="line">        aniSet.addAnimation(scaleAnimation)</span><br><span class="line">        aniSet.addAnimation(rotateAnimation)</span><br><span class="line">        aniSet.fillAfter = <span class="literal">true</span></span><br><span class="line">        startAnim()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始播放集合动画</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">startAnim</span><span class="params">()</span></span>{</span><br><span class="line">        mBinding.aniSet.startAnimation(aniSet)</span><br><span class="line">        aniSet.setAnimationListener(<span class="keyword">this</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationStart</span><span class="params">(animation: <span class="type">Animation</span>?)</span></span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationEnd</span><span class="params">(animation: <span class="type">Animation</span>?)</span></span> {</span><br><span class="line">        <span class="comment">// 原集合动画播放完毕，接着播放倒过来的集合动画</span></span><br><span class="line">        <span class="keyword">if</span> (animation?.equals(aniSet) == <span class="literal">true</span>){</span><br><span class="line">            <span class="comment">// 创建一个灰度动画 0.0～1.0（0表示完全不透明，1表示完全透明）</span></span><br><span class="line">            <span class="keyword">val</span> alphaAnimation = AlphaAnimation(<span class="number">0.1f</span>,<span class="number">1f</span>)</span><br><span class="line">            <span class="comment">// 设置动画的播放时长</span></span><br><span class="line">            alphaAnimation.duration = <span class="number">3000</span></span><br><span class="line">            <span class="comment">// 设置维持结束画面</span></span><br><span class="line">            alphaAnimation.fillAfter = <span class="literal">true</span></span><br><span class="line">            <span class="comment">// 创建一个平移动画 向左平移200，第一个参数是原始横坐标，第二个参数是平移后的的横坐标，第三个参数是原始纵坐标，第四个参数是平移后的纵坐标</span></span><br><span class="line">            <span class="keyword">val</span> translateAnimation = TranslateAnimation(-<span class="number">200f</span>,<span class="number">1f</span>,<span class="number">1f</span>,<span class="number">1f</span>)</span><br><span class="line">            <span class="comment">// 设置动画的播放时长</span></span><br><span class="line">            translateAnimation.duration = <span class="number">3000</span></span><br><span class="line">            <span class="comment">// 设置维持结束画面</span></span><br><span class="line">            translateAnimation.fillAfter = <span class="literal">true</span></span><br><span class="line">            <span class="comment">// 创建一个缩放动画,第一个参数是缩放前的横坐标比例，第二个是缩放后的横坐标比例，第三个是缩放前的纵坐标比例，第四个是缩放后的纵坐标比例</span></span><br><span class="line">            <span class="keyword">val</span> scaleAnimation = ScaleAnimation(<span class="number">1f</span>,<span class="number">1f</span>,<span class="number">0.5f</span>,<span class="number">1f</span>)</span><br><span class="line">            <span class="comment">// 设置动画的播放时长</span></span><br><span class="line">            scaleAnimation.duration = <span class="number">3000</span></span><br><span class="line">            <span class="comment">// 设置维持结束画面</span></span><br><span class="line">            scaleAnimation.fillAfter = <span class="literal">true</span></span><br><span class="line">            <span class="comment">// 创建一个旋转动画,围绕着圆心逆时针旋转360度</span></span><br><span class="line">            <span class="keyword">val</span> rotateAnimation = RotateAnimation(<span class="number">0f</span>,-<span class="number">360f</span>,Animation.RELATIVE_TO_SELF,<span class="number">0.5f</span>,Animation.RELATIVE_TO_SELF,<span class="number">0.5f</span>)</span><br><span class="line">            <span class="comment">// 设置动画的播放时长</span></span><br><span class="line">            rotateAnimation.duration = <span class="number">3000</span></span><br><span class="line">            <span class="comment">// 设置维持结束画面</span></span><br><span class="line">            rotateAnimation.fillAfter = <span class="literal">true</span></span><br><span class="line">            <span class="comment">// 创建一个集合动画</span></span><br><span class="line">            <span class="keyword">val</span> aniSet = AnimationSet(<span class="literal">true</span>)</span><br><span class="line">            <span class="comment">// 下面在代码中添加集合动画</span></span><br><span class="line">            aniSet.addAnimation(alphaAnimation)</span><br><span class="line">            aniSet.addAnimation(translateAnimation)</span><br><span class="line">            aniSet.addAnimation(scaleAnimation)</span><br><span class="line">            aniSet.addAnimation(rotateAnimation)</span><br><span class="line">            aniSet.fillAfter = <span class="literal">true</span></span><br><span class="line">            mBinding.aniSet.startAnimation(aniSet)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationRepeat</span><span class="params">(animation: <span class="type">Animation</span>?)</span></span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="属性动画"><a href="#属性动画" class="headerlink" title="属性动画"></a>属性动画</h2><h3 id="常规的属性动画"><a href="#常规的属性动画" class="headerlink" title="常规的属性动画"></a>常规的属性动画</h3><p>​        视图View类虽有许多状态属性，但<strong>补间动画只对其中6种属性进行操作：</strong></p><p><img src="/2022/12/12/Android%E5%8A%A8%E7%94%BB/1.png" alt=""></p><p>​        如果要求对视图的背景颜色做渐变处理，补间动画就无能为力了。为此，Android又引入了属性动画<strong>ObjectAnimator</strong>。属性动画突破了补间动画的局限，允许视图的所有属性都能实现渐变的动画效果，例如背景颜色、文字颜色、文字大小等。只要设定某属性的起始值与终止值、渐变的持续时间，属性动画即可实现渐变效果。</p><p>​        下面是ObjectAnimator的常用方法：</p><ul><li>ofInt：定义整型属性的属性动画。</li><li>ofFloat：定义浮点型属性的属性动画。</li><li>ofArgb：定义颜色属性的属性动画。</li><li>ofObject：定义对象属性的属性动画，用于不是上述三种类型的属性，例如Rect对象。</li></ul><p>​       以上4个of方法的第一个参数为宿主视图对象，第二个参数为需要变化的属性名称，从第三个参数开始以及后面的参数为属性变化的各个状态值。注意，of方法后面的参数个数是变化的。如果第3个参数是状态A、第4个参数是状态B，属性动画就从A状态变为B状态；如果第3个参数是状态A、第4个参数是状态B、第5个参数是状态C，属性动画就先从A状态变为B状态，再从B状态变为C状态。</p><ul><li>setRepeatMode：设置动画的重播模式。ValueAnimator.RESTART表示从头开始，ValueAnimator.REVERSE表示倒过来播放。默认值为ValueAnimator.RESTART。</li><li>setRepeatCount：设置动画的重播次数。默认值为0，表示只播放一次；值为ValueAnimator.INFINITE时表示持续重播。</li><li>setDuration：设置动画的持续播放时间，单位为毫秒。</li><li>setInterpolator：设置动画的插值器。</li><li>setEvaluator：设置动画的估值器。</li><li>start：开始播放动画。</li><li>cancel：取消播放动画。</li><li>end：结束播放动画。</li><li>pause：暂停播放动画。</li><li>resume：恢复播放动画。</li><li>reverse：倒过来播放动画。</li><li>isRunning：判断动画是否在播放。注意，暂停时，isRunning方法仍然返回true。</li><li>isPaused：判断动画是否被暂停。</li><li>isStarted：判断动画是否已经开始。注意，曾经播放与正在播放都算已经开始。</li><li>addListener：添加动画监听器，需实现接口AnimatorListener的4个方法。<ol><li>onAnimationStart：在动画开始播放时触发。</li><li>onAnimationEnd：在动画结束播放时触发。</li><li>onAnimationCancel：在动画取消播放时触发。</li><li>onAnimationRepeat：在动画重播时触发。</li></ol></li></ul><p>案例：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectAnimActivity</span> : <span class="type">BaseActivity</span>&lt;<span class="type">ActivityObjectAnimBinding</span>&gt;</span>() {</span><br><span class="line">    <span class="comment">// 声明四个属性动画对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> alphaAnim:ObjectAnimator</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> translateAnim:ObjectAnimator</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> scaleAnim:ObjectAnimator</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> rotateAnim:ObjectAnimator</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> objectArray = arrayOf(<span class="string">"灰度动画"</span>, <span class="string">"平移动画"</span>, <span class="string">"缩放动画"</span>, <span class="string">"旋转动画"</span>, <span class="string">"裁剪动画"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> ActivityObjectAnimBinding.<span class="title">initBinding</span><span class="params">()</span></span> {</span><br><span class="line">        initObjectAnim()</span><br><span class="line">        initObjectSpinner()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化属性动画</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initObjectAnim</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">// 构造一个在透明度上变化的属性动画</span></span><br><span class="line">        alphaAnim = ObjectAnimator.ofFloat(mBinding.ivObjectAnim,<span class="string">"alpha"</span>,<span class="number">1f</span>,<span class="number">0.1f</span>,<span class="number">1f</span>)</span><br><span class="line">        <span class="comment">// 构造一个在横轴上平移的属性动画</span></span><br><span class="line">        translateAnim = ObjectAnimator.ofFloat(mBinding.ivObjectAnim,<span class="string">"translationX"</span>,<span class="number">0f</span>,-<span class="number">200f</span>,<span class="number">0f</span>,<span class="number">200f</span>,<span class="number">0f</span>)</span><br><span class="line">        <span class="comment">// 构造一个在纵轴上缩放的属性动画</span></span><br><span class="line">        scaleAnim = ObjectAnimator.ofFloat(mBinding.ivObjectAnim,<span class="string">"scaleY"</span>,<span class="number">1f</span>,<span class="number">0.5f</span>,<span class="number">1f</span>)</span><br><span class="line">        <span class="comment">// 构造一个围绕中心点旋转的属性动画</span></span><br><span class="line">        rotateAnim = ObjectAnimator.ofFloat(mBinding.ivObjectAnim,<span class="string">"rotation"</span>,<span class="number">0f</span>,<span class="number">360f</span>,<span class="number">0f</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initObjectSpinner</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">val</span> objectAdapter = ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>,R.layout.item_select,objectArray)</span><br><span class="line">        mBinding.spObject.apply {</span><br><span class="line">            prompt = <span class="string">"请选择属性动画类型"</span></span><br><span class="line">            adapter = objectAdapter</span><br><span class="line">            onItemSelectedListener = <span class="keyword">object</span>: OnItemSelectedListener{</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onItemSelected</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                    parent: <span class="type">AdapterView</span>&lt;*&gt;?,</span></span></span><br><span class="line"><span class="function"><span class="params">                    view: <span class="type">View</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">                    position: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                    id: <span class="type">Long</span></span></span></span><br><span class="line"><span class="function"><span class="params">                )</span></span> {</span><br><span class="line">                    playObjectAnim(position)</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onNothingSelected</span><span class="params">(parent: <span class="type">AdapterView</span>&lt;*&gt;?)</span></span> {</span><br><span class="line"></span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 播放指定类型的属性动画</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type Int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">playObjectAnim</span><span class="params">(type:<span class="type">Int</span>)</span></span>{</span><br><span class="line">        <span class="keyword">var</span> anim:ObjectAnimator? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">when</span>(type){</span><br><span class="line">            <span class="comment">// 灰度动画</span></span><br><span class="line">            <span class="number">0</span> -&gt; anim = alphaAnim</span><br><span class="line">            <span class="comment">// 平移动画</span></span><br><span class="line">            <span class="number">1</span> -&gt; anim = translateAnim</span><br><span class="line">            <span class="comment">// 缩放动画</span></span><br><span class="line">            <span class="number">2</span> -&gt; anim = scaleAnim</span><br><span class="line">            <span class="comment">// 旋转动画</span></span><br><span class="line">            <span class="number">3</span> -&gt; anim = rotateAnim</span><br><span class="line">            <span class="comment">// 裁剪动画</span></span><br><span class="line">            <span class="number">4</span> -&gt; {</span><br><span class="line">                <span class="keyword">val</span> width = mBinding.ivObjectAnim.width</span><br><span class="line">                <span class="keyword">val</span> height = mBinding.ivObjectAnim.height</span><br><span class="line">                <span class="comment">// 构造一个从四周向中间裁剪的属性动画</span></span><br><span class="line">                <span class="keyword">val</span> clipAnim = ObjectAnimator.ofObject(mBinding.ivObjectAnim,<span class="string">"clipBounds"</span>,</span><br><span class="line">                    RectEvaluator(), Rect(<span class="number">0</span>, <span class="number">0</span>, width, height),</span><br><span class="line">                    Rect(width / <span class="number">3</span>, height / <span class="number">3</span>, width / <span class="number">3</span> * <span class="number">2</span>, height / <span class="number">3</span> * <span class="number">2</span>),</span><br><span class="line">                    Rect(<span class="number">0</span>, <span class="number">0</span>, width, height))</span><br><span class="line">                anim = clipAnim</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        anim?.apply {</span><br><span class="line">            <span class="comment">// 设置动画的播放时长</span></span><br><span class="line">            duration = <span class="number">3000</span></span><br><span class="line">            <span class="comment">// 开始播放属性动画</span></span><br><span class="line">            start()</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="属性动画组合"><a href="#属性动画组合" class="headerlink" title="属性动画组合"></a>属性动画组合</h3><p>​        补间动画可以通过集合动画AnimationSet组装多种动画效果，属性动画也有类似的做法，即通过属性动画组合AnimatorSet组装多种属性动画。</p><p>AnimatorSet的常用方法：</p><ul><li><p>setDuration：设置动画组合的持续时间，单位为毫秒。</p></li><li><p>setInterpolator：设置动画组合的插值器。</p></li><li><p>play：设置当前动画。该方法返回一个AnimatorSet.Builder对象，可对该对象调用组装方法添加新动画，从而实现动画组装功能。下面是Builder的组装方法说明。</p><ol><li>with：指定该动画与当前动画一起播放。</li><li>before：指定该动画在当前动画之前播放。</li><li>after：指定该动画在当前动画之后播放。</li></ol></li><li><p>start：开始播放动画组合。</p></li><li><p>pause：暂停播放动画组合。</p></li><li><p>resume：恢复播放动画组合。</p></li><li><p>cancel：取消播放动画组合。</p></li><li><p>end：结束播放动画组合。</p></li><li><p>isRunning：判断动画组合是否在播放。</p></li><li><p>isStarted：判断动画组合是否已经开始。</p></li></ul><p>示例代码：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObjectGroupActivity</span> : <span class="type">BaseActivity</span>&lt;<span class="type">ActivityObjectGroupBinding</span>&gt;</span>(),OnClickListener,AnimatorListener {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个属性动画组合对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> animSet:AnimatorSet</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> isPaused = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> ActivityObjectGroupBinding.<span class="title">initBinding</span><span class="params">()</span></span> {</span><br><span class="line">        mBinding.ivObjectGroup.setOnClickListener(<span class="keyword">this</span><span class="symbol">@ObjectGroupActivity</span>)</span><br><span class="line">        initObjectAnim()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initObjectAnim</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">// 构造一个在横轴上平移的属性动画</span></span><br><span class="line">        <span class="keyword">val</span> anim1 = ObjectAnimator.ofFloat(mBinding.ivObjectGroup,<span class="string">"translationX"</span>,<span class="number">0f</span>,<span class="number">100f</span>)</span><br><span class="line">        <span class="comment">// 构造一个在透明度上变化的属性动画</span></span><br><span class="line">        <span class="keyword">val</span> anim2 = ObjectAnimator.ofFloat(mBinding.ivObjectGroup,<span class="string">"alpha"</span>,<span class="number">1f</span>,<span class="number">0.1f</span>,<span class="number">1f</span>,<span class="number">0.5f</span>,<span class="number">1f</span>)</span><br><span class="line">        <span class="comment">// 构造一个围绕中心点旋转的属性动画</span></span><br><span class="line">        <span class="keyword">val</span> anim3 = ObjectAnimator.ofFloat(mBinding.ivObjectGroup,<span class="string">"rotation"</span>,<span class="number">0f</span>,<span class="number">360f</span>)</span><br><span class="line">        <span class="comment">// 构造一个在纵轴上缩放的属性动画</span></span><br><span class="line">        <span class="keyword">val</span> anim4 = ObjectAnimator.ofFloat(mBinding.ivObjectGroup,<span class="string">"scaleY"</span>,<span class="number">1f</span>,<span class="number">0.5f</span>,<span class="number">1f</span>)</span><br><span class="line">        <span class="comment">// 构造一个在横轴上平移的属性动画</span></span><br><span class="line">        <span class="keyword">val</span> anim5 = ObjectAnimator.ofFloat(mBinding.ivObjectGroup,<span class="string">"translationX"</span>,<span class="number">100f</span>,<span class="number">0f</span>)</span><br><span class="line">        <span class="comment">// 创建一个属性动画组合</span></span><br><span class="line">        animSet = AnimatorSet()</span><br><span class="line">        <span class="comment">// 把指定的属性动画添加到属性动画组合</span></span><br><span class="line">        <span class="keyword">val</span> builder = animSet.play(anim2)</span><br><span class="line">        <span class="comment">// 动画播放顺序为：先执行anim1，再一起执行anim2、anim3、anim4，最后执行anim5</span></span><br><span class="line">        builder.with(anim3).with(anim4).after(anim1).before(anim5)</span><br><span class="line">        <span class="comment">// 设置动画的播放时长</span></span><br><span class="line">        animSet.duration = <span class="number">4500</span></span><br><span class="line">        <span class="comment">// 开始播放属性动画</span></span><br><span class="line">        animSet.start()</span><br><span class="line">        <span class="comment">// 给属性动画添加动画事件监听器</span></span><br><span class="line">        animSet.addListener(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">(v: <span class="type">View</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">when</span>(v?.id){</span><br><span class="line">            mBinding.ivObjectGroup.id -&gt; {</span><br><span class="line">                <span class="keyword">if</span> (animSet.isStarted){</span><br><span class="line">                    <span class="keyword">if</span> (!isPaused){</span><br><span class="line">                        Log.d(<span class="string">"Tag"</span>,<span class="string">"暂停播放"</span>)</span><br><span class="line">                        animSet.pause()</span><br><span class="line">                    } <span class="keyword">else</span> {</span><br><span class="line">                        Log.d(<span class="string">"Tag"</span>,<span class="string">"继续播放"</span>)</span><br><span class="line">                        animSet.resume()</span><br><span class="line">                    }</span><br><span class="line">                    <span class="comment">// 恢复播放属性动画</span></span><br><span class="line">                    isPaused = !isPaused</span><br><span class="line">                } <span class="keyword">else</span> {<span class="comment">// 属性动画尚未开始播放</span></span><br><span class="line">                    Log.d(<span class="string">"Tag"</span>,<span class="string">"开始播放"</span>)</span><br><span class="line">                    animSet.start()</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationStart</span><span class="params">(animation: <span class="type">Animator</span>?)</span></span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationEnd</span><span class="params">(animation: <span class="type">Animator</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O){</span><br><span class="line">            <span class="comment">// 设置当前播放的时间点</span></span><br><span class="line">            animSet.currentPlayTime = <span class="number">0</span></span><br><span class="line">            <span class="comment">// 从动画尾巴开始倒播至setCurrentPlayTime设置的时间点</span></span><br><span class="line">            animSet.reverse()</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationCancel</span><span class="params">(animation: <span class="type">Animator</span>?)</span></span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationRepeat</span><span class="params">(animation: <span class="type">Animator</span>?)</span></span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="插值器和估值器"><a href="#插值器和估值器" class="headerlink" title="插值器和估值器"></a>插值器和估值器</h3><p>​        <strong>插值器</strong>用来控制属性值的变化速率，也<strong>可以理解为动画播放的速度</strong>，<strong>默认是先加速再减速</strong>（AccelerateDecelerateInterpolator）。若要给动画播放指定某种速率形式（比如匀速播放），调用<strong>setInterpolator</strong>方法设置对应的插值器实现类即可，无论是补间动画、集合动画、属性动画还是属性动画组合，都可以设置插值器。</p><p>插值器实现类的说明:</p><p><img src="/2022/12/12/Android%E5%8A%A8%E7%94%BB/2.png" alt=""></p><p>​        <strong>估值器</strong>专用于属性动画，主要<strong>描述该属性的数值变化要采用什么单位</strong>，比如整数类型的渐变数值要取整，颜色的渐变数值为ARGB格式的颜色对象，矩形的渐变数值为Rect对象等。要给属性动画设置估值器，调用属性动画对象的<strong>setEvaluator</strong>方法即可。</p><p>估值器实现类的说明:</p><p><img src="/2022/12/12/Android%E5%8A%A8%E7%94%BB/3.png" alt=""></p><p>​        一般情况下，无须单独设置属性动画的估值器，使用系统默认的估值器即可。如果属性类型不是int、float、argb三种，只能通过ofObject方法构造属性动画对象，就必须指定该属性的估值器，否则系统不知道如何计算渐变属性值。</p><p>属性类型与估值器的对应关系:</p><p><img src="/2022/12/12/Android%E5%8A%A8%E7%94%BB/4.png" alt=""></p><p>示例：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterpolatorActivity</span> : <span class="type">BaseActivity</span>&lt;<span class="type">ActivityInterpolatorBinding</span>&gt;</span>(),AnimatorListener {</span><br><span class="line">    <span class="comment">// 声明四个属性动画对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> animAcce:ObjectAnimator</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> animDece:ObjectAnimator</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> animLinear:ObjectAnimator</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> animBounce:ObjectAnimator</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> interpolatorArray = arrayOf(<span class="string">"背景色+加速插值器+颜色估值器"</span>, <span class="string">"旋转+减速插值器+浮点型估值器"</span>,</span><br><span class="line">        <span class="string">"裁剪+匀速插值器+矩形估值器"</span>, <span class="string">"文字大小+震荡插值器+浮点型估值器"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> ActivityInterpolatorBinding.<span class="title">initBinding</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="comment">//初始化属性动画</span></span><br><span class="line">        initObjectAnim()</span><br><span class="line">        <span class="comment">//初始化插值器类型的下拉框</span></span><br><span class="line">        initInterpolatorSpinner()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化插值器类型的下拉框</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">initInterpolatorSpinner</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">val</span> interpolatorAdapter = ArrayAdapter(<span class="keyword">this</span>,R.layout.item_select,interpolatorArray)</span><br><span class="line">        mBinding.spInterpolator.apply {</span><br><span class="line">            prompt = <span class="string">"请选择插值器类型"</span></span><br><span class="line">            adapter = interpolatorAdapter</span><br><span class="line">            onItemSelectedListener = <span class="keyword">object</span> : OnItemSelectedListener{</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onItemSelected</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                    parent: <span class="type">AdapterView</span>&lt;*&gt;?,</span></span></span><br><span class="line"><span class="function"><span class="params">                    view: <span class="type">View</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">                    position: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                    id: <span class="type">Long</span></span></span></span><br><span class="line"><span class="function"><span class="params">                )</span></span> {</span><br><span class="line">                    <span class="comment">// 根据插值器类型展示属性动画</span></span><br><span class="line">                    showInterpolator(position)</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onNothingSelected</span><span class="params">(parent: <span class="type">AdapterView</span>&lt;*&gt;?)</span></span> {</span><br><span class="line"></span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化属性动画</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">initObjectAnim</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">//构造一个在背景色上变化的属性动画</span></span><br><span class="line">        animAcce = ObjectAnimator.ofInt(mBinding.tvInterpolator,<span class="string">"backgroundColor"</span>,Color.RED,Color.GRAY)</span><br><span class="line">        <span class="comment">//给属性动画设置加速插值器</span></span><br><span class="line">        animAcce.interpolator = AccelerateInterpolator()</span><br><span class="line">        <span class="comment">//给属性动画设置颜色估值器</span></span><br><span class="line">        animAcce.setEvaluator(ArgbEvaluator())</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造一个围绕中心点旋转的属性动画</span></span><br><span class="line">        animDece = ObjectAnimator.ofFloat(mBinding.tvInterpolator,<span class="string">"rotation"</span>,<span class="number">0f</span>,<span class="number">360f</span>)</span><br><span class="line">        <span class="comment">//给属性动画设置减速插值器</span></span><br><span class="line">        animDece.interpolator = DecelerateInterpolator()</span><br><span class="line">        <span class="comment">//给属性动画设置浮点型估值器</span></span><br><span class="line">        animDece.setEvaluator(FloatEvaluator())</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造一个在文字大小上变化的属性动画</span></span><br><span class="line">        animBounce = ObjectAnimator.ofFloat(mBinding.tvInterpolator,<span class="string">"textSize"</span>,<span class="number">20f</span>,<span class="number">60f</span>)</span><br><span class="line">        <span class="comment">//给属性动画设置震荡插值器</span></span><br><span class="line">        animBounce.interpolator = BounceInterpolator()</span><br><span class="line">        <span class="comment">//给属性动画设置浮点型估值器</span></span><br><span class="line">        animBounce.setEvaluator(FloatEvaluator())</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据插值器类型展示属性动画</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">showInterpolator</span><span class="params">(type:<span class="type">Int</span>)</span></span>{</span><br><span class="line">        <span class="keyword">var</span> anim:ObjectAnimator? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">when</span>(type){</span><br><span class="line">            <span class="comment">// 背景色+加速插值器+颜色估值器</span></span><br><span class="line">            <span class="number">0</span> -&gt; anim = animAcce</span><br><span class="line">            <span class="comment">// 旋转+减速插值器+浮点型估值器</span></span><br><span class="line">            <span class="number">1</span> -&gt; anim = animDece</span><br><span class="line">            <span class="comment">// 裁剪+匀速插值器+矩形估值器</span></span><br><span class="line">            <span class="number">2</span> -&gt; {</span><br><span class="line">                <span class="keyword">val</span> width = mBinding.tvInterpolator.width</span><br><span class="line">                <span class="keyword">val</span> height = mBinding.tvInterpolator.height</span><br><span class="line">                <span class="comment">// 构造一个从四周向中间裁剪的属性动画，同时指定了矩形估值器RectEvaluator</span></span><br><span class="line">                animLinear = ObjectAnimator.ofObject(mBinding.tvInterpolator,<span class="string">"clipBounds"</span>,</span><br><span class="line">                    RectEvaluator(),Rect(<span class="number">0</span>,<span class="number">0</span>,width,height),</span><br><span class="line">                    Rect(width/<span class="number">3</span>,height/<span class="number">3</span>,width/<span class="number">3</span>*<span class="number">2</span>,height/<span class="number">3</span>*<span class="number">2</span>),</span><br><span class="line">                    Rect(<span class="number">0</span>,<span class="number">0</span>,width,height))</span><br><span class="line">                <span class="comment">// 给属性动画设置匀速插值器</span></span><br><span class="line">                animLinear.interpolator = LinearInterpolator()</span><br><span class="line">                anim = animLinear</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 文字大小+震荡插值器+浮点型估值器</span></span><br><span class="line">            <span class="number">3</span> -&gt; {</span><br><span class="line">                anim = animBounce</span><br><span class="line">                <span class="comment">// 给属性动画添加动画事件监听器。目的是在动画结束时恢复文字大小</span></span><br><span class="line">                anim.addListener(<span class="keyword">this</span>)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 设置动画的播放时长</span></span><br><span class="line">        anim?.duration = <span class="number">2000</span></span><br><span class="line">        anim?.start()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在属性动画开始播放时触发</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> animation Animator</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationStart</span><span class="params">(animation: <span class="type">Animator</span>?)</span></span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationEnd</span><span class="params">(animation: <span class="type">Animator</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">if</span> (animation?.equals(animBounce) == <span class="literal">true</span>){</span><br><span class="line">            <span class="comment">// 构造一个在文字大小上变化的属性动画</span></span><br><span class="line">            <span class="keyword">val</span> anim = ObjectAnimator.ofFloat(mBinding.tvInterpolator,<span class="string">"textSize"</span>,<span class="number">60f</span>,<span class="number">20f</span>)</span><br><span class="line">            <span class="comment">// 给属性动画设置震荡插值器</span></span><br><span class="line">            anim.interpolator = BounceInterpolator()</span><br><span class="line">            <span class="comment">// 给属性动画设置浮点型估值器</span></span><br><span class="line">            anim.setEvaluator(FloatEvaluator())</span><br><span class="line">            anim.duration = <span class="number">2000</span></span><br><span class="line">            anim.start()</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationCancel</span><span class="params">(animation: <span class="type">Animator</span>?)</span></span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationRepeat</span><span class="params">(animation: <span class="type">Animator</span>?)</span></span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="利用估值器实现弹幕动画"><a href="#利用估值器实现弹幕动画" class="headerlink" title="利用估值器实现弹幕动画"></a>利用估值器实现弹幕动画</h3><ol><li>定义一个间距估值器，实现接口TypeEvaluator的evaluate方法，并在该方法中返回指定时间点的间距数值。</li><li>调用ValueAnimator类的ofObject方法，根据间距估值器、开始位置和结束位置构建属性动画对象。</li><li>调用属性动画对象的addUpdateListener方法设置刷新监听器，在监听器内部获取当前的间距数值，并调整视图此时的布局参数。</li></ol><p>需要自定义弹幕视图，其内部在垂直方向排列，每行放置一个相对布局。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BarrageView</span></span>(context: Context,attrs:AttributeSet?):LinearLayout(context, attrs) {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(context: Context):<span class="keyword">this</span>(context,<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span>{</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">val</span> TAG = <span class="string">"BarrageView"</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">MarginEvaluator</span> : <span class="type">TypeEvaluator</span>&lt;<span class="type">Int</span>&gt; </span>{</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">evaluate</span><span class="params">(fraction: <span class="type">Float</span>, startValue: <span class="type">Int</span>, endValue: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> {</span><br><span class="line">                <span class="keyword">return</span> (startValue * (<span class="number">1</span> - fraction) + endValue * fraction).toInt()</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 弹幕行数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mRowCount = <span class="number">5</span></span><br><span class="line">    <span class="comment">// 文字大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mTextSize = <span class="number">15</span></span><br><span class="line">    <span class="comment">// 每行的相对布局列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mLayoutList = ArrayList&lt;RelativeLayout&gt;()</span><br><span class="line">    <span class="comment">// 视图宽度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mWidth = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 最近两次的弹幕位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mLastPos1 = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mLastPos2 = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> COLOR_ARRAY = arrayOf(</span><br><span class="line">        Color.RED, Color.GREEN, Color.BLUE, Color.YELLOW,</span><br><span class="line">        Color.CYAN, Color.MAGENTA, Color.LTGRAY, Color.GRAY,</span><br><span class="line">        Color.RED, Color.GREEN, Color.BLUE, Color.YELLOW,</span><br><span class="line">        Color.CYAN, Color.MAGENTA, Color.LTGRAY, Color.GRAY)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> {</span><br><span class="line">        orientation = LinearLayout.VERTICAL</span><br><span class="line">        setBackgroundColor(Color.TRANSPARENT)</span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until  mRowCount){</span><br><span class="line">            <span class="keyword">val</span> layout = RelativeLayout(context)</span><br><span class="line">            <span class="keyword">val</span> params = RelativeLayout.LayoutParams(LayoutParams.MATCH_PARENT,Utils.dip2px(context,<span class="number">40f</span>))</span><br><span class="line">            layout.layoutParams = params</span><br><span class="line">            layout.setBackgroundColor(Color.TRANSPARENT)</span><br><span class="line">            mLayoutList.add(layout)</span><br><span class="line">            <span class="comment">// 添加至当前视图</span></span><br><span class="line">            addView(layout)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onMeasure</span><span class="params">(widthMeasureSpec: <span class="type">Int</span>, heightMeasureSpec: <span class="type">Int</span>)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec)</span><br><span class="line">        <span class="comment">// 获取视图的实际宽度</span></span><br><span class="line">        mWidth = measuredWidth</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取本次弹幕的位置。不跟最近两次在同一行，避免挨得太近</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getPos</span><span class="params">()</span></span>:<span class="built_in">Int</span>{</span><br><span class="line">        <span class="keyword">var</span> pos = <span class="number">0</span></span><br><span class="line">        <span class="keyword">do</span> {</span><br><span class="line">            pos = Random().nextInt(mRowCount)</span><br><span class="line">        }<span class="keyword">while</span> (pos == mLastPos1 || pos == mLastPos2)</span><br><span class="line">        mLastPos2 = mLastPos1</span><br><span class="line">        mLastPos1 = pos</span><br><span class="line">        <span class="keyword">return</span> pos</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给弹幕视图添加评论</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">addComment</span><span class="params">(comment:<span class="type">String</span>)</span></span>{</span><br><span class="line">        <span class="comment">// 获取随机位置的相对布局</span></span><br><span class="line">        <span class="keyword">val</span> layout = mLayoutList[getPos()]</span><br><span class="line">        <span class="comment">// 获取评论文字的文本视图</span></span><br><span class="line">        <span class="keyword">val</span> tv = getCommentView(comment)</span><br><span class="line">        <span class="keyword">val</span> textWidth:<span class="built_in">Float</span> = MeasureUtil.getTextWidth(comment,Utils.dip2px(context,</span><br><span class="line">            mTextSize.toFloat()</span><br><span class="line">        ).toFloat())</span><br><span class="line">        layout.addView(tv)</span><br><span class="line">        <span class="comment">// 根据估值器和起止位置创建一个属性动画</span></span><br><span class="line">        <span class="keyword">val</span> anim = ValueAnimator.ofObject(MarginEvaluator(),-textWidth,mWidth)</span><br><span class="line">        <span class="comment">// 添加属性动画的刷新监听器</span></span><br><span class="line">        anim.addUpdateListener {</span><br><span class="line">            <span class="comment">//获取动画的当前值</span></span><br><span class="line">            <span class="keyword">val</span> margin = it.animatedValue</span><br><span class="line">            <span class="keyword">val</span> tvParams = tv.layoutParams <span class="keyword">as</span> RelativeLayout.LayoutParams</span><br><span class="line">            tvParams.rightMargin = margin <span class="keyword">as</span> <span class="built_in">Int</span></span><br><span class="line">            <span class="keyword">if</span> (margin &gt; mWidth - textWidth){</span><br><span class="line">                tvParams.leftMargin = (mWidth - textWidth - margin).toInt()</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 设置文本视图的布局参数</span></span><br><span class="line">            tv.layoutParams = tvParams</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//设置动画的播放目标</span></span><br><span class="line">        anim.setTarget(tv)</span><br><span class="line">        <span class="comment">//设置动画的播放时长</span></span><br><span class="line">        anim.duration = <span class="number">5000</span></span><br><span class="line">        <span class="comment">//设置属性动画的插值器</span></span><br><span class="line">        anim.interpolator = LinearInterpolator()</span><br><span class="line">        <span class="comment">//属性动画开始播放</span></span><br><span class="line">        anim.start()</span><br><span class="line">        <span class="comment">//添加属性动画的监听器</span></span><br><span class="line">        anim.addListener(<span class="keyword">object</span> :AnimatorListener{</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationStart</span><span class="params">(animation: <span class="type">Animator</span>?)</span></span> {</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationEnd</span><span class="params">(animation: <span class="type">Animator</span>?)</span></span> {</span><br><span class="line">                layout.removeView(tv)</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationCancel</span><span class="params">(animation: <span class="type">Animator</span>?)</span></span> {</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAnimationRepeat</span><span class="params">(animation: <span class="type">Animator</span>?)</span></span> {</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取评论内容的文本视图</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getCommentView</span><span class="params">(content:<span class="type">String</span>)</span></span>:TextView{</span><br><span class="line">        <span class="keyword">val</span> tv = TextView(context)</span><br><span class="line">        tv.apply {</span><br><span class="line">            text = content</span><br><span class="line">            textSize = mTextSize.toFloat()</span><br><span class="line">            setTextColor(getColorByContent(content))</span><br><span class="line">            isSingleLine = <span class="literal">true</span></span><br><span class="line">            setBackgroundColor(Color.TRANSPARENT)</span><br><span class="line">            <span class="keyword">val</span> tvParams = RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT)</span><br><span class="line">            <span class="comment">// 垂直方向居中</span></span><br><span class="line">            tvParams.addRule(RelativeLayout.CENTER_VERTICAL)</span><br><span class="line">            <span class="comment">//与上级布局右对齐</span></span><br><span class="line">            tvParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT)</span><br><span class="line">            <span class="comment">//设置文本视图的布局参数</span></span><br><span class="line">            tv.layoutParams = tvParams</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> tv</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据昵称获取对应的头像</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getColorByContent</span><span class="params">(content:<span class="type">String</span>)</span></span>: <span class="built_in">Int</span> {</span><br><span class="line">        <span class="keyword">val</span> md5:String = MD5Util.encrypt(content)</span><br><span class="line">        <span class="keyword">val</span> lastChar = md5[md5.lastIndex]</span><br><span class="line">        <span class="keyword">val</span> pos = <span class="keyword">if</span>(lastChar &gt;= <span class="string">'A'</span>) lastChar - <span class="string">'A'</span>+<span class="number">10</span> <span class="keyword">else</span> lastChar - <span class="string">'0'</span></span><br><span class="line">        <span class="keyword">return</span> COLOR_ARRAY[pos]</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="遮罩动画及滚动器"><a href="#遮罩动画及滚动器" class="headerlink" title="遮罩动画及滚动器"></a>遮罩动画及滚动器</h2><h3 id="画布的绘图层次"><a href="#画布的绘图层次" class="headerlink" title="画布的绘图层次"></a>画布的绘图层次</h3><p>​        画布Canvas上的绘图操作都是在同一个图层上进行的，这意味着如果存在重叠区域，后面绘制的图形就必然覆盖前面的图形。</p><p>图层模式的取值说明:</p><p><img src="/2022/12/12/Android%E5%8A%A8%E7%94%BB/5.png" alt=""></p><p>假设圆圈是先绘制的下层图形，正方形是后绘制的上层图形：</p><p><img src="/2022/12/12/Android%E5%8A%A8%E7%94%BB/6.png" alt=""></p><p>示例：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LayerView</span></span>(context: Context,attrs:AttributeSet):View(context, attrs) {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span>{</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">val</span> TAG = <span class="string">"LayerView"</span></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//声明上层的画笔对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mUpPaint = Paint()</span><br><span class="line">    <span class="comment">//声明下层的画笔对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mDownPaint = Paint()</span><br><span class="line">    <span class="comment">//声明遮罩的画笔对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mMaskPaint = Paint()</span><br><span class="line">    <span class="comment">//是否只绘制轮廓</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> onlyLine = <span class="literal">true</span></span><br><span class="line">    <span class="comment">//绘图模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> mMode:PorterDuff.Mode</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> {</span><br><span class="line">        mUpPaint.strokeWidth = <span class="number">5f</span></span><br><span class="line">        mUpPaint.color = Color.CYAN</span><br><span class="line">        mDownPaint.strokeWidth = <span class="number">5f</span></span><br><span class="line">        mDownPaint.color = Color.RED</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">setMode</span><span class="params">(mode:<span class="type">PorterDuff</span>.<span class="type">Mode</span>)</span></span>{</span><br><span class="line">        mMode = mode</span><br><span class="line">        onlyLine = <span class="literal">false</span></span><br><span class="line">        mUpPaint.style = Paint.Style.FILL</span><br><span class="line">        mDownPaint.style = Paint.Style.FILL</span><br><span class="line">        <span class="comment">// 立即刷新视图（线程安全方式）</span></span><br><span class="line">        postInvalidate()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint(<span class="meta-string">"DrawAllocation"</span>)</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDraw</span><span class="params">(canvas: <span class="type">Canvas</span>?)</span></span> {</span><br><span class="line">        <span class="comment">//获取视图的实际宽度</span></span><br><span class="line">        <span class="keyword">val</span> width = measuredWidth</span><br><span class="line">        <span class="comment">//获取视图的实际高度</span></span><br><span class="line">        <span class="keyword">val</span> height = measuredHeight</span><br><span class="line">        <span class="comment">// 只绘制轮廓</span></span><br><span class="line">        <span class="keyword">if</span> (onlyLine){</span><br><span class="line">            canvas?.apply {</span><br><span class="line">                drawRect((width/<span class="number">3</span>).toFloat(), (height/<span class="number">3</span>).toFloat(),</span><br><span class="line">                    (width*<span class="number">9</span>/<span class="number">10</span>).toFloat(), (height*<span class="number">9</span>/<span class="number">10</span>).toFloat(),mUpPaint)</span><br><span class="line">                drawCircle((width/<span class="number">3</span>).toFloat(), (height/<span class="number">3</span>).toFloat(),</span><br><span class="line">                    (height/<span class="number">3</span>).toFloat(),mDownPaint)</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span>(mMode != <span class="literal">null</span>) {</span><br><span class="line">            <span class="comment">// 绘制混合后的图像</span></span><br><span class="line">            <span class="comment">// 创建一个遮罩位图</span></span><br><span class="line">            <span class="keyword">val</span> mask = Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888)</span><br><span class="line">            <span class="comment">// 创建一个遮罩画布</span></span><br><span class="line">            <span class="keyword">val</span> canvasMask = Canvas(mask)</span><br><span class="line">            <span class="comment">//先绘制上层的矩形</span></span><br><span class="line">            canvasMask.drawRect(</span><br><span class="line">                (width/<span class="number">3</span>).toFloat(), (height/<span class="number">3</span>).toFloat(),</span><br><span class="line">                (width*<span class="number">9</span>/<span class="number">10</span>).toFloat(), (height*<span class="number">9</span>/<span class="number">10</span>).toFloat(),mUpPaint)</span><br><span class="line">            <span class="comment">//设置离屏缓存</span></span><br><span class="line">            <span class="comment">// 设置离屏缓存</span></span><br><span class="line">            <span class="keyword">val</span> saveLayer = canvas!!.saveLayer(</span><br><span class="line">                <span class="number">0f</span>,</span><br><span class="line">                <span class="number">0f</span>,</span><br><span class="line">                width.toFloat(),</span><br><span class="line">                height.toFloat(),</span><br><span class="line">                <span class="literal">null</span>,</span><br><span class="line">                Canvas.ALL_SAVE_FLAG</span><br><span class="line">            )</span><br><span class="line">            <span class="comment">// 再绘制下层的圆形</span></span><br><span class="line">            <span class="comment">// 再绘制下层的圆形</span></span><br><span class="line">            canvas.drawCircle(</span><br><span class="line">                (width / <span class="number">3</span>).toFloat(),</span><br><span class="line">                (height / <span class="number">3</span>).toFloat(),</span><br><span class="line">                (height / <span class="number">3</span>).toFloat(),</span><br><span class="line">                mDownPaint</span><br><span class="line">            )</span><br><span class="line">            mMaskPaint.xfermode = PorterDuffXfermode(mMode) <span class="comment">// 设置混合模式</span></span><br><span class="line"></span><br><span class="line">            canvas.drawBitmap(mask, <span class="number">0f</span>, <span class="number">0f</span>, mMaskPaint) <span class="comment">// 绘制源图像的遮罩</span></span><br><span class="line"></span><br><span class="line">            mMaskPaint.xfermode = <span class="literal">null</span> <span class="comment">// 还原混合模式</span></span><br><span class="line"></span><br><span class="line">            canvas.restoreToCount(saveLayer) <span class="comment">// 还原画布</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只显示线条轮廓</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setOnlyLine</span><span class="params">()</span></span> {</span><br><span class="line">        onlyLine = <span class="literal">true</span></span><br><span class="line">        mUpPaint.style = Paint.Style.STROKE <span class="comment">// 设置画笔的类型</span></span><br><span class="line">        mDownPaint.style = Paint.Style.STROKE <span class="comment">// 设置画笔的类型</span></span><br><span class="line">        postInvalidate() <span class="comment">// 立即刷新视图（线程安全方式）</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="实现百叶窗视图"><a href="#实现百叶窗视图" class="headerlink" title="实现百叶窗视图"></a>实现百叶窗视图</h3><p>​        首先定义一个百叶窗视图，并重写onDraw方法，给遮罩画布描绘若干矩形叶片，每次绘制的叶片大小由比率参数决定。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//百叶窗视图</span></span><br><span class="line"><span class="meta">@SuppressLint</span>(<span class="string">"DrawAllocation"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShutterView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TAG = <span class="string">"ShutterView"</span>;</span><br><span class="line">    <span class="keyword">private</span> Paint mPaint = <span class="keyword">new</span> Paint(); <span class="comment">// 声明一个画笔对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mOriention = LinearLayout.HORIZONTAL; <span class="comment">// 动画方向</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mLeafCount = <span class="number">10</span>; <span class="comment">// 叶片的数量</span></span><br><span class="line">    <span class="keyword">private</span> PorterDuff.Mode mMode = PorterDuff.Mode.DST_IN; <span class="comment">// 绘图模式为只展示交集</span></span><br><span class="line">    <span class="keyword">private</span> Bitmap mBitmap; <span class="comment">// 声明一个位图对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mRatio = <span class="number">0</span>; <span class="comment">// 绘制的比率</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShutterView</span><span class="params">(Context context)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShutterView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置百叶窗的方向</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOriention</span><span class="params">(<span class="keyword">int</span> oriention)</span> </span>{</span><br><span class="line">        mOriention = oriention;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置百叶窗的叶片数量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeafCount</span><span class="params">(<span class="keyword">int</span> leaf_count)</span> </span>{</span><br><span class="line">        mLeafCount = leaf_count;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置绘图模式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMode</span><span class="params">(PorterDuff.Mode mode)</span> </span>{</span><br><span class="line">        mMode = mode;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置位图对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImageBitmap</span><span class="params">(Bitmap bitmap)</span> </span>{</span><br><span class="line">        mBitmap = bitmap;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置绘图比率</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRatio</span><span class="params">(<span class="keyword">int</span> ratio)</span> </span>{</span><br><span class="line">        mRatio = ratio;</span><br><span class="line">        postInvalidate(); <span class="comment">// 立即刷新视图（线程安全方式）</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (mBitmap == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> width = getMeasuredWidth(); <span class="comment">// 获取视图的实际宽度</span></span><br><span class="line">        <span class="keyword">int</span> height = getMeasuredHeight(); <span class="comment">// 获取视图的实际高度</span></span><br><span class="line">        <span class="comment">// 创建一个遮罩位图</span></span><br><span class="line">        Bitmap mask = Bitmap.createBitmap(width, height, mBitmap.getConfig());</span><br><span class="line">        Canvas canvasMask = <span class="keyword">new</span> Canvas(mask); <span class="comment">// 创建一个遮罩画布</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mLeafCount; i++) {</span><br><span class="line">            <span class="keyword">if</span> (mOriention == LinearLayout.HORIZONTAL) { <span class="comment">// 水平方向</span></span><br><span class="line">                <span class="keyword">int</span> column_width = (<span class="keyword">int</span>) Math.ceil(width * <span class="number">1f</span> / mLeafCount);</span><br><span class="line">                <span class="keyword">int</span> left = column_width * i;</span><br><span class="line">                <span class="keyword">int</span> right = left + column_width * mRatio / <span class="number">100</span>;</span><br><span class="line">                <span class="comment">// 在遮罩画布上绘制各矩形叶片</span></span><br><span class="line">                canvasMask.drawRect(left, <span class="number">0</span>, right, height, mPaint);</span><br><span class="line">            } <span class="keyword">else</span> { <span class="comment">// 垂直方向</span></span><br><span class="line">                <span class="keyword">int</span> row_height = (<span class="keyword">int</span>) Math.ceil(height * <span class="number">1f</span> / mLeafCount);</span><br><span class="line">                <span class="keyword">int</span> top = row_height * i;</span><br><span class="line">                <span class="keyword">int</span> bottom = top + row_height * mRatio / <span class="number">100</span>;</span><br><span class="line">                <span class="comment">// 在遮罩画布上绘制各矩形叶片</span></span><br><span class="line">                canvasMask.drawRect(<span class="number">0</span>, top, width, bottom, mPaint);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 设置离屏缓存</span></span><br><span class="line">        <span class="keyword">int</span> saveLayer = canvas.saveLayer(<span class="number">0</span>, <span class="number">0</span>, width, height, <span class="keyword">null</span>, Canvas.ALL_SAVE_FLAG);</span><br><span class="line">        Rect rect = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, width, width * mBitmap.getHeight() / mBitmap.getWidth());</span><br><span class="line">        canvas.drawBitmap(mBitmap, <span class="keyword">null</span>, rect, mPaint); <span class="comment">// 绘制目标图像</span></span><br><span class="line">        mPaint.setXfermode(<span class="keyword">new</span> PorterDuffXfermode(mMode)); <span class="comment">// 设置混合模式</span></span><br><span class="line">        canvas.drawBitmap(mask, <span class="number">0</span>, <span class="number">0</span>, mPaint); <span class="comment">// 再绘制源图像的遮罩</span></span><br><span class="line">        mPaint.setXfermode(<span class="keyword">null</span>); <span class="comment">// 还原混合模式</span></span><br><span class="line">        canvas.restoreToCount(saveLayer); <span class="comment">// 还原画布</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​        然后在布局文件中添加ShutterView节点，并在对应的活动页面调用setOriention方法设置百叶窗的方向，调用setLeafCount方法设置百叶窗的叶片数量。再利用属性动画渐进设置ratio属性，使整个百叶窗的各个叶片逐步合上，从而实现合上百叶窗的动画特效。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShutterActivity</span> : <span class="type">BaseActivity</span>&lt;<span class="type">ActivityShutterBinding</span>&gt;</span>() {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> shutterArray = arrayOf(<span class="string">"水平五叶"</span>, <span class="string">"水平十叶"</span>, <span class="string">"水平二十叶"</span>,</span><br><span class="line">        <span class="string">"垂直五叶"</span>, <span class="string">"垂直十叶"</span>, <span class="string">"垂直二十叶"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> ActivityShutterBinding.<span class="title">initBinding</span><span class="params">()</span></span> {</span><br><span class="line">        initView()</span><br><span class="line">        initLayerSpinner()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initView</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">val</span> bitmap = BitmapFactory.decodeResource(resources,R.drawable.dlam)</span><br><span class="line">        <span class="comment">// 设置百叶窗视图的位图对象</span></span><br><span class="line">        mBinding.svShutter.setImageBitmap(bitmap)</span><br><span class="line">        <span class="keyword">val</span> params = mBinding.svShutter.layoutParams</span><br><span class="line">        params.height = Utils.getScreenWidth(<span class="keyword">this</span>) * bitmap.height / bitmap.width</span><br><span class="line">        <span class="comment">// 设置百叶窗视图的布局参数</span></span><br><span class="line">        mBinding.svShutter.layoutParams = params</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initLayerSpinner</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">val</span> modeAdapter = ArrayAdapter(<span class="keyword">this</span>,R.layout.item_select,shutterArray)</span><br><span class="line">        mBinding.spShutter.apply {</span><br><span class="line">            prompt = <span class="string">"请选择百叶窗动画类型"</span></span><br><span class="line">            adapter = modeAdapter</span><br><span class="line">            onItemSelectedListener = <span class="keyword">object</span> : AdapterView.OnItemSelectedListener {</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onItemSelected</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                    parent: <span class="type">AdapterView</span>&lt;*&gt;?,</span></span></span><br><span class="line"><span class="function"><span class="params">                    view: <span class="type">View</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">                    position: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                    id: <span class="type">Long</span></span></span></span><br><span class="line"><span class="function"><span class="params">                )</span></span> {</span><br><span class="line">                    <span class="comment">// 设置百叶窗视图的动画方向</span></span><br><span class="line">                    mBinding.svShutter.setOriention(<span class="keyword">if</span> (position&lt;<span class="number">3</span>) LinearLayout.HORIZONTAL <span class="keyword">else</span> LinearLayout.VERTICAL)</span><br><span class="line">                    <span class="keyword">if</span> (position ==<span class="number">0</span> || position ==<span class="number">3</span>){</span><br><span class="line">                        <span class="comment">// 设置百叶窗的叶片数量</span></span><br><span class="line">                        mBinding.svShutter.setLeafCount(<span class="number">5</span>)</span><br><span class="line">                    } <span class="keyword">else</span> <span class="keyword">if</span> (position == <span class="number">1</span> || position == <span class="number">4</span>){</span><br><span class="line">                        mBinding.svShutter.setLeafCount(<span class="number">10</span>)</span><br><span class="line">                    } <span class="keyword">else</span> <span class="keyword">if</span> (position == <span class="number">2</span> || position == <span class="number">5</span>){</span><br><span class="line">                        mBinding.svShutter.setLeafCount(<span class="number">20</span>)</span><br><span class="line">                    }</span><br><span class="line">                    <span class="comment">// 构造一个按比率逐步展开的属性动画</span></span><br><span class="line">                    <span class="keyword">val</span> anim = ObjectAnimator.ofInt(mBinding.svShutter,<span class="string">"ratio"</span>,<span class="number">0</span>,<span class="number">100</span>)</span><br><span class="line">                    <span class="comment">// 设置动画的播放时长</span></span><br><span class="line">                    anim.duration = <span class="number">3000</span></span><br><span class="line">                    anim.start()</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onNothingSelected</span><span class="params">(parent: <span class="type">AdapterView</span>&lt;*&gt;?)</span></span> {}</span><br><span class="line">            }</span><br><span class="line">            setSelection(<span class="number">0</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="实现马赛克动画"><a href="#实现马赛克动画" class="headerlink" title="实现马赛克动画"></a>实现马赛克动画</h3><p>基于同样的绘制原理，可以依样画瓢实现马赛克动画：</p><p>马赛克视图：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 马赛克动画视图</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressLint</span>(<span class="string">"DrawAllocation"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MosaicView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TAG = <span class="string">"MosaicView"</span>;</span><br><span class="line">    <span class="keyword">private</span> Paint mPaint = <span class="keyword">new</span> Paint(); <span class="comment">// 声明一个画笔对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mOriention = LinearLayout.HORIZONTAL; <span class="comment">// 动画方向</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mGridCount = <span class="number">20</span>; <span class="comment">// 格子的数量</span></span><br><span class="line">    <span class="keyword">private</span> PorterDuff.Mode mMode = PorterDuff.Mode.DST_IN; <span class="comment">// 绘图模式为只展示交集</span></span><br><span class="line">    <span class="keyword">private</span> Bitmap mBitmap; <span class="comment">// 声明一个位图对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mRatio = <span class="number">0</span>; <span class="comment">// 绘制的比率</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mOffset = <span class="number">5</span>; <span class="comment">// 偏差的比例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> FENMU = <span class="number">100</span>; <span class="comment">// 计算比例的分母，其实分母的英语叫做denominator</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MosaicView</span><span class="params">(Context context)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MosaicView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置马赛克的方向</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOriention</span><span class="params">(<span class="keyword">int</span> oriention)</span> </span>{</span><br><span class="line">        mOriention = oriention;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置马赛克的格子数量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGridCount</span><span class="params">(<span class="keyword">int</span> grid_count)</span> </span>{</span><br><span class="line">        mGridCount = grid_count;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置偏差比例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOffset</span><span class="params">(<span class="keyword">int</span> offset)</span> </span>{</span><br><span class="line">        mOffset = offset;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置绘图模式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMode</span><span class="params">(PorterDuff.Mode mode)</span> </span>{</span><br><span class="line">        mMode = mode;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置位图对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImageBitmap</span><span class="params">(Bitmap bitmap)</span> </span>{</span><br><span class="line">        mBitmap = bitmap;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置绘图比率</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRatio</span><span class="params">(<span class="keyword">int</span> ratio)</span> </span>{</span><br><span class="line">        mRatio = ratio;</span><br><span class="line">        postInvalidate(); <span class="comment">// 立即刷新视图（线程安全方式）</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (mBitmap == <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> width = getMeasuredWidth(); <span class="comment">// 获取视图的实际宽度</span></span><br><span class="line">        <span class="keyword">int</span> height = getMeasuredHeight(); <span class="comment">// 获取视图的实际高度</span></span><br><span class="line">        <span class="comment">// 创建一个遮罩位图</span></span><br><span class="line">        Bitmap mask = Bitmap.createBitmap(width, height, mBitmap.getConfig());</span><br><span class="line">        Canvas canvasMask = <span class="keyword">new</span> Canvas(mask); <span class="comment">// 创建一个遮罩画布</span></span><br><span class="line">        <span class="keyword">if</span> (mOriention == LinearLayout.HORIZONTAL) { <span class="comment">// 水平方向</span></span><br><span class="line">            <span class="keyword">float</span> grid_width = height / mGridCount;</span><br><span class="line">            <span class="keyword">int</span> column_count = (<span class="keyword">int</span>) Math.ceil(width / grid_width);</span><br><span class="line">            <span class="keyword">int</span> total_count = mGridCount * column_count;</span><br><span class="line">            <span class="keyword">int</span> draw_count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; column_count; i++) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; mGridCount; j++) {</span><br><span class="line">                    <span class="keyword">int</span> now_ratio = (<span class="keyword">int</span>) ((mGridCount * i + j) * FENMU / total_count);</span><br><span class="line">                    <span class="keyword">if</span> (now_ratio &lt; mRatio - mOffset</span><br><span class="line">                            || (now_ratio &gt;= mRatio - mOffset &amp;&amp; now_ratio &lt; mRatio &amp;&amp;</span><br><span class="line">                            ((j % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">2</span> == <span class="number">0</span>) || (j % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; i % <span class="number">2</span> == <span class="number">1</span>)))</span><br><span class="line">                            || (now_ratio &gt;= mRatio &amp;&amp; now_ratio &lt; mRatio + mOffset &amp;&amp;</span><br><span class="line">                            ((j % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">2</span> == <span class="number">1</span>) || (j % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; i % <span class="number">2</span> == <span class="number">0</span>)))) {</span><br><span class="line">                        <span class="keyword">int</span> left = (<span class="keyword">int</span>) (grid_width * i);</span><br><span class="line">                        <span class="keyword">int</span> top = (<span class="keyword">int</span>) (grid_width * j);</span><br><span class="line">                        <span class="comment">// 在遮罩画布上绘制各方形格子</span></span><br><span class="line">                        canvasMask.drawRect(left, top, left + grid_width, top + grid_width, mPaint);</span><br><span class="line">                        <span class="keyword">if</span> (j &lt; mGridCount) {</span><br><span class="line">                            draw_count++;</span><br><span class="line">                        }</span><br><span class="line">                        <span class="keyword">if</span> (draw_count * FENMU / total_count &gt; mRatio) {</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (draw_count * FENMU / total_count &gt; mRatio) {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> { <span class="comment">// 垂直方向</span></span><br><span class="line">            <span class="keyword">float</span> grid_width = width / mGridCount;</span><br><span class="line">            <span class="keyword">int</span> row_count = (<span class="keyword">int</span>) Math.ceil(height / grid_width);</span><br><span class="line">            <span class="keyword">int</span> total_count = mGridCount * row_count;</span><br><span class="line">            <span class="keyword">int</span> draw_count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row_count; i++) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; mGridCount; j++) {</span><br><span class="line">                    <span class="keyword">int</span> now_ratio = (<span class="keyword">int</span>) ((mGridCount * i + j) * FENMU / total_count);</span><br><span class="line">                    <span class="keyword">if</span> (now_ratio &lt; mRatio - mOffset</span><br><span class="line">                            || (now_ratio &gt;= mRatio - mOffset &amp;&amp; now_ratio &lt; mRatio &amp;&amp;</span><br><span class="line">                            ((j % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">2</span> == <span class="number">0</span>) || (j % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; i % <span class="number">2</span> == <span class="number">1</span>)))</span><br><span class="line">                            || (now_ratio &gt;= mRatio &amp;&amp; now_ratio &lt; mRatio + mOffset &amp;&amp;</span><br><span class="line">                            ((j % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">2</span> == <span class="number">1</span>) || (j % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; i % <span class="number">2</span> == <span class="number">0</span>)))) {</span><br><span class="line">                        <span class="keyword">int</span> left = (<span class="keyword">int</span>) (grid_width * j);</span><br><span class="line">                        <span class="keyword">int</span> top = (<span class="keyword">int</span>) (grid_width * i);</span><br><span class="line">                        <span class="comment">// 在遮罩画布上绘制各方形格子</span></span><br><span class="line">                        canvasMask.drawRect(left, top, left + grid_width, top + grid_width, mPaint);</span><br><span class="line">                        <span class="keyword">if</span> (j &lt; mGridCount) {</span><br><span class="line">                            draw_count++;</span><br><span class="line">                        }</span><br><span class="line">                        <span class="keyword">if</span> (draw_count * FENMU / total_count &gt; mRatio) {</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (draw_count * FENMU / total_count &gt; mRatio) {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 设置离屏缓存</span></span><br><span class="line">        <span class="keyword">int</span> saveLayer = canvas.saveLayer(<span class="number">0</span>, <span class="number">0</span>, width, height, <span class="keyword">null</span>, Canvas.ALL_SAVE_FLAG);</span><br><span class="line">        Rect rect = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, width, width * mBitmap.getHeight() / mBitmap.getWidth());</span><br><span class="line">        canvas.drawBitmap(mBitmap, <span class="keyword">null</span>, rect, mPaint); <span class="comment">// 绘制目标图像</span></span><br><span class="line">        mPaint.setXfermode(<span class="keyword">new</span> PorterDuffXfermode(mMode)); <span class="comment">// 设置混合模式</span></span><br><span class="line">        canvas.drawBitmap(mask, <span class="number">0</span>, <span class="number">0</span>, mPaint); <span class="comment">// 再绘制源图像的遮罩</span></span><br><span class="line">        mPaint.setXfermode(<span class="keyword">null</span>); <span class="comment">// 还原混合模式</span></span><br><span class="line">        canvas.restoreToCount(saveLayer); <span class="comment">// 还原画布</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​        在布局文件中添加MosaicView节点，并在对应的活动页面调用setGridCount方法设置马赛克的格子数量，再利用属性动画渐进设置ratio属性，使得视图中的马赛克逐步清晰显现。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MosaicActivity</span> : <span class="type">BaseActivity</span>&lt;<span class="type">ActivityMosaicBinding</span>&gt;</span>() {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mosaicArray = arrayOf(<span class="string">"水平二十格"</span>, <span class="string">"水平三十格"</span>, <span class="string">"水平四十格"</span>,</span><br><span class="line">        <span class="string">"垂直二十格"</span>, <span class="string">"垂直三十格"</span>, <span class="string">"垂直四十格"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> ActivityMosaicBinding.<span class="title">initBinding</span><span class="params">()</span></span> {</span><br><span class="line">        initView()</span><br><span class="line">        initLayerSpinner()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initView</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">val</span> bitmap = BitmapFactory.decodeResource(resources,R.drawable.dlam)</span><br><span class="line">        <span class="comment">// 设置百叶窗视图的位图对象</span></span><br><span class="line">        mBinding.mvMosaic.setImageBitmap(bitmap)</span><br><span class="line">        <span class="keyword">val</span> params = mBinding.mvMosaic.layoutParams</span><br><span class="line">        params.height = Utils.getScreenWidth(<span class="keyword">this</span>) * bitmap.height / bitmap.width</span><br><span class="line">        <span class="comment">// 设置百叶窗视图的布局参数</span></span><br><span class="line">        mBinding.mvMosaic.layoutParams = params</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initLayerSpinner</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">val</span> modeAdapter = ArrayAdapter(<span class="keyword">this</span>,R.layout.item_select,mosaicArray)</span><br><span class="line">        mBinding.spMosaic.apply {</span><br><span class="line">            prompt = <span class="string">"请选择百叶窗动画类型"</span></span><br><span class="line">            adapter = modeAdapter</span><br><span class="line">            onItemSelectedListener = <span class="keyword">object</span> : AdapterView.OnItemSelectedListener {</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onItemSelected</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                    parent: <span class="type">AdapterView</span>&lt;*&gt;?,</span></span></span><br><span class="line"><span class="function"><span class="params">                    view: <span class="type">View</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">                    position: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                    id: <span class="type">Long</span></span></span></span><br><span class="line"><span class="function"><span class="params">                )</span></span> {</span><br><span class="line">                    <span class="comment">// 设置马赛克视图的动画方向</span></span><br><span class="line">                    mBinding.mvMosaic.setOriention(<span class="keyword">if</span> (position&lt;<span class="number">3</span>) LinearLayout.HORIZONTAL <span class="keyword">else</span> LinearLayout.VERTICAL)</span><br><span class="line">                    <span class="keyword">if</span> (position ==<span class="number">0</span> || position ==<span class="number">3</span>){</span><br><span class="line">                        <span class="comment">// 设置马赛克的格子数量</span></span><br><span class="line">                        mBinding.mvMosaic.setGridCount(<span class="number">20</span>)</span><br><span class="line">                    } <span class="keyword">else</span> <span class="keyword">if</span> (position == <span class="number">1</span> || position == <span class="number">4</span>){</span><br><span class="line">                        mBinding.mvMosaic.setGridCount(<span class="number">30</span>)</span><br><span class="line">                    } <span class="keyword">else</span> <span class="keyword">if</span> (position == <span class="number">2</span> || position == <span class="number">5</span>){</span><br><span class="line">                        mBinding.mvMosaic.setGridCount(<span class="number">40</span>)</span><br><span class="line">                    }</span><br><span class="line">                    <span class="comment">// 起始值和结束值要超出一些范围，这样头尾的马赛克看起来才是连贯的</span></span><br><span class="line">                    <span class="keyword">val</span> offset = <span class="number">5</span></span><br><span class="line">                    <span class="comment">// 设置偏差比例</span></span><br><span class="line">                    mBinding.mvMosaic.setOffset(offset)</span><br><span class="line">                    <span class="comment">// 构造一个按比率逐步展开的属性动画</span></span><br><span class="line">                    <span class="keyword">val</span> anim = ObjectAnimator.ofInt(mBinding.mvMosaic,<span class="string">"ratio"</span>,<span class="number">0</span> - offset,<span class="number">101</span> + offset)</span><br><span class="line">                    <span class="comment">// 设置动画的播放时长</span></span><br><span class="line">                    anim.duration = <span class="number">3000</span></span><br><span class="line">                    anim.start()</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onNothingSelected</span><span class="params">(parent: <span class="type">AdapterView</span>&lt;*&gt;?)</span></span> {}</span><br><span class="line">            }</span><br><span class="line">            setSelection(<span class="number">0</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;Android的动画分为三大类：&lt;strong&gt;帧动画&lt;/strong&gt;、&lt;strong&gt;补间动画&lt;/strong&gt;和&lt;strong&gt;属性动画&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;帧动画&quot;&gt;&lt;a href=&quot;#帧动画&quot; class=&quot;headerlink&quot; title=&quot;帧动画&quot;&gt;&lt;/a&gt;帧动画&lt;/h2&gt;&lt;p&gt;​        帧动画是实现原理最简单的一种，跟现实生活中的电影胶卷类似，都是在短时间内连续播放多张图片，从而模拟动态画面的效果。&lt;/p&gt;
&lt;h3 id=&quot;帧动画的实现&quot;&gt;&lt;a href=&quot;#帧动画的实现&quot; class=&quot;headerlink&quot; title=&quot;帧动画的实现&quot;&gt;&lt;/a&gt;帧动画的实现&lt;/h3&gt;&lt;h4 id=&quot;通过代码实现&quot;&gt;&lt;a href=&quot;#通过代码实现&quot; class=&quot;headerlink&quot; title=&quot;通过代码实现&quot;&gt;&lt;/a&gt;通过代码实现&lt;/h4&gt;&lt;p&gt;​        帧动画由动画图形&lt;strong&gt;AnimationDrawable&lt;/strong&gt;生成。下面是AnimationDrawable的常用方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;addFrame：添加一幅图片帧，并指定该帧的持续时间（单位毫秒）。&lt;/li&gt;
&lt;li&gt;setOneShot：设置是否只播放一次。为true表示只播放一次，为false表示循环播放。&lt;/li&gt;
&lt;li&gt;start：开始播放。注意，设置宿主视图后才能进行播放。&lt;/li&gt;
&lt;li&gt;stop：停止播放。&lt;/li&gt;
&lt;li&gt;isRunning：判断是否正在播放。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​      有了动画图形，还得有一个宿主视图显示该图形，一般使用图像视图ImageView承载AnimationDrawable，即&lt;strong&gt;调用ImageView对象的setImageDrawable方法将动画图形加载到图像视图中&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * 代码方式显示帧动画&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@SuppressLint(&lt;span class=&quot;meta-string&quot;&gt;&quot;UseCompatLoadingForDrawables&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;showFrameAnimByCode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//帧动画需要把每帧图片加入AnimationDrawable队列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    animationDrawable.apply {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//添加一幅图片帧，并指定该帧的持续时间（单位毫秒）。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        addFrame(resources.getDrawable(R.drawable.flow_p1,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;@FrameAnimActivity&lt;/span&gt;.theme),&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        addFrame(resources.getDrawable(R.drawable.flow_p2,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;@FrameAnimActivity&lt;/span&gt;.theme),&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        addFrame(resources.getDrawable(R.drawable.flow_p3,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;@FrameAnimActivity&lt;/span&gt;.theme),&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        addFrame(resources.getDrawable(R.drawable.flow_p4,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;@FrameAnimActivity&lt;/span&gt;.theme),&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        addFrame(resources.getDrawable(R.drawable.flow_p5,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;@FrameAnimActivity&lt;/span&gt;.theme),&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        addFrame(resources.getDrawable(R.drawable.flow_p6,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;@FrameAnimActivity&lt;/span&gt;.theme),&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        addFrame(resources.getDrawable(R.drawable.flow_p7,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;@FrameAnimActivity&lt;/span&gt;.theme),&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        addFrame(resources.getDrawable(R.drawable.flow_p8,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;@FrameAnimActivity&lt;/span&gt;.theme),&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//setOneShot为true表示只播放一次，为false表示循环播放&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        isOneShot = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mBinding.ivFrameAnim.setImageDrawable(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        start()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;通过xml方式实现&quot;&gt;&lt;a href=&quot;#通过xml方式实现&quot; class=&quot;headerlink&quot; title=&quot;通过xml方式实现&quot;&gt;&lt;/a&gt;通过xml方式实现&lt;/h4&gt;&lt;p&gt;​        先把帧图片的排列定义在一个XML文件中；然后在代码中直接调用ImageView对象的setImageResource方法，加载帧动画的图形定义文件；再调用ImageView对象的getDrawable方法，获得动画图形的实例，并进行后续的播放操作。&lt;/p&gt;
&lt;p&gt;如:定义drawable文件，frame_anim.xml:&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;animation-list&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns:android&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:oneshot&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;false&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:drawable&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@drawable/flow_p1&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:duration&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;50&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:drawable&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@drawable/flow_p2&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:duration&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;50&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:drawable&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@drawable/flow_p3&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:duration&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;50&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:drawable&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@drawable/flow_p4&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:duration&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;50&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:drawable&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@drawable/flow_p5&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:duration&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;50&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:drawable&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@drawable/flow_p6&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:duration&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;50&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:drawable&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@drawable/flow_p7&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:duration&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;50&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;item&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:drawable&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@drawable/flow_p8&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:duration&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;50&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;animation-list&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
    
      <category term="Android" scheme="https://hluck.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin Flow入门</title>
    <link href="https://hluck.github.io/2022/10/27/Kotlin%20Flow%E5%85%A5%E9%97%A8/"/>
    <id>https://hluck.github.io/2022/10/27/Kotlin%20Flow%E5%85%A5%E9%97%A8/</id>
    <published>2022-10-27T01:54:22.902Z</published>
    <updated>2022-10-30T05:20:28.285Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h1 id="Kotlin-Flow-入门篇"><a href="#Kotlin-Flow-入门篇" class="headerlink" title="Kotlin Flow(入门篇)"></a>Kotlin Flow(入门篇)</h1><p>文章摘自：<a href="https://mp.weixin.qq.com/s/TRr_isgU7VVVuJ9rOMZUhw" target="_blank" rel="noopener">Kotlin Flow响应式编程，基础知识入门-郭霖</a></p><hr><p>title: Kotlin和响应式编程<br>tag: Kotlin<br>top: 66</p><hr><p>响应式思维：</p><p>​    比如说有一头小牛住在山脚下，山上有一个湖，小牛每天需要跑很远的路拎着水桶去湖边打水。</p><p><img src="/2022/10/27/Kotlin%20Flow%E5%85%A5%E9%97%A8/1.png" alt=""></p><p>​        每天要跑很远的路就算了，关键是这个湖还时不时会干枯掉，有时小牛到了湖边发现湖已经干了，就完全白跑了一趟。</p><a id="more"></a><p><img src="/2022/10/27/Kotlin%20Flow%E5%85%A5%E9%97%A8/2.png" alt=""></p><p>​        时间久了明眼人都能发现，这种打水的方式太愚蠢了。为什么不多花点时间去搞好基建，架一条从湖边到山脚下的水管，这样小牛就再也不用跑很远的路去打水了，每次想喝水只要打开水龙头就可以了。而且判断湖有没有干枯也可以通过打开水龙头看看有没有水来判断。</p><p><img src="/2022/10/27/Kotlin%20Flow%E5%85%A5%E9%97%A8/3.png" alt=""></p><p>​        并且架设好了一条管道之后，以后也可以再去轻松架接其他管道。对于最终的用水端而言，这个过程甚至可以是无感知的，因为他只需要负责打开和关闭水龙头即可。</p><p><img src="/2022/10/27/Kotlin%20Flow%E5%85%A5%E9%97%A8/4.png" alt=""></p><p>​        在上述的这个例子当中，拎着水桶去湖边打水就可以类比为我们平时一般的编程方式，需要什么东西就去调用对应的函数。而<strong>通过架设水管引流，在水龙头接水则可以类比为当下最流行的响应式编程</strong>。</p><p>​        拿打水的例子来说，调用一个函数去打水这很简单，但如果这个打水的过程是非常耗时的怎么办？在主线程里调用可能就会让程序卡死了。因此这个时候你就需要考虑开子线程去打水，然后还要处理线程回调结果等一些事务。</p><p>​        但如果是响应式编程的话，你需要做的仍然只是开开水龙头就可以了。</p><h2 id="Flow基本用法"><a href="#Flow基本用法" class="headerlink" title="Flow基本用法"></a>Flow基本用法</h2><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dependencies {</span><br><span class="line">    ...</span><br><span class="line">    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1"</span><br><span class="line">    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1"</span><br><span class="line">    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'</span><br><span class="line">    implementation "androidx.activity:activity-ktx:1.6.0"</span><br><span class="line">    implementation "androidx.fragment:fragment-ktx:1.5.3"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>接下来开始定义布局，布局文件activity_main.xml中的内容也非常简单，一个Button用于开始计时，一个TextView用于显示时间：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/text_view"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"20sp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintVertical_chainStyle</span>=<span class="string">"packed"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toTopOf</span>=<span class="string">"@+id/button"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/button"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Start"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintVertical_chainStyle</span>=<span class="string">"packed"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@id/text_view"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​        回想一下刚才的类比，响应式编程就像是使用水龙头来接水一样。那么整个过程中最重要的部分一共有3处：水源、水管和水龙头。</p><p>​    其中，<strong>水源也就是我们的数据源</strong>，这部分是需要自己处理的。</p><p>​    <strong>水龙头是最终的接收端</strong>，可能是要展示给用户的，这部分也需要自己处理。</p><p>​    而<strong>水管则是实现响应式编程的基建部分，这部分是由Flow封装好提供给我们的</strong>，并不需要我们自己去实现。</p></li></ol><p><strong>先从水源开始写起</strong>，定义一个MainViewModel类，并继承自ViewModel，代码如下所示：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainViewModel</span> : <span class="type">ViewModel</span></span>() {</span><br><span class="line">    <span class="keyword">val</span> timeFlow = flow {</span><br><span class="line">        <span class="keyword">var</span> time = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) {</span><br><span class="line">            emit(time)</span><br><span class="line">            delay(<span class="number">1000</span>)</span><br><span class="line">            time++</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​        这里的delay函数是一个协程当中的挂起函数，只有在协程作用域或其他挂起函数中才能调用。因此可以看出，flow构建函数还会提供一个挂起函数的上下文给到函数体内部。</p><p>​        使用flow构建函数构建出的Flow是属于Cold Flow，也叫做冷流。所谓<strong>冷流就是在没有任何接受端的情况下，Flow是不会工作的。只有在有接受端（水龙头打开）的情况下，Flow函数体中的代码就会自动开始执行。</strong></p><p>实现水龙头部分，代码如下所示：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mainViewModel <span class="keyword">by</span> viewModels&lt;MainViewModel&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        <span class="keyword">val</span> textView = findViewById&lt;TextView&gt;(R.id.text_view)</span><br><span class="line">        <span class="keyword">val</span> button = findViewById&lt;Button&gt;(R.id.button)</span><br><span class="line">        button.setOnClickListener {</span><br><span class="line">            lifecycleScope.launch {</span><br><span class="line">                mainViewModel.timeFlow.collect { time -&gt;</span><br><span class="line">                    textView.text = time.toString()</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​        <strong>由于Flow的collect函数是一个挂起函数，因此必须在协程作用域或其他挂起函数中才能调用</strong>。这里借助lifecycleScope启动了一个协程作用域来实现。</p><p>​        只要调用了collect函数之后就相当于进入了一个死循环，它的下一行代码是永远都不会执行到的。因此，如果你的代码中有多个Flow需要collect，下面这种写法就是完全错误的：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lifecycleScope.launch {</span><br><span class="line">    mainViewModel.flow1.collect {</span><br><span class="line">        ...</span><br><span class="line">    }</span><br><span class="line">    mainViewModel.flow2.collect {</span><br><span class="line">        ...</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​        这种写法flow2中的数据是无法得到更新的，因为它压根就执行不到。</p><p>​        正确的写法应该是借助launch函数再启动子协程去collect，这样不同子协程之间就互不影响了：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">lifecycleScope.launch {</span><br><span class="line">    launch {</span><br><span class="line">        mainViewModel.flow1.collect {</span><br><span class="line">            ...</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    launch {</span><br><span class="line">        mainViewModel.flow2.collect {</span><br><span class="line">            ...</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="流速不均匀问题"><a href="#流速不均匀问题" class="headerlink" title="流速不均匀问题"></a>流速不均匀问题</h2><p>​        由于Flow是一种基于观察者模式的响应式编程模型，水源发出了一个数据，水龙头这边就会收到一个数据。但是水龙头处理数据的速度不一定和水源发出数据的速度是一致的，如果水龙头处理速度过慢，就可能出现管道阻塞的现象。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mainViewModel <span class="keyword">by</span> viewModels&lt;MainViewModel&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        <span class="keyword">val</span> textView = findViewById&lt;TextView&gt;(R.id.text_view)</span><br><span class="line">        <span class="keyword">val</span> button = findViewById&lt;Button&gt;(R.id.button)</span><br><span class="line">        button.setOnClickListener {</span><br><span class="line">            lifecycleScope.launch {</span><br><span class="line">                mainViewModel.timeFlow.collect { time -&gt;</span><br><span class="line">                    textView.text = time.toString()</span><br><span class="line">                    delay(<span class="number">3000</span>)</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​        修改后，在水源处是每秒种发送一条数据，结果在水龙头这里要3秒钟才能处理一条数据。现在每3秒钟计时器才会更新一次。如此一来，我们的计时器就完全不准了。</p><p>解决思路：只要有更新的数据过来，如果上次的数据还没有处理完，那么我们就直接把它取消掉，立刻去处理最新的数据即可。</p><p>在Flow当中实现这样的功能，只需要借助collectLatest函数就能做到：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mainViewModel <span class="keyword">by</span> viewModels&lt;MainViewModel&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        <span class="keyword">val</span> textView = findViewById&lt;TextView&gt;(R.id.text_view)</span><br><span class="line">        <span class="keyword">val</span> button = findViewById&lt;Button&gt;(R.id.button)</span><br><span class="line">        button.setOnClickListener {</span><br><span class="line">            lifecycleScope.launch {</span><br><span class="line">                mainViewModel.timeFlow.collectLatest { time -&gt;</span><br><span class="line">                    textView.text = time.toString()</span><br><span class="line">                    delay(<span class="number">3000</span>)</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​        <strong>collectLatest函数只接收处理最新的数据。如果有新数据到来了而前一个数据还没有处理完，则会将前一个数据剩余的处理逻辑全部取消。</strong></p><p><img src="/2022/10/27/Kotlin%20Flow%E5%85%A5%E9%97%A8/5.png" alt=""></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id=&quot;Kotlin-Flow-入门篇&quot;&gt;&lt;a href=&quot;#Kotlin-Flow-入门篇&quot; class=&quot;headerlink&quot; title=&quot;Kotlin Flow(入门篇)&quot;&gt;&lt;/a&gt;Kotlin Flow(入门篇)&lt;/h1&gt;&lt;p&gt;文章摘自：&lt;a href=&quot;https://mp.weixin.qq.com/s/TRr_isgU7VVVuJ9rOMZUhw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kotlin Flow响应式编程，基础知识入门-郭霖&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;title: Kotlin和响应式编程&lt;br&gt;tag: Kotlin&lt;br&gt;top: 66&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;响应式思维：&lt;/p&gt;
&lt;p&gt;​    比如说有一头小牛住在山脚下，山上有一个湖，小牛每天需要跑很远的路拎着水桶去湖边打水。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/10/27/Kotlin%20Flow%E5%85%A5%E9%97%A8/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;​        每天要跑很远的路就算了，关键是这个湖还时不时会干枯掉，有时小牛到了湖边发现湖已经干了，就完全白跑了一趟。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Volatile</title>
    <link href="https://hluck.github.io/2022/10/12/Volatile/"/>
    <id>https://hluck.github.io/2022/10/12/Volatile/</id>
    <published>2022-10-12T01:52:37.767Z</published>
    <updated>2022-10-14T13:19:16.349Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>​        volatile是轻量级的synchronized，多处理器开发中保证共享变量“可见性”。<strong>可见性是指一个线程修改某共享变量时，另外一个线程能读到改变修改的值。</strong>如果volatile变量修饰符使用恰当，比synchronized使用与执行成本更加低的，他不会引起上下文切换与调度。</p><p>​        Java对volatile定义如下：<strong>Java编程语言允许线程访问共享变量，volatile某些情况比锁过更方便。如果某字段声明为volatile，Java线程内存模型确保所有线程看到变量值是一致的。</strong></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
    
      <category term="Java复习" scheme="https://hluck.github.io/tags/Java%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Kali</title>
    <link href="https://hluck.github.io/2022/09/21/Kali/"/>
    <id>https://hluck.github.io/2022/09/21/Kali/</id>
    <published>2022-09-21T08:06:58.309Z</published>
    <updated>2022-09-21T14:03:32.588Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>需要VMware，自行下载</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>驱动包已上传个人阿里云盘，也可在官网下载</p><p><a href="https://blog.csdn.net/qq_41245301/article/details/121336651" target="_blank" rel="noopener">kali2021.1安装教程及简单配置</a></p><h3 id="1-Shell切换"><a href="#1-Shell切换" class="headerlink" title="1.Shell切换"></a>1.Shell切换</h3><p>​        Kali Linux在2020.3版本后默认的Shell不再是Bash而是Zsh，虽然Zsh的自动提示等扩展功能十分强大，但是<strong>由于后续Android系统的编译只支持Bash终端，因此还需要使用如下命令完成默认Shell的切换：</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/bash</span><br></pre></td></tr></tbody></table></figure><h3 id="2-设置时区"><a href="#2-设置时区" class="headerlink" title="2.设置时区"></a>2.设置时区</h3><p>由于虚拟机本身的时间不是东八区的，在打开虚拟机后还需要打开Terminal软件并输入如下命令设置时区：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg-reconfigure tzdata</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h3 id="3-启用root用户"><a href="#3-启用root用户" class="headerlink" title="3.启用root用户"></a>3.启用root用户</h3><p>​        建议首次使用Kali用户登入系统后，使用如下命令设置root用户密码以重新启用root用户，这样在后续工作中便不会因为用户权限不够而出现各种类型的报错。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></tbody></table></figure><h2 id="构建Android逆向环境"><a href="#构建Android逆向环境" class="headerlink" title="构建Android逆向环境"></a>构建Android逆向环境</h2><p><a href="https://www.modb.pro/db/455022" target="_blank" rel="noopener">构建用于Android逆向的Kali环境</a></p><p><a href="https://blog.csdn.net/StepTp/article/details/119704750" target="_blank" rel="noopener">Kall2021.2 版本Android Studio安装</a></p><h3 id="1-将adb工具加入环境变量"><a href="#1-将adb工具加入环境变量" class="headerlink" title="1.将adb工具加入环境变量"></a>1.将adb工具加入环境变量</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "export PATH=$PATH:/root/Android/Sdk/platform-tools" &gt;&gt; ~/.bashrc</span><br></pre></td></tr></tbody></table></figure><p>在将ADB工具加入环境变量后，为了使得设置生效，需要重新打开Terminal，再次执行adb命令，结果如下：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/09/21/Kali/1.png" alt=""></p><h3 id="2-htop安装"><a href="#2-htop安装" class="headerlink" title="2.htop安装"></a>2.htop安装</h3><ul><li>安装HTOP的命令是：</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install htop</span><br></pre></td></tr></tbody></table></figure><p>使用HTOP工具，在Terminal中输入“htop”即可。</p><ul><li>使用</li><li>区域1：CPU使用率、内存以及交换空间使用率；<br>区域2：1/5/15分钟的平均负载以及开机时间等；<br>区域3：当前系统中运行的进程；<br>区域4：功能键；</li></ul><p><img src="/2022/09/21/Kali/2.png" alt=""></p><p>在区域3中，代表当前系统中运行的进程。各项说明如下：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.PID：进程标志号，是非零正整数</span><br><span class="line">2.USER：进程所有者的用户名</span><br><span class="line">3.PR：进程的优先级别</span><br><span class="line">4.NI：进程的优先级别数值</span><br><span class="line">5.VIRT：进程占用的虚拟内存值</span><br><span class="line">6.RES：进程占用的物理内存值</span><br><span class="line">7.SHR：进程使用的共享内存值</span><br><span class="line">8.S：进程的状态，其中S代表休眠，R代表正在运行，Z表示僵死状态，N代表该进程优先级是负数</span><br><span class="line">9.%CPU：该进程占用的cpu使用率</span><br><span class="line">10.%MEM：该进程占用的物理内存和总内存的百分比</span><br><span class="line">11.TIME+：该进程启动后占用的总的CPU时间</span><br><span class="line">12.COMMAND：进程启动的启动命令名称</span><br></pre></td></tr></tbody></table></figure><h4 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h4><p><img src="/2022/09/21/Kali/3.png" alt=""></p><h3 id="3-nethogs安装"><a href="#3-nethogs安装" class="headerlink" title="3.nethogs安装"></a>3.nethogs安装</h3><p><strong>NetHogs</strong>是一个开源的命令行工具（类似于Linux的top命令），用来按进程或程序实时统计网络带宽使用率。</p><ul><li>安装NETHOGS的命令是：</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install nethogs</span><br></pre></td></tr></tbody></table></figure><p>​        使用NETHOGS工具，在Terminal中输入“nethogs eth0”即可。其中“eth0”为以太网卡，也可以使用“ifconfig”命令查看一下系统在用的网卡，将查看“eth0”更换为查看其它网卡。</p><p>相关文章：<a href="http://lnmp.ailinux.net/nethogs" target="_blank" rel="noopener">NETHOGS</a></p><h3 id="4-jnettop"><a href="#4-jnettop" class="headerlink" title="4.jnettop"></a>4.jnettop</h3><p>​        实时查看系统网络负载的工具jnettop</p><p>​        以利用jnettop工具实时查看相应的下载速度和对应的IP，甚至在AOSP编译时打开jnettop，会观察到编译过程中出现连接国外的服务器下载依赖包等行为。除此之外，<strong>值得一提的是，在抓包时打开这个工具往往会有奇效，比如能够实时查看对方的IP等</strong>。</p><p>​        jnettop工具本身在运行时对终端大小是有所要求的，否则jnettop工具就无法打开，minimum required size: 80×20这个提示表明终端长和宽至少为80×20。</p><h3 id="5-代理等参考文章"><a href="#5-代理等参考文章" class="headerlink" title="5.代理等参考文章"></a>5.代理等参考文章</h3><p><a href="https://cloud.tencent.com/developer/article/2099599" target="_blank" rel="noopener">frida_android使用</a></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;需要VMware，自行下载&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;驱动包已上传个人阿里云盘，也可在官网下载&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_41245301/article/details/121336651&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;kali2021.1安装教程及简单配置&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-Shell切换&quot;&gt;&lt;a href=&quot;#1-Shell切换&quot; class=&quot;headerlink&quot; title=&quot;1.Shell切换&quot;&gt;&lt;/a&gt;1.Shell切换&lt;/h3&gt;&lt;p&gt;​        Kali Linux在2020.3版本后默认的Shell不再是Bash而是Zsh，虽然Zsh的自动提示等扩展功能十分强大，但是&lt;strong&gt;由于后续Android系统的编译只支持Bash终端，因此还需要使用如下命令完成默认Shell的切换：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;chsh -s /bin/bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;2-设置时区&quot;&gt;&lt;a href=&quot;#2-设置时区&quot; class=&quot;headerlink&quot; title=&quot;2.设置时区&quot;&gt;&lt;/a&gt;2.设置时区&lt;/h3&gt;&lt;p&gt;由于虚拟机本身的时间不是东八区的，在打开虚拟机后还需要打开Terminal软件并输入如下命令设置时区：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dpkg-reconfigure tzdata&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
    
      <category term="Android逆向" scheme="https://hluck.github.io/tags/Android%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>GreenDao</title>
    <link href="https://hluck.github.io/2022/09/17/GreenDao/"/>
    <id>https://hluck.github.io/2022/09/17/GreenDao/</id>
    <published>2022-09-17T09:01:57.189Z</published>
    <updated>2022-10-14T13:21:51.778Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p><strong>GreenDao的官方文档</strong></p><p><a href="http://greenrobot.org/greendao/" target="_blank" rel="noopener">GreenDao</a></p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><strong>GreenDao的作用？</strong></p><p>​        通过 GreenDao，可以更快速的操作数据库，可以使用简单的面相对象的API来存储，更新，删除和查询 Java 对象。</p><p><img src="/2022/09/17/GreenDao/1.png" alt=""></p><a id="more"></a><p>GreenDao 的核心类有三个：分别是 DaoMaster,DaoSession,XXXDao，这三个类都会自动创建，无需手动编写创建！</p><ol><li>DaoMaster:：DaoMaster 保存数据库对象（SQLiteDatabase）并管理特定模式的 DAO 类（而不是对象）。它有静态方法来创建表或删除它们。它的内部类 OpenHelper 和DevOpenHelper 是 SQLiteOpenHelper 实现，它们在 SQLite 数据库中创建模式。</li><li>DaoSession：管理特定模式的所有可用 DAO 对象，您可以使用其中一个getter方法获取该对象。DaoSession 还提供了一些通用的持久性方法，如实体的插入，加载，更新，刷新和删除。</li><li>XXXDao：数据访问对象（DAO）持久存在并查询实体。对于每个实体，greenDAO 生成DAO。它具有比 DaoSession 更多的持久性方法，例如：count，loadAll 和 insertInTx。</li><li>Entities ：可持久化对象。通常, 实体对象代表一个数据库行使用标准 Java 属性(如一个POJO 或 JavaBean )。</li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>​        添加 GreenDao Gradle 插件和GreenDao 库：</p><ol><li><p>添加 GreenDao Gradle 插件(总项目gradle下加入)</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">buildscript {</span><br><span class="line">    dependencies {</span><br><span class="line">        classpath 'org.greenrobot:greendao-gradle-plugin:3.3.0'</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>添加GreenDao 库（app模块下加入）</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">plugins {</span><br><span class="line">    id 'com.android.application'</span><br><span class="line">    id 'org.jetbrains.kotlin.android'</span><br><span class="line">    id 'kotlin-kapt'</span><br><span class="line">    id 'org.greenrobot.greendao'</span><br><span class="line">}</span><br><span class="line">...</span><br><span class="line">greendao {</span><br><span class="line">    schemaVersion 1                         //版本号</span><br><span class="line">    daoPackage 'com.example.greendaostudy.dao'    //自动生成的数据库相关类的包名</span><br><span class="line">    targetGenDir 'src/main/java'            //自动生成的数据库的相关灯的目录</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">dependencies {</span><br><span class="line">...</span><br><span class="line">    implementation 'org.greenrobot:greendao:3.3.0'</span><br><span class="line">    implementation 'org.greenrobot:greendao-generator:3.3.0'</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>添加实体类：</p></li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>{</span><br><span class="line">    <span class="meta">@Id</span>(autoincrement = <span class="keyword">true</span>)</span><br><span class="line">    Long id;</span><br><span class="line">    <span class="meta">@Unique</span></span><br><span class="line">    <span class="keyword">int</span> studentNo;<span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">int</span> age; <span class="comment">//年龄</span></span><br><span class="line">    String telPhone;<span class="comment">//手机号</span></span><br><span class="line">    String sex; <span class="comment">//性别</span></span><br><span class="line">    String name;<span class="comment">//姓名</span></span><br><span class="line">    String address;<span class="comment">//家庭住址</span></span><br><span class="line">    String schoolName;<span class="comment">//学校名字</span></span><br><span class="line">    String grade;<span class="comment">//几年级</span></span><br><span class="line">    ……getter and setter and constructor method……</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>注意：</strong>如上面代码所示，一个实体类代表一张表，<strong>必须是Java，使用Kotlin，插件自动生成不生效</strong>。build后会自动生成三个类：</p><p><img src="/2022/09/17/GreenDao/2.png" alt=""></p><ol start="4"><li><p>在Application初始化（自定义一个类也行）</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>： LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span>： 2022/9/17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APP</span>:<span class="type">Application</span></span>() {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span>{</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> daoMaster:DaoMaster? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">val</span> instance:APP = APP()</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">getApp</span><span class="params">()</span></span>:APP{</span><br><span class="line">            <span class="keyword">return</span> instance</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取StudentDao实例</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> StudentDao</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">getStudentDao</span><span class="params">()</span></span>:StudentDao{</span><br><span class="line">            <span class="keyword">return</span> daoMaster!!.newSession().studentDao</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onCreate()</span><br><span class="line">        initDao()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在Application中进行初始化操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initDao</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">val</span> helper = DaoMaster.DevOpenHelper(<span class="keyword">this</span>,<span class="string">"greendao_study.db"</span>)</span><br><span class="line">        <span class="keyword">val</span> db = helper.writableDatabase</span><br><span class="line">        daoMaster = DaoMaster(db)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><p>5.增删改查</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>(),View.OnClickListener {</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> binding:ActivityMainBinding</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        binding = ActivityMainBinding.inflate(layoutInflater)</span><br><span class="line">        setContentView(binding.root)</span><br><span class="line">        binding.btnAdd.setOnClickListener(<span class="keyword">this</span>)</span><br><span class="line">        binding.btnDelete.setOnClickListener(<span class="keyword">this</span>)</span><br><span class="line">        binding.btnRead.setOnClickListener(<span class="keyword">this</span>)</span><br><span class="line">        binding.btnUpdate.setOnClickListener(<span class="keyword">this</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">(v: <span class="type">View</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">when</span>(v?.id){</span><br><span class="line">            <span class="comment">//增</span></span><br><span class="line">            binding.btnAdd.id -&gt; {</span><br><span class="line">                <span class="keyword">val</span> student = Student(<span class="number">1</span>,<span class="string">"哈登"</span>)</span><br><span class="line">                <span class="keyword">val</span> insert = APP.getStudentDao().insert(student)</span><br><span class="line">                <span class="keyword">val</span> result = <span class="keyword">if</span> (insert&gt;<span class="number">0</span>) <span class="string">"插入成功"</span> <span class="keyword">else</span> <span class="string">"插入失败"</span></span><br><span class="line">                Log.d(<span class="string">"MainActivity"</span>,result)</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//删</span></span><br><span class="line">            binding.btnDelete.id -&gt; {</span><br><span class="line">                <span class="keyword">val</span> s =APP.getStudentDao().queryRaw(<span class="string">"where _id = ?"</span>,<span class="string">"1"</span>)</span><br><span class="line">                APP.getStudentDao().delete(s[<span class="number">0</span>])</span><br><span class="line">                Log.d(<span class="string">"MainActivity"</span>, <span class="string">"删除成功"</span>)</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//查</span></span><br><span class="line">            binding.btnRead.id -&gt; {</span><br><span class="line">                <span class="keyword">val</span> list = APP.getStudentDao().queryBuilder().build().list()</span><br><span class="line">                <span class="keyword">for</span> (student <span class="keyword">in</span> list) {</span><br><span class="line">                    Log.d(<span class="string">"MainActivity"</span>, student.name)</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//改</span></span><br><span class="line">            binding.btnUpdate.id -&gt; {</span><br><span class="line">                APP.getStudentDao().update(Student(<span class="number">1</span>,<span class="string">"欧文"</span>))</span><br><span class="line">                Log.d(<span class="string">"MainActivity"</span>, <span class="string">"修改成功"</span>)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="博文参考"><a href="#博文参考" class="headerlink" title="博文参考"></a>博文参考</h2><p><a href="https://juejin.cn/post/6844903975125254151" target="_blank" rel="noopener">GreenDao全面讲解</a></p><p><a href="https://www.jianshu.com/p/89c3fa96b142" target="_blank" rel="noopener">GreenDao的使用</a></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;strong&gt;GreenDao的官方文档&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://greenrobot.org/greendao/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GreenDao&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;GreenDao的作用？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​        通过 GreenDao，可以更快速的操作数据库，可以使用简单的面相对象的API来存储，更新，删除和查询 Java 对象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/09/17/GreenDao/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
    
      <category term="Android" scheme="https://hluck.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>事件交互</title>
    <link href="https://hluck.github.io/2022/09/05/%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92/"/>
    <id>https://hluck.github.io/2022/09/05/%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92/</id>
    <published>2022-09-05T01:25:31.444Z</published>
    <updated>2022-09-11T05:11:32.096Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="按键事件"><a href="#按键事件" class="headerlink" title="按键事件"></a>按键事件</h2><h3 id="1-检测软键盘"><a href="#1-检测软键盘" class="headerlink" title="1.检测软键盘"></a>1.检测软键盘</h3><p>​        手机上的输入按键一般不另外处理，直接由系统按照默认情况操作。有时为了改善用户体验，需要让App拦截按键事件，并进行额外处理。拦截输入字符可通过注册文本观测器TextWatcher实现，但该监听器只适用于编辑框控件，无法用于其他控件。因此，<strong>若想让其他控件也能监听按键操作，则要另外调用控件对象的setOnKeyListener方法设置按键监听器，并实现监听器接口OnKeyListener的onKey方法。</strong></p><p>​        监控按键事件之前，首先要知道每个按键的编码，这样才能根据不同的编码值进行相应的处理。按键编码的取值说明见表2-1。注意，监听器OnKeyListener只会检测控制键，不会检测文本键（字母、数字、标点等）。</p><p><img src="/2022/09/05/%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92/1.png" alt=""></p><p>​        实际监控结果显示，每次按下控制键时，onKey方法都会收到两次重复编码的按键事件，这是因为该方法把每次按键都分成按下与松开两个动作，所以一次按键变成了两个按键动作。解决这个问题的办法很简单，就是只监控按下动作（KeyEvent.ACTION_DOWN）的按键事件，不监控松开动作（KeyEvent.ACTION_UP）的按键事件。</p><p>​        虽然按键编码表存在主页键、任务键、电源键的定义，但这3个键并不开放给普通App，普通App也不应该拦截这些按键事件。</p><p>相关代码：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeySoftActivity</span> : <span class="type">BaseActivity</span>&lt;<span class="type">ActivityKeySoftBinding</span>&gt;</span>(),View.OnKeyListener {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> desc = <span class="string">""</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> ActivityKeySoftBinding.<span class="title">initBinding</span><span class="params">()</span></span> {</span><br><span class="line">        etSoft.setOnKeyListener(<span class="keyword">this</span><span class="symbol">@KeySoftActivity</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onKey</span><span class="params">(v: <span class="type">View</span>?, keyCode: <span class="type">Int</span>, event: <span class="type">KeyEvent</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">        <span class="keyword">if</span> (event?.action == KeyEvent.ACTION_DOWN){</span><br><span class="line">            desc = <span class="string">"<span class="subst">${desc}</span>软按键编码是<span class="subst">${keyCode}</span>，动作是按下"</span></span><br><span class="line">            <span class="keyword">when</span>(keyCode){</span><br><span class="line">                KeyEvent.KEYCODE_ENTER -&gt; desc = <span class="string">"<span class="subst">${desc}</span>,按键为回车键"</span></span><br><span class="line">                KeyEvent.KEYCODE_DEL -&gt; desc = <span class="string">"<span class="subst">${desc}</span>,按键为删除键"</span></span><br><span class="line">                KeyEvent.KEYCODE_SEARCH -&gt; desc = <span class="string">"<span class="subst">${desc}</span>,按键为搜索键"</span></span><br><span class="line">                KeyEvent.KEYCODE_BACK -&gt; {</span><br><span class="line">                    desc = <span class="string">"<span class="subst">${desc}</span>,按键为返回键"</span></span><br><span class="line">                    <span class="comment">//延迟3s后启动页面关闭任务</span></span><br><span class="line">                    Handler(Looper.myLooper()!!).postDelayed({finish()},<span class="number">3000</span>)</span><br><span class="line">                }</span><br><span class="line">                KeyEvent.KEYCODE_VOLUME_UP -&gt; desc = <span class="string">"<span class="subst">${desc}</span>,按键为加大音量键"</span></span><br><span class="line">                KeyEvent.KEYCODE_VOLUME_DOWN -&gt; desc = <span class="string">"<span class="subst">${desc}</span>,按键为减小音量键"</span></span><br><span class="line">            }</span><br><span class="line">            desc = <span class="string">"<span class="subst">${desc}</span>\n"</span></span><br><span class="line">            mBinding.tvResult.text = desc</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// 返回true表示处理完了不再输入该字符，返回false表示给你输入该字符吧</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><a id="more"></a><h3 id="2-检测物理按键"><a href="#2-检测物理按键" class="headerlink" title="2.检测物理按键"></a>2.检测物理按键</h3><p>​        除了给控件注册按键监听器外，还可以在活动页面上检测物理按键，即重写Activity的onKeyDown方法。onKeyDown方法与前面的onKey方法类似，同样拥有按键编码与按键事件KeyEvent两个参数。当然，这两个方法也存在不同之处，具体说明如下：</p><ol><li>onKeyDown只能在活动代码中使用，而onKey只要有可注册的控件就能使用。</li><li>onKeyDown只能检测物理按键，无法检测输入法按键（如回车键、删除键等），onKey可同时检测两类按键。</li><li>onKeyDown不区分按下与松开两个动作，onKey区分这两个动作。</li></ol><p>相关代码，分别检测到了加大音量键、减小音量键、返回键：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeyHardActivity</span> : <span class="type">BaseActivity</span>&lt;<span class="type">ActivityKeyHardBinding</span>&gt;</span>() {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> desc = <span class="string">""</span></span><br><span class="line">    <span class="comment">// 声明一个返回桌面的广播接收器对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> mDesktopReceiver:DesktopReceiver</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> ActivityKeyHardBinding.<span class="title">initBinding</span><span class="params">()</span></span> {</span><br><span class="line">        initDesktopReceiver()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在发生物理按键动作时触发</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onKeyDown</span><span class="params">(keyCode: <span class="type">Int</span>, event: <span class="type">KeyEvent</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">        desc = <span class="string">"<span class="subst">${desc}</span>物理按键的编码是<span class="subst">${keyCode}</span>"</span></span><br><span class="line">        <span class="keyword">when</span>(keyCode){</span><br><span class="line">            KeyEvent.KEYCODE_BACK -&gt; {</span><br><span class="line">                desc = <span class="string">"<span class="subst">${desc}</span>，按键为返回键"</span></span><br><span class="line">                <span class="comment">// 延迟3秒后启动页面关闭任务</span></span><br><span class="line">                Handler(Looper.myLooper()!!).postDelayed({finish()},<span class="number">3000</span>)</span><br><span class="line">            }</span><br><span class="line">            KeyEvent.KEYCODE_VOLUME_UP -&gt; {</span><br><span class="line">                desc = <span class="string">"<span class="subst">${desc}</span>，按键为加大音量键"</span></span><br><span class="line">            }</span><br><span class="line">            KeyEvent.KEYCODE_VOLUME_DOWN -&gt; {</span><br><span class="line">                desc = <span class="string">"<span class="subst">${desc}</span>，按键为减小音量键"</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        desc += <span class="string">"\n"</span></span><br><span class="line">        mBinding.tvResult.text = desc</span><br><span class="line">        <span class="comment">// 返回true表示不再响应系统动作，返回false表示继续响应系统动作</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化桌面广播。用于监听按下主页键和任务键</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initDesktopReceiver</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">// 创建一个返回桌面的广播接收器</span></span><br><span class="line">        mDesktopReceiver = DesktopReceiver()</span><br><span class="line">        <span class="comment">// 创建一个意图过滤器，只接收关闭系统对话框（即返回桌面）的广播</span></span><br><span class="line">        <span class="keyword">val</span> intentFilter = IntentFilter(Intent.ACTION_CLOSE_SYSTEM_DIALOGS)</span><br><span class="line">        <span class="comment">// 注册广播接收器</span></span><br><span class="line">        registerReceiver(mDesktopReceiver,intentFilter)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroy</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onDestroy()</span><br><span class="line">        <span class="comment">// 注销广播接收器</span></span><br><span class="line">        unregisterReceiver(mDesktopReceiver)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个返回到桌面的广播接收器</span></span><br><span class="line">    <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">DesktopReceiver</span>:<span class="type">BroadcastReceiver</span></span>(){</span><br><span class="line">        <span class="comment">//键名</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">val</span> SYSTEM_DIALOG_REASON_KEY = <span class="string">"reason"</span></span><br><span class="line">        <span class="comment">// 主页键</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">val</span> SYSTEM_DIALOG_REASON_HOME = <span class="string">"homekey"</span></span><br><span class="line">        <span class="comment">// 任务键</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">val</span> SYSTEM_DIALOG_REASON_TASK = <span class="string">"recentapps"</span></span><br><span class="line">        <span class="comment">// 在收到返回桌面广播时触发</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onReceive</span><span class="params">(context: <span class="type">Context</span>?, intent: <span class="type">Intent</span>?)</span></span> {</span><br><span class="line">            <span class="keyword">if</span> (intent?.action.equals(Intent.ACTION_CLOSE_SYSTEM_DIALOGS)){</span><br><span class="line">                <span class="keyword">var</span> reason = intent?.getStringExtra(SYSTEM_DIALOG_REASON_KEY)</span><br><span class="line">                <span class="keyword">if</span> (!TextUtils.isEmpty(reason)){</span><br><span class="line">                    <span class="comment">//按下了主页键</span></span><br><span class="line">                    <span class="keyword">if</span> (reason.equals(SYSTEM_DIALOG_REASON_HOME)){</span><br><span class="line">                        desc = <span class="string">"<span class="subst">${desc}</span><span class="subst">${DateUtil.getNowTime()}</span>\t 按键为主页键\n"</span></span><br><span class="line">                        mBinding.tvResult.text = desc</span><br><span class="line">                    } <span class="keyword">else</span> <span class="keyword">if</span> (reason.equals(SYSTEM_DIALOG_REASON_TASK)){ <span class="comment">// 按下了任务键</span></span><br><span class="line">                        desc = <span class="string">"<span class="subst">${desc}</span><span class="subst">${DateUtil.getNowTime()}</span>\t 按键为任务键\n"</span></span><br><span class="line">                        mBinding.tvResult.text = desc</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-接管返回按键"><a href="#3-接管返回按键" class="headerlink" title="3.接管返回按键"></a>3.接管返回按键</h3><p>​        检测物理按键最常见的应用是淘宝首页的“再按一次返回键退出”，在App首页按返回键，系统默认的做法是直接退出该App。有时用户有可能是不小心按了返回键，并非想退出该App，因此这里加一个小提示，等待用户再次按返回键才会确认退出意图，并执行退出操作。</p><p>​        “再按一次返回键退出”的实现代码很简单，在onKeyDown方法中拦截返回键即可，或者重写活动代码的onBackPressed方法也能实现同样的效果，该方法专门响应按返回键事件</p><p>具体代码如下：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BackPressActivity</span> : <span class="type">BaseActivity</span>&lt;<span class="type">ActivityBackPressBinding</span>&gt;</span>() {</span><br><span class="line">    <span class="comment">// 是否退出当前页面</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> needExit = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> ActivityBackPressBinding.<span class="title">initBinding</span><span class="params">()</span></span> {</span><br><span class="line">        tlHead.title = <span class="string">"返回按键"</span></span><br><span class="line">        <span class="comment">// 替换系统自带的ActionBar</span></span><br><span class="line">        setSupportActionBar(tlHead)</span><br><span class="line">        <span class="comment">// 设置工具栏左侧导航图标的点击监听器</span></span><br><span class="line">        tlHead.setNavigationOnClickListener { finish() }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在按下返回键时触发</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBackPressed</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onBackPressed()</span><br><span class="line">        <span class="keyword">if</span> (needExit) {</span><br><span class="line">            finish()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        }</span><br><span class="line">        needExit = <span class="literal">true</span></span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>,<span class="string">"再按一次返回键退出!"</span>,Toast.LENGTH_SHORT).show()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在发生物理按键动作时触发</span></span><br><span class="line"><span class="comment">//    override fun onKeyDown(keyCode: Int, event: KeyEvent?): Boolean {</span></span><br><span class="line"><span class="comment">//        // 按下返回键</span></span><br><span class="line"><span class="comment">//        if (keyCode == KeyEvent.KEYCODE_BACK){</span></span><br><span class="line"><span class="comment">//            if (needExit){</span></span><br><span class="line"><span class="comment">//                finish()</span></span><br><span class="line"><span class="comment">//            }</span></span><br><span class="line"><span class="comment">//            needExit = true</span></span><br><span class="line"><span class="comment">//            Toast.makeText(this, "再按一次返回键退出!", Toast.LENGTH_SHORT).show()</span></span><br><span class="line"><span class="comment">//            return true</span></span><br><span class="line"><span class="comment">//        }</span></span><br><span class="line"><span class="comment">//        return super.onKeyDown(keyCode, event)</span></span><br><span class="line"><span class="comment">//    }</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h2><h3 id="1-手势事件的分发流程"><a href="#1-手势事件的分发流程" class="headerlink" title="1.手势事件的分发流程"></a>1.手势事件的分发流程</h3><p>​        为方便开发者使用，Android已可自动识别特定的几种触摸手势，包括按钮的点击事件、长按事件、滚动视图的上下滚动事件、翻页视图的左右翻页事件等。不过对于App的高级开发来说，系统自带的几个固定手势显然无法满足丰富多变的业务需求。这就要求开发者深入了解触摸行为的流程与方法，并在合适的场合接管触摸行为，进行符合需求的事件处理。</p><p>​        <strong>与手势事件有关的方法主要有3个（按执行顺序排列）</strong>，分别说明如下：</p><ul><li><strong>dispatchTouchEvent</strong>：进行<strong>事件分发</strong>处理，返回结果表示该事件是否需要分发。默认返回true表示分发给子视图，由子视图处理该手势，不过最终是否分发成功还得根据onInterceptTouchEvent方法的拦截判断结果；返回false表示不分发，此时必须实现自身的onTouchEvent方法，否则该手势将不会得到处理。</li><li><strong>onInterceptTouchEvent</strong>：进行<strong>事件拦截</strong>处理，返回结果表示当前容器是否需要拦截该事件。返回true表示予以拦截，该手势不会分发给子视图，此时必须实现自身的onTouchEvent方法，否则该手势将不会得到处理；默认返回false表示不拦截，该手势会分发给子视图进行后续处理。</li><li><strong>onTouchEvent</strong>：进行<strong>事件触摸</strong>处理，返回结果表示该事件是否处理完毕。返回true表示处理完毕，无须处理上一级视图的onTouchEvent方法，一路返回结束流程；返回false表示该手势事件尚未完成，返回继续处理上一级视图的onTouchEvent方法，然后根据上一级onTouchEvent方法的返回值判断直接结束或由上上一级处理。</li></ul><p>上述手势方法的执行者有3个（按执行顺序排列），具体说明如下：</p><ul><li>页面类：包括Activity及其派生类。<strong>页面类可调用dispatchTouchEvent和onTouchEvent两个方法</strong>。</li><li>容器类：包括从ViewGroup类派生出的各类容器，如各种布局Layout和ListView、GridView、Spinner、ViewPager、RecyclerView、Toolbar等。<strong>容器类可调用dispatchTouchEvent、onInterceptTouchEvent和onTouchEvent三个方法。</strong></li><li>控件类：包括从View类派生的各类控件，如TextView、ImageView、Button等。<strong>控件类可调用dispatchTouchEvent和onTouchEvent两个方法。</strong></li></ul><p>​       只有容器类才能调用onInterceptTouchEvent方法，这是因为该方法用于拦截发往下层视图的事件，而控件类已经位于底层，只能被拦截，不能拦截别人。页面类没有下层视图，所以不能调用onInterceptTouchEvent方法。</p><p>三类执行者的手势处理流程如图2-4所示。</p><p><img src="/2022/09/05/%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92/2.png" alt=""></p><p>​        以上流程图涉及3个手势方法和3种手势执行者，尤其是手势流程的排列组合千变万化，并不容易解释清楚。对于实际开发来说，真正需要处理的组合并不多，所以只要把常见的几种组合搞清楚就能应付大部分开发工作，这几种组合说明如下。</p><ol><li>页面类的手势处理。它的dispatchTouchEvent方法必须返回super.dispatchTouchEvent，如果不分发，页面上的视图就无法处理手势。至于页面类的onTouchEvent方法，基本没有什么作用，因为手势动作要由具体视图处理，页面直接处理手势没有什么意义。所以，页面类的手势处理可以不用关心，直接略过。</li><li>控件类的手势处理。它的dispatchTouchEvent方法没有任何作用，因为控件下面没有子视图，无所谓分不分发。<strong>至于控件类的onTouchEvent方法，如果要进行手势处理，就需要自定义一个控件，重写自定义类中的onTouchEvent方法；如果不想自定义控件，就直接调用控件对象的setOnTouchListener方法，注册一个触摸监听器OnTouchListener，并实现该监听器的onTouch方法。所以，控件类的手势处理只需关心onTouchEvent方法。</strong></li><li>容器类的手势处理。这才是真正要深入了解的地方。<strong>容器类的dispatchTouchEvent与onInterceptTouchEvent方法都能决定是否将手势交给子视图处理。为了避免手势响应冲突，一般要重写dispatchTouchEvent或者onInterceptTouchEvent方法。两个方法的区别可以这么理解：前者是大领导，只管派发任务，不会自己做事情；后者是小领导，尽管有拦截的权利，不过也得自己做点事情，比如处理纠纷等。容器类的onTouchEvent方法近乎摆设，因为需要拦截的在前面已经拦截了，需要处理的在子视图已经处理了。</strong></li></ol><p>经过上面的详细分析，常见的手势处理方法有下面3种：</p><ol><li>页面类的dispatchTouchEvent方法：控制事件的分发，决定把手势交给谁处理。</li><li>容器类的onInterceptTouchEvent方法：控制事件的拦截，决定是否要把手势交给子视图处理。</li><li>控件类的onTouchEvent方法：进行手势事件的具体处理。</li></ol><p><strong>为方便理解dispatchTouchEvent方法，先看下面不派发事件的自定义布局代码：</strong></p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>： LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span>： 2022/9/5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：不派发事件的自定义布局代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotDispatchLayout</span></span>(context:Context,attrs:AttributeSet):LinearLayout(context, attrs) {</span><br><span class="line">    <span class="comment">// 声明一个分发监听器对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mListener:NotDispatchListener? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setNotDispatchListener</span><span class="params">(listener: <span class="type">NotDispatchListener</span>)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.mListener = listener</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在分发触摸事件时触发</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">dispatchTouchEvent</span><span class="params">(ev: <span class="type">MotionEvent</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">        mListener?.onNotDispatch()</span><br><span class="line">        <span class="comment">// 一般容器默认返回true，即允许分发给下级</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个分发监听器接口</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">NotDispatchListener</span></span>{</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">onNotDispatch</span><span class="params">()</span></span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Activity:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventDispatchActivity</span> : <span class="type">BaseActivity</span>&lt;<span class="type">ActivityEventDispatchBinding</span>&gt;</span>(),NotDispatchLayout.NotDispatchListener {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> desc_yes = <span class="string">""</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> desc_no = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> ActivityEventDispatchBinding.<span class="title">initBinding</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="comment">// 设置不分发布局的事件分发监听器</span></span><br><span class="line">        ndlNo.setNotDispatchListener(<span class="keyword">this</span><span class="symbol">@EventDispatchActivity</span>)</span><br><span class="line">        btnDispatchYes.setOnClickListener {</span><br><span class="line">            desc_yes = <span class="string">"<span class="subst">${desc_yes}</span><span class="subst">${DateUtil.getNowTime()}</span> 您点击了按钮\n"</span></span><br><span class="line">            tvDispatchYes.text = desc_yes</span><br><span class="line">        }</span><br><span class="line">        btnDispatchNo.setOnClickListener {</span><br><span class="line">            desc_no = <span class="string">"<span class="subst">${desc_no}</span><span class="subst">${DateUtil.getNowTime()}</span> 您点击了按钮\n"</span></span><br><span class="line">            tvDispatchNo.text = desc_no</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在分发触摸事件时触发</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onNotDispatch</span><span class="params">()</span></span> {</span><br><span class="line">        desc_no = <span class="string">"<span class="subst">${desc_no}</span><span class="subst">${DateUtil.getNowTime()}</span> 触摸动作未分发，按钮点击不了了\n"</span></span><br><span class="line">        mBinding.tvDispatchNo.text = desc_no</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/09/05/%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92/3.png" alt=""></p><p><strong>为方便理解onInterceptTouchEvent方法，再看拦截事件的自定义布局代码：</strong></p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>： LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span>： 2022/9/5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：拦截事件的自定义布局代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterceptLayout</span></span>(context: Context,attr:AttributeSet):LinearLayout(context,attr) {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mListener:InterceptListener? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在拦截触摸事件时触发</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onInterceptTouchEvent</span><span class="params">(ev: <span class="type">MotionEvent</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">        mListener?.onInterceptor()</span><br><span class="line">        <span class="comment">// 一般容器默认返回false，即不拦截。但滚动视图会拦截</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setInterceptListener</span><span class="params">(listener: <span class="type">InterceptListener</span>)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.mListener = listener</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个拦截监听器接口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InterceptListener</span></span>{</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">onInterceptor</span><span class="params">()</span></span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>activity:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.eventstudy.ui</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> com.example.eventstudy.R</span><br><span class="line"><span class="keyword">import</span> com.example.eventstudy.databinding.ActivityEventInterceptBinding</span><br><span class="line"><span class="keyword">import</span> com.example.eventstudy.util.DateUtil</span><br><span class="line"><span class="keyword">import</span> com.example.eventstudy.widget.InterceptLayout</span><br><span class="line"><span class="keyword">import</span> com.example.imageprocess.base.BaseActivity</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventInterceptActivity</span> : <span class="type">BaseActivity</span>&lt;<span class="type">ActivityEventInterceptBinding</span>&gt;</span>(),InterceptLayout.InterceptListener {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> descYes = <span class="string">""</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> descNo = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> ActivityEventInterceptBinding.<span class="title">initBinding</span><span class="params">()</span></span> {</span><br><span class="line">        ilYes.setInterceptListener(<span class="keyword">this</span><span class="symbol">@EventInterceptActivity</span>)</span><br><span class="line">        btnInterceptNo.setOnClickListener {</span><br><span class="line">            descNo = <span class="string">"<span class="subst">${descNo}</span><span class="subst">${DateUtil.getNowTime()}</span>您点击了按钮\n"</span></span><br><span class="line">            mBinding.tvInterceptNo.text = descNo</span><br><span class="line">        }</span><br><span class="line">        btnInterceptYes.setOnClickListener {</span><br><span class="line">            descYes = <span class="string">"<span class="subst">${descYes}</span><span class="subst">${DateUtil.getNowTime()}</span>您点击了按钮\n"</span></span><br><span class="line">            mBinding.tvInterceptYes.text = descYes</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onInterceptor</span><span class="params">()</span></span> {</span><br><span class="line">        descYes = <span class="string">"<span class="subst">${descYes}</span><span class="subst">${DateUtil.getNowTime()}</span>触摸动作被拦截，按钮点击不了了\n"</span></span><br><span class="line">        mBinding.tvInterceptYes.text = descYes</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/09/05/%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92/4.png" alt=""></p><h3 id="2-接管手势事件处理"><a href="#2-接管手势事件处理" class="headerlink" title="2.接管手势事件处理"></a>2.接管手势事件处理</h3><p>​        dispatchTouchEvent、onInterceptTouchEvent和onTouchEvent三个方法的输入参数都是手势事件<strong>MotionEvent</strong>，其中包含触摸动作的所有信息，各种手势操作都从MotionEvent中获取触摸信息并判断处理。</p><p>下面是MotionEvent的常用方法：</p><ul><li>getAction：获取当前的动作类型。动作类型的取值说明见表2-2。</li></ul><p><img src="/2022/09/05/%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92/5.png" alt=""></p><ul><li>getEventTime：获取事件时间（从开机到现在的毫秒数）。</li><li>getX：获取在控件内部的相对横坐标。</li><li>getY：获取在控件内部的相对纵坐标。</li><li>getRawX：获取在屏幕上的绝对横坐标。</li><li>getRawY：获取在屏幕上的绝对纵坐标。</li><li>getPressure：获取触摸的压力大小。</li><li>getPointerCount：获取触控点的数量，如果为2就表示有两个手指同时按压屏幕。如果触控点数目大于1，坐标相关方法就可以输入整数编号，表示获取第几个触控点的坐标信息。</li></ul><p>为方便理解MotionEvent的各类触摸行为，下面是<strong>单点触摸</strong>的示例代码：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TouchSingleActivity</span> : <span class="type">BaseActivity</span>&lt;<span class="type">ActivityTouchSingleBinding</span>&gt;</span>() {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> ActivityTouchSingleBinding.<span class="title">initBinding</span><span class="params">()</span></span> {</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在发生触摸事件时触发</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTouchEvent</span><span class="params">(event: <span class="type">MotionEvent</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">        <span class="keyword">var</span> desc = <span class="string">""</span></span><br><span class="line">        <span class="comment">// 从开机到现在的毫秒数</span></span><br><span class="line">        event?.apply {</span><br><span class="line">            <span class="keyword">var</span> seconds = (eventTime / <span class="number">1000</span>).toInt()</span><br><span class="line">            desc = <span class="string">"动作发生时间：开机距离现在<span class="subst">${seconds/<span class="number">3600</span>}</span>:<span class="subst">${seconds % <span class="number">3600</span> / <span class="number">60</span>}</span>:<span class="subst">${seconds % <span class="number">60</span>}</span>"</span></span><br><span class="line">            desc = <span class="string">"<span class="subst">${desc}</span>\n动作名称是："</span></span><br><span class="line">            <span class="comment">// 获得触摸事件的动作类型</span></span><br><span class="line">            <span class="keyword">when</span>(event.action){</span><br><span class="line">                <span class="comment">// 按下手指</span></span><br><span class="line">                MotionEvent.ACTION_DOWN -&gt; desc = <span class="string">"<span class="subst">${desc}</span>按下"</span></span><br><span class="line">                <span class="comment">// 移动手指</span></span><br><span class="line">                MotionEvent.ACTION_MOVE -&gt; desc = <span class="string">"<span class="subst">${desc}</span>移动"</span></span><br><span class="line">                <span class="comment">// 松开手指</span></span><br><span class="line">                MotionEvent.ACTION_UP -&gt; desc = <span class="string">"<span class="subst">${desc}</span>提起"</span></span><br><span class="line">                <span class="comment">// 取消手势</span></span><br><span class="line">                MotionEvent.ACTION_CANCEL -&gt; desc = <span class="string">"<span class="subst">${desc}</span>取消"</span></span><br><span class="line">            }</span><br><span class="line">            desc = <span class="string">"<span class="subst">${desc}</span>\n动作发生位置是：横坐标<span class="subst">${event.x}</span>，纵坐标<span class="subst">${event.y}</span>，压力为<span class="subst">${event.pressure}</span>"</span></span><br><span class="line">        }</span><br><span class="line">        mBinding.tvTouch.text = desc</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/09/05/%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92/6.png" alt=""></p><p>除了单点触摸，智能手机还普遍支持<strong>多点触控</strong>，即响应两个及以上手指同时按压屏幕。下面是处理多点触控的示例代码：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TouchMultipleActivity</span> : <span class="type">BaseActivity</span>&lt;<span class="type">ActivityTouchMultipleBinding</span>&gt;</span>() {</span><br><span class="line">    <span class="comment">// 次要点是否按下</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> isMinorDown = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> ActivityTouchMultipleBinding.<span class="title">initBinding</span><span class="params">()</span></span> {</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTouchEvent</span><span class="params">(event: <span class="type">MotionEvent</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">        <span class="keyword">var</span> desc_major = <span class="string">""</span></span><br><span class="line">        <span class="keyword">var</span> desc_minor = <span class="string">""</span></span><br><span class="line">       event?.apply {</span><br><span class="line">           <span class="comment">// 从开机到现在的毫秒数</span></span><br><span class="line">           <span class="keyword">var</span> seconds = (eventTime/<span class="number">1000</span>).toInt()</span><br><span class="line">           desc_major = <span class="string">"主要动作发生时间：开机距离现在<span class="subst">${seconds / <span class="number">3600</span>}</span>:<span class="subst">${seconds % <span class="number">3600</span>}</span>:<span class="subst">${seconds % <span class="number">60</span>}</span>\n主要动作名称是："</span></span><br><span class="line">           isMinorDown = pointerCount &gt;= <span class="number">2</span></span><br><span class="line">           <span class="comment">// 获得包括次要点在内的触摸行为</span></span><br><span class="line">           <span class="keyword">var</span> action:<span class="built_in">Int</span> = action.and(MotionEvent.ACTION_MASK)</span><br><span class="line">           <span class="keyword">when</span>(action){</span><br><span class="line">               <span class="comment">// 按下手指</span></span><br><span class="line">               MotionEvent.ACTION_DOWN -&gt; desc_major = <span class="string">"<span class="subst">${desc_major}</span>按下"</span></span><br><span class="line">               <span class="comment">// 移动手指</span></span><br><span class="line">               MotionEvent.ACTION_MOVE -&gt; desc_major = <span class="string">"<span class="subst">${desc_major}</span>移动"</span></span><br><span class="line">               <span class="comment">// 松开手指</span></span><br><span class="line">               MotionEvent.ACTION_UP -&gt; desc_major = <span class="string">"<span class="subst">${desc_major}</span>提起"</span></span><br><span class="line">               <span class="comment">// 取消手势</span></span><br><span class="line">               MotionEvent.ACTION_CANCEL -&gt; desc_major = <span class="string">"<span class="subst">${desc_major}</span>取消"</span></span><br><span class="line">               <span class="comment">// 次要点按下</span></span><br><span class="line">               MotionEvent.ACTION_POINTER_DOWN -&gt; desc_minor = <span class="string">"<span class="subst">${desc_major}</span>次要动作名称是：按下"</span></span><br><span class="line">               <span class="comment">// 次要点松开</span></span><br><span class="line">               MotionEvent.ACTION_POINTER_UP -&gt; desc_minor = <span class="string">"<span class="subst">${desc_major}</span>次要动作名称是：提起"</span></span><br><span class="line">           }</span><br><span class="line">           desc_major = <span class="string">"<span class="subst">${desc_major}</span>\n主要动作发生位置是：横坐标<span class="subst">${x}</span>,纵坐标<span class="subst">${y}</span>"</span></span><br><span class="line">       }</span><br><span class="line">        mBinding.tvTouchMajor.text = desc_major</span><br><span class="line">        <span class="comment">// 存在次要点触摸</span></span><br><span class="line">        <span class="keyword">if</span> (isMinorDown || !TextUtils.isEmpty(desc_minor)){</span><br><span class="line">            desc_minor = <span class="string">"<span class="subst">${desc_minor}</span>\n次要动作发生位置是：横坐标<span class="subst">${event?.getX(<span class="number">1</span>)}</span>，纵坐标<span class="subst">${event?.getY(<span class="number">1</span>)}</span>"</span></span><br><span class="line">            mBinding.tvTouchMinor.text = desc_minor</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/09/05/%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92/7.png" alt=""></p><h3 id="3-跟踪滑动轨迹实现手写签名"><a href="#3-跟踪滑动轨迹实现手写签名" class="headerlink" title="3.跟踪滑动轨迹实现手写签名"></a>3.跟踪滑动轨迹实现手写签名</h3><p>​        实现手写签名需要结合绘图的路径工具Path，具体的实现步骤说明如下：</p><ol><li>按下手指时，调用Path对象的moveTo方法，将路径起点移到触摸点。</li><li>移动手指时，调用Path对象的quadTo方法，记录本次触摸点与上次触摸点之间的路径。</li><li>移动手指或者手指提起时，调用Canvas对象的drawPath方法，将本次触摸轨迹绘制在画布上。</li></ol><p>自定义手写签名控件的示例代码如下：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>： LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span>： 2022/9/6</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：自定义手写签名控件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SignatureView</span></span>(context: Context,attrs:AttributeSet?):View(context, attrs) {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> TAG = <span class="string">"SignatureView"</span></span><br><span class="line">    <span class="comment">// 声明一个画笔对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mPathPaint = Paint()</span><br><span class="line">    <span class="comment">// 声明一个路径对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mPath = Path()</span><br><span class="line">    <span class="comment">// 画笔颜色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mPathPaintColor = Color.BLACK</span><br><span class="line">    <span class="comment">// 画笔线宽</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mStrokeWidth = <span class="number">3f</span></span><br><span class="line">    <span class="comment">// 路径位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mPathPos = PathPosition()</span><br><span class="line">    <span class="comment">// 路径位置列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span>  mPathList = ArrayList&lt;PathPosition&gt;()</span><br><span class="line">    <span class="comment">// 上次触摸点的横纵坐标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mLastPos:PointF? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> {</span><br><span class="line">        <span class="keyword">if</span> (attrs != <span class="literal">null</span>){</span><br><span class="line">            <span class="comment">// 根据SignatureView的属性定义，从布局文件中获取属性数组描述</span></span><br><span class="line">            <span class="keyword">val</span> attrArray = getContext().obtainStyledAttributes(attrs,R.styleable.SignatureView)</span><br><span class="line">            <span class="comment">// 根据属性描述定义，获取布局文件中的画笔颜色</span></span><br><span class="line">            mPathPaintColor = attrArray.getColor(R.styleable.SignatureView_paint_color,Color.BLACK)</span><br><span class="line">            <span class="comment">// 根据属性描述定义，获取布局文件中的画笔线宽</span></span><br><span class="line">            mStrokeWidth = attrArray.getInt(R.styleable.SignatureView_stroke_width,<span class="number">3</span>).toFloat()</span><br><span class="line">            <span class="comment">// 回收属性数组描述</span></span><br><span class="line">            attrArray.recycle()</span><br><span class="line">        }</span><br><span class="line">        initView()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initView</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">// 设置画笔的线宽</span></span><br><span class="line">        mPathPaint.strokeWidth = mStrokeWidth</span><br><span class="line">        <span class="comment">// 设置画笔的类型。STROK表示空心，FILL表示实心</span></span><br><span class="line">        mPathPaint.style = Paint.Style.STROKE</span><br><span class="line">        <span class="comment">// 设置画笔的颜色</span></span><br><span class="line">        mPathPaint.color = mPathPaintColor</span><br><span class="line">        <span class="comment">// 开启当前视图的绘图缓存</span></span><br><span class="line">        isDrawingCacheEnabled = <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清空画布</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">clear</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">// 重置路径对象</span></span><br><span class="line">        mPath.reset()</span><br><span class="line">        <span class="comment">// 清空路径列表</span></span><br><span class="line">        mPathList.clear()</span><br><span class="line">        <span class="comment">// 立即刷新视图（线程安全方式）</span></span><br><span class="line">        postInvalidate()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 撤销上一次绘制</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">revoke</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (mPathList.size &gt; <span class="number">0</span>){</span><br><span class="line">            <span class="comment">// 移除路径位置列表中的最后一个路径</span></span><br><span class="line">            mPathList.removeAt(mPathList.size - <span class="number">1</span>)</span><br><span class="line">            <span class="comment">// 重置路径对象</span></span><br><span class="line">            mPath.reset()</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> mPathList.indices) {</span><br><span class="line">                <span class="keyword">val</span> pp = mPathList.<span class="keyword">get</span>(i)</span><br><span class="line">                <span class="comment">// 移动到上一个坐标点</span></span><br><span class="line">                mPath.moveTo(pp.prePos.x,pp.prePos.y)</span><br><span class="line">                <span class="comment">// 连接上一个坐标点和下一个坐标点</span></span><br><span class="line">                mPath.quadTo(pp.prePos.x,pp.prePos.y,pp.nextPos.x,pp.nextPos.y)</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 立即刷新视图（线程安全方式）</span></span><br><span class="line">            postInvalidate()</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDraw</span><span class="params">(canvas: <span class="type">Canvas</span>?)</span></span> {</span><br><span class="line">        <span class="comment">// 在画布上绘制指定路径线条</span></span><br><span class="line">        canvas?.drawPath(mPath,mPathPaint)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在发生触摸事件时触发</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTouchEvent</span><span class="params">(event: <span class="type">MotionEvent</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">        <span class="keyword">when</span>(event?.action){</span><br><span class="line">            <span class="comment">// 按下手指</span></span><br><span class="line">            MotionEvent.ACTION_DOWN -&gt; {</span><br><span class="line">                <span class="comment">// 移动到指定坐标点</span></span><br><span class="line">                mPath.moveTo(event.x,event.y)</span><br><span class="line">                mPathPos.prePos = PointF(event.x,event.y)</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 移动手指</span></span><br><span class="line">            MotionEvent.ACTION_MOVE -&gt; {</span><br><span class="line">                <span class="comment">// 连接上一个坐标点和当前坐标点</span></span><br><span class="line">                mLastPos?.apply {</span><br><span class="line">                    mPath.quadTo(x,y,event.x,event.y)</span><br><span class="line">                }</span><br><span class="line">                mPathPos.nextPos = PointF(event.x,event.y)</span><br><span class="line">                <span class="comment">// 往路径位置列表添加路径位置</span></span><br><span class="line">                mPathList.add(mPathPos)</span><br><span class="line">                <span class="comment">// 创建新的路径位置</span></span><br><span class="line">                mPathPos = PathPosition()</span><br><span class="line">                mPathPos.prePos = PointF(event.x,event.y)</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 松开手指</span></span><br><span class="line">            MotionEvent.ACTION_UP -&gt; {</span><br><span class="line">                <span class="comment">// 连接上一个坐标点和当前坐标点</span></span><br><span class="line">                mPath.quadTo(mLastPos!!.x,mLastPos!!.y,event.x,event.y)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        mLastPos = PointF(event!!.x,event.y)</span><br><span class="line">        <span class="comment">// 立即刷新视图（线程安全方式）</span></span><br><span class="line">        postInvalidate()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>PathPosition.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个路径位置实体类，包括上个落点的横纵坐标，以及下个落点的横纵坐标</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathPosition</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> PointF prePos; <span class="comment">// 上个落点的横纵坐标</span></span><br><span class="line">    <span class="keyword">public</span> PointF nextPos; <span class="comment">// 下个落点的横纵坐标</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>activity:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SignatureActivity</span> : <span class="type">BaseActivity</span>&lt;<span class="type">ActivitySignatureBinding</span>&gt;</span>(),View.OnClickListener {</span><br><span class="line">    <span class="comment">// 签名图片的文件路径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mImagePath = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> ActivitySignatureBinding.<span class="title">initBinding</span><span class="params">()</span></span> {</span><br><span class="line">        mBinding.btnBeginSignature.setOnClickListener(<span class="keyword">this</span><span class="symbol">@SignatureActivity</span>)</span><br><span class="line">        mBinding.btnEndSignature.setOnClickListener(<span class="keyword">this</span><span class="symbol">@SignatureActivity</span>)</span><br><span class="line">        mBinding.btnResetSignature.setOnClickListener(<span class="keyword">this</span><span class="symbol">@SignatureActivity</span>)</span><br><span class="line">        mBinding.btnRevokeSignature.setOnClickListener(<span class="keyword">this</span><span class="symbol">@SignatureActivity</span>)</span><br><span class="line">        mBinding.btnSaveSignature.setOnClickListener(<span class="keyword">this</span><span class="symbol">@SignatureActivity</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">(v: <span class="type">View</span>?)</span></span> {</span><br><span class="line">        mBinding.apply {</span><br><span class="line">            <span class="keyword">when</span>(v?.id){</span><br><span class="line">                btnSaveSignature.id -&gt; {</span><br><span class="line">                    <span class="keyword">if</span> (TextUtils.isEmpty(mImagePath)){</span><br><span class="line">                        Toast.makeText(<span class="keyword">this</span><span class="symbol">@SignatureActivity</span>,<span class="string">"请先开始然后结束签名"</span>,Toast.LENGTH_SHORT).show()</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                    }</span><br><span class="line">                    <span class="comment">// 通知相册来了张新图片</span></span><br><span class="line">                    BitmapUtil.notifyPhotoAlbum(<span class="keyword">this</span><span class="symbol">@SignatureActivity</span>,mImagePath)</span><br><span class="line">                }</span><br><span class="line">                btnBeginSignature.id -&gt; {</span><br><span class="line">                    <span class="comment">// 开启签名视图的绘图缓存</span></span><br><span class="line">                    viewSignature.isDrawingCacheEnabled = <span class="literal">true</span></span><br><span class="line">                }</span><br><span class="line">                btnResetSignature.id -&gt; {</span><br><span class="line">                    <span class="comment">// 点击了重置按钮</span></span><br><span class="line">                    <span class="comment">// 清空签名视图</span></span><br><span class="line">                    viewSignature.clear()</span><br><span class="line">                }</span><br><span class="line">                btnRevokeSignature.id -&gt; {</span><br><span class="line">                    <span class="comment">// 回退签名视图的最近一笔绘画</span></span><br><span class="line">                    viewSignature.revoke()</span><br><span class="line">                }</span><br><span class="line">                btnEndSignature.id -&gt; {</span><br><span class="line">                    <span class="comment">// 签名视图的绘图缓存不可用</span></span><br><span class="line">                    <span class="keyword">if</span> (!viewSignature.isDrawingCacheEnabled){</span><br><span class="line">                        <span class="comment">// 签名视图的绘图缓存不可用</span></span><br><span class="line">                        Toast.makeText(<span class="keyword">this</span><span class="symbol">@SignatureActivity</span>, <span class="string">"请先开始签名"</span>, Toast.LENGTH_LONG).show()</span><br><span class="line">                    } <span class="keyword">else</span> { <span class="comment">// 签名视图的绘图缓存当前可用</span></span><br><span class="line">                        <span class="comment">// 从绘图缓存获取位图对象</span></span><br><span class="line">                        <span class="keyword">val</span> bitmap = viewSignature.drawingCache</span><br><span class="line">                        <span class="comment">// 生成图片文件的保存路径</span></span><br><span class="line">                        mImagePath = <span class="string">"<span class="subst">${getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS)}</span>/<span class="subst">${DateUtil.getNowTime()}</span>.jpg"</span></span><br><span class="line">                        <span class="comment">// 把位图保存为图片文件</span></span><br><span class="line">                        BitmapUtil.saveImage(mImagePath,bitmap)</span><br><span class="line">                        <span class="comment">// 设置图像视图的路径对象</span></span><br><span class="line">                        ivSignatureNew.setImageURI(Uri.parse(mImagePath))</span><br><span class="line">                        <span class="comment">// 延迟100毫秒后启动绘图缓存的重置任务</span></span><br><span class="line">                        Handler(Looper.myLooper()!!).postDelayed({</span><br><span class="line">                            <span class="comment">// 关闭签名视图的绘图缓存</span></span><br><span class="line">                            viewSignature.isDrawingCacheEnabled = <span class="literal">false</span></span><br><span class="line">                            <span class="comment">// 开启签名视图的绘图缓存</span></span><br><span class="line">                            viewSignature.isDrawingCacheEnabled = <span class="literal">true</span></span><br><span class="line">                        },<span class="number">100</span>)</span><br><span class="line">                    }</span><br><span class="line"></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/09/05/%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92/8.png" alt=""></p><h2 id="根据触摸行为辨别手势动作"><a href="#根据触摸行为辨别手势动作" class="headerlink" title="根据触摸行为辨别手势动作"></a>根据触摸行为辨别手势动作</h2><h3 id="1-区分点击和长按动作"><a href="#1-区分点击和长按动作" class="headerlink" title="1.区分点击和长按动作"></a>1.区分点击和长按动作</h3><p>​        区分点击和长按动作，只要看按压时长是否超过500毫秒即可，没超过的表示点击动作，超过了的表示长按动作。其实，除了按压时长之外，按压力度也是一个重要的参考指标。通常，点击时按得比较轻，长按时按得相对重。依据按压时长与按压力度两项指标即可有效地辨别点击和长按动作。</p><p>​        接下来尝试自定义点击视图，且以按压点为圆心绘制圆圈，从而分别观察点击与长按之时的圆圈大小。定义点击视图的示例代码如下：</p><p>ClickView.kt:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>： LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span>： 2022/9/6</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：以按压点为圆心绘制圆圈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClickView</span></span>(context:Context,attrs:AttributeSet?) :View(context, attrs) {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mPaint = Paint()</span><br><span class="line">    <span class="comment">// 上次按下手指的系统时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mLastTime = <span class="number">0L</span></span><br><span class="line">    <span class="comment">// 按下手指的坐标点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mPos:PointF? = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 按压的压力值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mPressure = <span class="number">0F</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> dip_10 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mListener:LiftListener? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> {</span><br><span class="line">        dip_10 = Utils.dip2px(context,<span class="number">10f</span>)</span><br><span class="line">        mPaint.color = Color.DKGRAY</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDraw</span><span class="params">(canvas: <span class="type">Canvas</span>?)</span></span> {</span><br><span class="line">       mPos?.apply {</span><br><span class="line">           <span class="comment">// 以按压点为圆心，压力值为半径，在画布上绘制实心圆</span></span><br><span class="line">           canvas?.drawCircle(x,y,dip_10*mPressure,mPaint)</span><br><span class="line">       }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在发生触摸事件时触发</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTouchEvent</span><span class="params">(event: <span class="type">MotionEvent</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">        <span class="keyword">if</span> (event?.action == MotionEvent.ACTION_DOWN</span><br><span class="line">            || (event!!.pressure &gt; mPressure)){</span><br><span class="line">            mPos = PointF(event.x,event.y)</span><br><span class="line">            <span class="comment">// 获取本次触摸过程的最大压力值</span></span><br><span class="line">            mPressure = event.pressure</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">when</span>(event.action){</span><br><span class="line">            <span class="comment">// 按下手指</span></span><br><span class="line">            MotionEvent.ACTION_DOWN -&gt; {</span><br><span class="line">                mLastTime = event.eventTime</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 移动手指</span></span><br><span class="line">            MotionEvent.ACTION_MOVE -&gt; {}</span><br><span class="line">            <span class="comment">// 松开手指</span></span><br><span class="line">            MotionEvent.ACTION_UP -&gt; {</span><br><span class="line">                mListener?.let {</span><br><span class="line">                    it.onLift(event.eventTime - mLastTime,mPressure)</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 立即刷新视图（线程安全方式）</span></span><br><span class="line">        postInvalidate()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个手势抬起监听器</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">LiftListener</span></span>{</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">onLift</span><span class="params">(time_interval: <span class="type">Long</span>,pressure:<span class="type">Float</span>)</span></span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setLiftListener</span><span class="params">(listener: <span class="type">LiftListener</span>)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.mListener = listener</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Activity.kt:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClickLongActivity</span> : <span class="type">BaseActivity</span>&lt;<span class="type">ActivityClickLongBinding</span>&gt;</span>() {</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> ActivityClickLongBinding.<span class="title">initBinding</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="comment">//手势抬起监听 回调</span></span><br><span class="line">        cvGesture.setLiftListener(<span class="keyword">object</span> : ClickView.LiftListener{</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onLift</span><span class="params">(time_interval: <span class="type">Long</span>, pressure: <span class="type">Float</span>)</span></span> {</span><br><span class="line">               <span class="keyword">val</span> gesture = <span class="keyword">if</span> (time_interval &gt; <span class="number">500</span>) <span class="string">"长按"</span> <span class="keyword">else</span> <span class="string">"点击"</span></span><br><span class="line">               <span class="keyword">val</span> desc = <span class="string">"本次按压时长为<span class="subst">${time_interval}</span>毫秒，属于<span class="subst">${gesture}</span>动作。\n按压的压力峰值为<span class="subst">${pressure}</span>"</span></span><br><span class="line">               tvDesc.text = desc</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/09/05/%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92/9.png" alt=""></p><h3 id="2-识别手势滑动的方向"><a href="#2-识别手势滑动的方向" class="headerlink" title="2.识别手势滑动的方向"></a>2.识别手势滑动的方向</h3><p>​        手势在水平方向掠过，意味着左右滑动；手势在垂直方向掠过，意味着上下滚动。左右滑动的话，手势触摸的起点和终点在水平方向的位移必定大于垂直方向的位移；反之，上下滚动的话，它们在垂直方向的位移必定大于水平方向的位移。据此<strong>可将滑动方向的判定过程分解成以下三个步骤</strong>：</p><ol><li>对于按下手指事件，把当前点标记为起点，并记录起点的横纵坐标。</li><li>对于松开手指事件，把当前点标记为终点，并记录终点的横纵坐标。</li><li>分别计算起点与终点的横坐标距离以及它们的纵坐标距离，根据横纵坐标的大小关系判断本次手势的滑动方向。</li></ol><p>​       于是重写自定义触摸视图的onTouchEvent方法，分别处理按下、移动、松开三种手势事件；同时重写该视图的onDraw方法，描绘起点与终点的位置，以及从起点到终点的路径线条。按照上述思路，编写单指触摸视图的代码：</p><p>SingleTouchView.kt:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>： LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span>： 2022/9/7</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：描绘起点与终点的位置，以及从起点到终点的路径线条</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleTouchView</span></span>(context:Context,attrs:AttributeSet?):View(context, attrs) {</span><br><span class="line">    <span class="comment">// 路径的画笔，以及起点和终点的画笔</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> mPathPaint:Paint</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> mBeginPaint:Paint</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> mEndPaint:Paint</span><br><span class="line">    <span class="comment">// 声明一个路径对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mPath = Path()</span><br><span class="line">    <span class="comment">// 路径中的上次触摸点，本次按压的起点和终点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> mLastPos:PointF</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mBeginPos:PointF? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mEndPos:PointF? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> dip_17:<span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mListener:FlipListener? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> {</span><br><span class="line">        dip_17 = Utils.dip2px(context,<span class="number">17F</span>)</span><br><span class="line">        initView()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化视图</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initView</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">// 创建路径的画笔</span></span><br><span class="line">        mPathPaint = Paint()</span><br><span class="line">        mPathPaint.strokeWidth = <span class="number">5f</span></span><br><span class="line">        mPathPaint.style = Paint.Style.STROKE</span><br><span class="line">        mPathPaint.color = Color.BLACK</span><br><span class="line">        <span class="comment">//创建起点画笔</span></span><br><span class="line">        mBeginPaint = Paint()</span><br><span class="line">        mBeginPaint.color = Color.RED</span><br><span class="line">        mBeginPaint.textSize = dip_17.toFloat()</span><br><span class="line">        <span class="comment">//创建终点画笔</span></span><br><span class="line">        mEndPaint = Paint()</span><br><span class="line">        mEndPaint.color = Color.DKGRAY</span><br><span class="line">        mEndPaint.textSize = dip_17.toFloat()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个手势飞掠的监听器接口</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">FlipListener</span></span>{</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">onFlipFinish</span><span class="params">(beginPos:<span class="type">PointF</span>,endPos:<span class="type">PointF</span>)</span></span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDraw</span><span class="params">(canvas: <span class="type">Canvas</span>?)</span></span> {</span><br><span class="line">        canvas?.apply {</span><br><span class="line">            <span class="comment">// 在画布上绘制指定路径线条</span></span><br><span class="line">            drawPath(mPath,mPathPaint)</span><br><span class="line">            <span class="keyword">if</span> (mBeginPos != <span class="literal">null</span>){</span><br><span class="line">                drawCircle(mBeginPos!!.x,mBeginPos!!.y,<span class="number">10f</span>,mBeginPaint)</span><br><span class="line">                drawText(<span class="string">"起点"</span>,mBeginPos!!.x-dip_17,mBeginPos!!.y + dip_17,mBeginPaint)</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (mEndPos != <span class="literal">null</span>){</span><br><span class="line">                drawCircle(mEndPos!!.x,mEndPos!!.y,<span class="number">10f</span>,mEndPaint)</span><br><span class="line">                drawText(<span class="string">"终点"</span>,mEndPos!!.x-dip_17,mEndPos!!.y + dip_17,mEndPaint)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTouchEvent</span><span class="params">(event: <span class="type">MotionEvent</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line"></span><br><span class="line">        <span class="keyword">when</span>(event?.action){</span><br><span class="line">            <span class="comment">//按下手指</span></span><br><span class="line">            MotionEvent.ACTION_DOWN -&gt; {</span><br><span class="line">                mPath.reset()</span><br><span class="line">                <span class="comment">//移动到指定点坐标</span></span><br><span class="line">                mPath.moveTo(event.x,event.y)</span><br><span class="line">                mBeginPos = PointF(event.x,event.y)</span><br><span class="line">                mEndPos = <span class="literal">null</span></span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//移动手指</span></span><br><span class="line">            MotionEvent.ACTION_MOVE -&gt; {</span><br><span class="line">                <span class="comment">// 连接上一个坐标点和当前坐标点</span></span><br><span class="line">                mPath.quadTo(mLastPos.x,mLastPos.y,event.x,event.y)</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//松开手指</span></span><br><span class="line">            MotionEvent.ACTION_UP -&gt; {</span><br><span class="line">                mEndPos = PointF(event.x,event.y)</span><br><span class="line">                <span class="comment">// 连接上一个坐标点和当前坐标点</span></span><br><span class="line">                mPath.quadTo(mLastPos.x,mLastPos.y,event.x,event.y)</span><br><span class="line">                mListener?.onFlipFinish(mBeginPos!!,mEndPos!!)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        mLastPos = PointF(event!!.x,event.y)</span><br><span class="line">        <span class="comment">// 立即刷新视图（线程安全方式）</span></span><br><span class="line">        postInvalidate()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setFlipListener</span><span class="params">(listener:<span class="type">FlipListener</span>)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.mListener = listener</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Activity.kt</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SlideDirectionActivity</span> : <span class="type">BaseActivity</span>&lt;<span class="type">ActivitySlideDirectionBinding</span>&gt;</span>() {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> TAG = <span class="string">"SlideDirectionActivity"</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> ActivitySlideDirectionBinding.<span class="title">initBinding</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="comment">// 设置单点触摸视图的手势飞掠监听器</span></span><br><span class="line">        stvGesture.setFlipListener(<span class="keyword">object</span> :SingleTouchView.FlipListener{</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFlipFinish</span><span class="params">(beginPos: <span class="type">PointF</span>, endPos: <span class="type">PointF</span>)</span></span> {</span><br><span class="line">                <span class="keyword">val</span> offsetX = abs(endPos.x - beginPos.x)</span><br><span class="line">                <span class="keyword">val</span> offsetY = abs(endPos.y - beginPos.y)</span><br><span class="line">                <span class="keyword">var</span> gesture = <span class="string">""</span></span><br><span class="line">                gesture = <span class="keyword">when</span>{</span><br><span class="line">                    <span class="comment">//水平方向滑动</span></span><br><span class="line">                    offsetX &gt; offsetY -&gt; <span class="keyword">if</span>(endPos.x - beginPos.x &gt; <span class="number">0</span>) <span class="string">"向右"</span> <span class="keyword">else</span> <span class="string">"向左"</span></span><br><span class="line">                    <span class="comment">//垂直方向滑动</span></span><br><span class="line">                    offsetX &lt; offsetY -&gt; <span class="keyword">if</span>(endPos.y - beginPos.y &gt; <span class="number">0</span>) <span class="string">"向下"</span> <span class="keyword">else</span> <span class="string">"向上"</span></span><br><span class="line">                    <span class="comment">//视图对角线</span></span><br><span class="line">                    <span class="keyword">else</span> -&gt; <span class="string">"对角线"</span></span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">val</span> desc = <span class="string">"<span class="subst">${DateUtil.getNowTime()}</span> 本次手势为<span class="subst">${gesture}</span>滑动"</span></span><br><span class="line">                tvDesc.text = desc</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/09/05/%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92/10.png" alt=""></p><h3 id="3-辨别缩放与旋转手势"><a href="#3-辨别缩放与旋转手势" class="headerlink" title="3.辨别缩放与旋转手势"></a>3.辨别缩放与旋转手势</h3><p>​        由于两个手指各有自己的按下与松开事件，都有对应的触摸起点和终点，因此只要依次记录两个手指的起点和终点坐标，根据这四个点的位置关系就能算出手势的动作类别。</p><p>​        缩放手势与旋转手势的区分，则需分别计算第一个手势起点和终点的连线，以及第二个手势起点和终点的连线，再判断两根连线是倾向于在相同方向上缩放还是倾向于绕着连线中点旋转。</p><p>双指触摸视图的关键代码：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>： LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span>： 2022/9/7</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：双指触摸视图</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiTouchView</span></span>(context: Context,attrs:AttributeSet?):View(context, attrs) {</span><br><span class="line">    <span class="comment">// 路径的画笔、虚线的画笔，以及起点和终点的画笔</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> mPathPaint:Paint</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> mBeginPaint:Paint</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> mEndPaint:Paint</span><br><span class="line">    <span class="comment">// 声明主要动作的路径对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mFirstPath = Path()</span><br><span class="line">    <span class="comment">// 声明次要动作的路径对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mSecondPath = Path()</span><br><span class="line">    <span class="comment">// 主要动作的上次触摸点，本次按压的起点和终点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mFirstLastP:PointF? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mFirstBeginP:PointF? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mFirstEndP:PointF? = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 次要动作的上次触摸点，本次按压的起点和终点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mSecondLastP:PointF? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mSecondBeginP:PointF? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mSecondEndP:PointF? = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 是否结束触摸</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> isFinish = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> dip_10 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> dip_5 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mListener:SlideListener? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> {</span><br><span class="line">        dip_10 = Utils.dip2px(context,<span class="number">10f</span>)</span><br><span class="line">        dip_5 = Utils.dip2px(context,<span class="number">5f</span>)</span><br><span class="line">        initView()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initView</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">// 创建路径的画笔</span></span><br><span class="line">        mPathPaint = Paint()</span><br><span class="line">        <span class="comment">// 设置画笔的线宽</span></span><br><span class="line">        mPathPaint.strokeWidth = <span class="number">5f</span></span><br><span class="line">        <span class="comment">// 设置画笔的类型。STROK表示空心，FILL表示实心</span></span><br><span class="line">        mPathPaint.style = Paint.Style.STROKE</span><br><span class="line">        <span class="comment">// 设置画笔的颜色</span></span><br><span class="line">        mPathPaint.color = Color.BLACK</span><br><span class="line">        <span class="keyword">val</span> thinDash = DashPathEffect(floatArrayOf(dip_10.toFloat(), dip_5.toFloat()), <span class="number">1F</span>)</span><br><span class="line"></span><br><span class="line">        mBeginPaint = Paint()</span><br><span class="line">        mBeginPaint.strokeWidth = <span class="number">3f</span></span><br><span class="line">        mBeginPaint.style = Paint.Style.STROKE</span><br><span class="line">        mBeginPaint.color = Color.RED</span><br><span class="line">        <span class="comment">// 设置虚线的样式</span></span><br><span class="line">        mBeginPaint.pathEffect = thinDash</span><br><span class="line">        <span class="keyword">val</span> denseDash = DashPathEffect(floatArrayOf(dip_10.toFloat(), dip_5.toFloat()), <span class="number">1F</span>)</span><br><span class="line"></span><br><span class="line">        mEndPaint = Paint()</span><br><span class="line">        mEndPaint.strokeWidth = <span class="number">3F</span></span><br><span class="line">        mEndPaint.style = Paint.Style.STROKE</span><br><span class="line">        mEndPaint.color = Color.GREEN</span><br><span class="line">        mEndPaint.pathEffect = denseDash</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDraw</span><span class="params">(canvas: <span class="type">Canvas</span>?)</span></span> {</span><br><span class="line">        <span class="comment">// 在画布上绘制指定路径线条</span></span><br><span class="line">        canvas?.drawPath(mFirstPath,mPathPaint)</span><br><span class="line">        <span class="comment">// 在画布上绘制指定路径线条</span></span><br><span class="line">        canvas?.drawPath(mSecondPath,mPathPaint)</span><br><span class="line">        <span class="comment">// 结束触摸，则绘制两个起点的连线，以及两个终点的连线</span></span><br><span class="line">        <span class="keyword">if</span> (isFinish) {</span><br><span class="line">            <span class="comment">// 绘制两个起点的连线</span></span><br><span class="line">            <span class="keyword">if</span> (mFirstBeginP != <span class="literal">null</span> &amp;&amp; mSecondBeginP != <span class="literal">null</span>){</span><br><span class="line">                canvas?.drawLine(mFirstBeginP!!.x,mFirstBeginP!!.y,mSecondBeginP!!.x,mSecondBeginP!!.y,mBeginPaint)</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (mFirstEndP != <span class="literal">null</span> &amp;&amp; mSecondEndP != <span class="literal">null</span>){</span><br><span class="line">                canvas?.drawLine(mFirstEndP!!.x,mFirstEndP!!.y,mSecondEndP!!.x,mSecondEndP!!.y,mEndPaint)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTouchEvent</span><span class="params">(event: <span class="type">MotionEvent</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">        <span class="keyword">val</span> firstP = PointF(event!!.x,event.y)</span><br><span class="line">        <span class="keyword">var</span> secondP: PointF? = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">if</span> (event.pointerCount &gt;= <span class="number">2</span>){</span><br><span class="line">            secondP = PointF(event.getX(<span class="number">1</span>),event.getY(<span class="number">1</span>))</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 获得包括次要点在内的触摸行为</span></span><br><span class="line">        <span class="keyword">val</span> action = event.action and(MotionEvent.ACTION_MASK)</span><br><span class="line">        <span class="keyword">when</span>(action){</span><br><span class="line">            <span class="comment">// 主要点按下</span></span><br><span class="line">            MotionEvent.ACTION_DOWN -&gt; {</span><br><span class="line">                isFinish = <span class="literal">false</span></span><br><span class="line">                mFirstPath.reset()</span><br><span class="line">                mSecondPath.reset()</span><br><span class="line">                <span class="comment">// 移动到指定坐标点</span></span><br><span class="line">                mFirstPath.moveTo(firstP.x,firstP.y)</span><br><span class="line">                mFirstBeginP = PointF(firstP.x,firstP.y)</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 移动手指</span></span><br><span class="line">            MotionEvent.ACTION_MOVE -&gt; {</span><br><span class="line">                <span class="keyword">if</span> (!isFinish){</span><br><span class="line">                    <span class="comment">// 连接上一个坐标点和当前坐标点</span></span><br><span class="line">                    mFirstPath.quadTo(mFirstLastP!!.x,mFirstLastP!!.y,firstP.x,firstP.y)</span><br><span class="line">                    <span class="keyword">if</span> (secondP != <span class="literal">null</span>){</span><br><span class="line">                        <span class="comment">// 连接上一个坐标点和当前坐标点</span></span><br><span class="line">                        mSecondPath.quadTo(mSecondLastP!!.x,mSecondLastP!!.y,secondP.x,secondP.y)</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 主要点松开</span></span><br><span class="line">            MotionEvent.ACTION_UP -&gt; {}</span><br><span class="line">            <span class="comment">// 次要点按下</span></span><br><span class="line">            MotionEvent.ACTION_POINTER_DOWN -&gt; {</span><br><span class="line">                <span class="comment">// 移动到指定坐标点</span></span><br><span class="line">                mSecondPath.moveTo(secondP!!.x,secondP.y)</span><br><span class="line">                mSecondBeginP = PointF(secondP.x,secondP.y)</span><br><span class="line">                mSecondEndP = <span class="literal">null</span></span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 次要点松开</span></span><br><span class="line">            MotionEvent.ACTION_POINTER_UP -&gt; {</span><br><span class="line">                isFinish = <span class="literal">true</span></span><br><span class="line">                mFirstEndP = PointF(firstP.x,firstP.y)</span><br><span class="line">                mSecondEndP = PointF(secondP!!.x,secondP.y)</span><br><span class="line">                mListener?.onSlideFinish(mFirstBeginP!!,mFirstEndP!!,mSecondBeginP!!,mSecondEndP!!)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        mFirstLastP = PointF(firstP.x,firstP.y)</span><br><span class="line">        <span class="keyword">if</span> (secondP != <span class="literal">null</span>){</span><br><span class="line">            mSecondLastP = PointF(secondP.x,secondP.y)</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 立即刷新视图（线程安全方式）</span></span><br><span class="line">        postInvalidate()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setSlideListener</span><span class="params">(slideListener: <span class="type">SlideListener</span>)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.mListener = slideListener</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">SlideListener</span></span>{</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">onSlideFinish</span><span class="params">(firstBeginP:<span class="type">PointF</span>,firstEndP:<span class="type">PointF</span>,secondBeginP:<span class="type">PointF</span>,secondEndP:<span class="type">PointF</span>)</span></span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Activity:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScaleRotateActivity</span> : <span class="type">BaseActivity</span>&lt;<span class="type">ActivityScaleRotateBinding</span>&gt;</span>() {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> ActivityScaleRotateBinding.<span class="title">initBinding</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="comment">// 设置多点触摸视图的手势滑动监听器</span></span><br><span class="line">        mtvGesture.setSlideListener(<span class="keyword">object</span> :MultiTouchView.SlideListener{</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSlideFinish</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                firstBeginP: <span class="type">PointF</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                firstEndP: <span class="type">PointF</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                secondBeginP: <span class="type">PointF</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                secondEndP: <span class="type">PointF</span></span></span></span><br><span class="line"><span class="function"><span class="params">            )</span></span> {</span><br><span class="line">                <span class="comment">// 上次两个触摸点之间的距离</span></span><br><span class="line">                <span class="keyword">val</span> preWholeDistance = PointUtil.distance(firstBeginP,secondBeginP)</span><br><span class="line">                <span class="comment">// 当前两个触摸点之间的距离</span></span><br><span class="line">                <span class="keyword">val</span> nowWholeDistance = PointUtil.distance(firstEndP,secondEndP)</span><br><span class="line">                <span class="comment">// 主要点在前后两次落点之间的距离</span></span><br><span class="line">                <span class="keyword">val</span> primaryDistance = PointUtil.distance(firstBeginP,firstEndP)</span><br><span class="line">                <span class="comment">// 次要点在前后两次落点之间的距离</span></span><br><span class="line">                <span class="keyword">val</span> secondaryDistance = PointUtil.distance(secondBeginP,secondEndP)</span><br><span class="line">                <span class="keyword">if</span> (abs(nowWholeDistance - preWholeDistance) &gt; Math.sqrt(<span class="number">2.0</span>)/<span class="number">2f</span> * (primaryDistance + secondaryDistance)){</span><br><span class="line">                    <span class="comment">// 倾向于在原始线段的相同方向上移动，则判作缩放动作</span></span><br><span class="line">                    <span class="keyword">val</span> scaleRatio = nowWholeDistance / preWholeDistance</span><br><span class="line">                    <span class="keyword">val</span> desc = <span class="string">"本次手势为缩放动作，<span class="subst">${if (scaleRatio&gt;=<span class="number">1</span>) <span class="string">"放大倍数"</span> else <span class="string">"缩小比例"</span>}</span>为<span class="subst">${scaleRatio}</span>"</span></span><br><span class="line">                    tvDesc.text = desc</span><br><span class="line">                } <span class="keyword">else</span> {<span class="comment">// 倾向于在原始线段的垂直方向上移动，则判作旋转动作</span></span><br><span class="line">                    <span class="comment">// 计算上次触摸事件的旋转角度</span></span><br><span class="line">                    <span class="keyword">val</span> preDegree = PointUtil.degree(firstBeginP,secondBeginP)</span><br><span class="line">                    <span class="comment">// 计算本次触摸事件的旋转角度</span></span><br><span class="line">                    <span class="keyword">val</span> nowDegree = PointUtil.degree(firstEndP,secondEndP)</span><br><span class="line">                    <span class="keyword">val</span> desc = <span class="string">"本次手势为旋转动作，<span class="subst">${if (nowDegree&gt;preDegree) <span class="string">"顺时针"</span> else <span class="string">"逆时针"</span>}</span>方向旋转了<span class="subst">${abs(nowDegree-preDegree)}</span>度"</span></span><br><span class="line">                    tvDesc.text = desc</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/09/05/%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92/11.png" alt=""></p><h2 id="手势冲突处理"><a href="#手势冲突处理" class="headerlink" title="手势冲突处理"></a>手势冲突处理</h2><ol><li><p><strong>上下滚动与左右滑动的冲突</strong></p><p>既可由父视图主动判断是否拦截，又可由子视图根据情况向父反馈是否允许拦截；</p></li><li><p><strong>内部滑动与翻页滑动的冲突</strong></p><p>可以通过限定在某块区域接管特定的手势来实现对不同手势的区分处理；</p></li><li><p><strong>正常下拉与下拉刷新的冲突</strong></p><p>需要监控当前是否已经下拉到页面顶部，若未拉到页面顶部则为正常下拉，若已拉到页面顶部则为下拉刷新。</p></li></ol><h3 id="1-上下滚动与左右滑动的冲突处理"><a href="#1-上下滚动与左右滑动的冲突处理" class="headerlink" title="1.上下滚动与左右滑动的冲突处理"></a>1.上下滚动与左右滑动的冲突处理</h3><p>​        Android控件繁多，允许滚动或滑动操作的视图也不少，例如滚动视图、翻页视图等，如果开发者要自己接管手势处理，比如通过手势控制横幅（Banner）轮播，那么这个页面的滑动就存在冲突的情况，如果系统响应了A视图的滑动事件，就顾不上B视图的滑动事件。</p><p>​        要解决这个滑动冲突，关键在于提供某种方式通知滚动视图，告诉它什么时候可以上下滚动、什么时候不能上下滚动。</p><p>这个通知方式主要有两种：</p><ul><li>一种是父视图主动向下“查询”，即由滚动视图判断滚动规则并决定是否拦截手势；</li><li>另一种是子视图向上“反映”，即由子视图告诉滚动视图是否拦截手势。</li></ul><p><strong>1. 由滚动视图判断滚动规则</strong></p><p>​        前面提到，容器类视图可以重写<strong>onInterceptTouchEvent</strong>方法，根据条件判断结果决定是否拦截发给子视图的手势。那么可以自定义一个滚动视图，在<strong>onInterceptTouchEvent</strong>方法中判断本次手势的横坐标与纵坐标，如果纵坐标的偏移大于横坐标的偏移，此时就是垂直滚动，应拦截手势并交给自身进行上下滚动；否则表示此时为水平滚动，不应拦截手势，而是让子视图处理左右滑动事件。</p><p>CustomScrollView.kt:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>： LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span>： 2022/9/8</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：自定义滚动视图拦截垂直滚动并放过水平滚动</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomScrollView</span></span>(context : Context,attrs:AttributeSet?) :ScrollView(context, attrs) {</span><br><span class="line">    <span class="comment">// 横纵方向上的偏移</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mOffsetX = <span class="number">0F</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mOffsetY = <span class="number">0F</span></span><br><span class="line">    <span class="comment">// 上次落点的位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mLastPos:PointF? = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 与边缘线的间距阈值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mInterval:<span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在拦截触摸事件时触发</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onInterceptTouchEvent</span><span class="params">(ev: <span class="type">MotionEvent</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">        Log.d(<span class="string">"CustomScrollView"</span>,<span class="string">"触摸事件拦截"</span>)</span><br><span class="line">        <span class="keyword">var</span> result = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> (ev?.action == MotionEvent.ACTION_DOWN){</span><br><span class="line">            Log.d(<span class="string">"CustomScrollView"</span>,<span class="string">"按下"</span>)</span><br><span class="line">            mLastPos = PointF(ev.x,ev.y)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(ev)</span><br><span class="line">        } <span class="keyword">else</span> {<span class="comment">// 其余动作，包括手指移动、手指松开等等</span></span><br><span class="line">            Log.d(<span class="string">"CustomScrollView"</span>,<span class="string">"其他"</span>)</span><br><span class="line">            <span class="keyword">val</span> thisPos = PointF(ev!!.x,ev.y)</span><br><span class="line">            <span class="comment">//x轴偏差</span></span><br><span class="line">            mOffsetX += Math.abs(thisPos.x - mLastPos!!.x)</span><br><span class="line">            <span class="comment">//y轴偏差</span></span><br><span class="line">            mOffsetY += Math.abs(thisPos.y - mLastPos!!.y)</span><br><span class="line">            mLastPos = thisPos</span><br><span class="line">            result = <span class="keyword">when</span>{</span><br><span class="line">                <span class="comment">// false传给表示子控件，此时为点击事件</span></span><br><span class="line">                mOffsetX &lt; mInterval &amp;&amp; mOffsetY &lt; mInterval -&gt; {</span><br><span class="line">                    Log.d(<span class="string">"CustomScrollView"</span>,<span class="string">"触摸事件拦截,此时为点击事件"</span>)</span><br><span class="line">                    <span class="literal">false</span></span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// true表示不传给子控件，此时为垂直滑动</span></span><br><span class="line">                mOffsetX &lt; mOffsetY -&gt; {</span><br><span class="line">                    Log.d(<span class="string">"CustomScrollView"</span>,<span class="string">"触摸事件拦截,此时为垂直滑动"</span>)</span><br><span class="line">                    <span class="literal">true</span></span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// false表示传给子控件，此时为水平滑动</span></span><br><span class="line">                <span class="keyword">else</span> -&gt; {</span><br><span class="line">                    Log.d(<span class="string">"CustomScrollView"</span>,<span class="string">"触摸事件拦截,此时为水平滑动"</span>)</span><br><span class="line">                    <span class="literal">false</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/09/05/%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92/12.png" alt=""></p><p>​    <strong>2. 子视图告诉滚动视图能否拦截手势</strong></p><p>​        调用requestDisallowInterceptTouchEvent方法（输入参数为true时表示禁止上级拦截触摸事件）。至于何时调用该方法，当然是在检测到滑动前后的横坐标偏移大于纵坐标偏移时。对于横幅采用手势监听器的情况，可重写onTouchEvent方法（在该方法中加入坐标偏移的判断），示例代码如下：</p><p>BannerPager.kt:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTouchEvent</span><span class="params">(event: <span class="type">MotionEvent</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">        Log.d(<span class="string">"BannerPager"</span>,<span class="string">"touch"</span>)</span><br><span class="line">        <span class="keyword">var</span> result = <span class="literal">false</span></span><br><span class="line">        <span class="comment">// 按下手指</span></span><br><span class="line">        <span class="keyword">if</span> (event?.action == MotionEvent.ACTION_DOWN){</span><br><span class="line">            Log.d(<span class="string">"BannerPager"</span>,<span class="string">"按下"</span>)</span><br><span class="line">            mLastPos = PointF(event.x,event.y)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event)</span><br><span class="line">        } <span class="keyword">else</span> { <span class="comment">// 其余动作，包括移动手指、松开手指等等</span></span><br><span class="line">            Log.d(<span class="string">"BannerPager"</span>,<span class="string">"其他"</span>)</span><br><span class="line">            <span class="keyword">val</span> thisPos = PointF(event!!.x,event.y)</span><br><span class="line">            <span class="comment">// x轴偏差</span></span><br><span class="line">            mOffsetX += Math.abs(thisPos.x - mLastPos!!.x)</span><br><span class="line">            <span class="comment">// y轴偏差</span></span><br><span class="line">            mOffsetY += Math.abs(thisPos.y - mLastPos!!.y)</span><br><span class="line">            mLastPos = thisPos</span><br><span class="line">            <span class="comment">// 水平方向的滚动</span></span><br><span class="line">            <span class="keyword">if</span> (mOffsetX &gt;= mOffsetY){</span><br><span class="line">                Log.d(<span class="string">"BannerPager"</span>,<span class="string">"水平方向的滚动"</span>)</span><br><span class="line">                <span class="comment">// 如果外层是普通的ScrollView，则此处不允许父容器的拦截动作</span></span><br><span class="line">                <span class="comment">// CustomScrollActivity通过自定义滚动视图来区分水平滑动还是垂直滑动</span></span><br><span class="line">                <span class="comment">// DisallowScrollActivity使用滚动视图，则此处需要下面代码禁止父容器拦截</span></span><br><span class="line">                parent.requestDisallowInterceptTouchEvent(<span class="literal">true</span>)</span><br><span class="line">                <span class="comment">// 返回true表示要继续处理</span></span><br><span class="line">                result = <span class="literal">true</span></span><br><span class="line">            } <span class="keyword">else</span> {<span class="comment">// 垂直方向的滚动</span></span><br><span class="line">                <span class="comment">// 返回false表示不处理了</span></span><br><span class="line">                result = <span class="literal">false</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>修改后左右滑动能够正常翻页，整个页面也不容易上下滚动。</p><h3 id="2-内部滑动与翻页滑动的冲突处理"><a href="#2-内部滑动与翻页滑动的冲突处理" class="headerlink" title="2.内部滑动与翻页滑动的冲突处理"></a>2.内部滑动与翻页滑动的冲突处理</h3><p>​        比如页面采用翻页视图的话，页面内的每个区域之间是左右滑动的关系，并且每个区域都可以拥有自己的滚动视图。如此一来，在左右滑动时，滚动视图反而变成翻页视图的子视图，前面的冲突处理办法就不能奏效了，只能另想办法。</p><p>​        自定义一个基于ViewPager的翻页视图是一种思路，另外还可以借鉴抽屉布局DrawerLayout。抽屉布局与翻页视图在滑动方面存在区别，翻页视图在内部的任何位置均可触发滑动事件，而抽屉布局只在屏幕两侧边缘才会触发滑动事件。</p><p>下面是DrawerLayout的常用方法：</p><ul><li><p>setDrawerShadow：设置首页面的渐变阴影图形。</p></li><li><p>addDrawerListener：添加抽屉面板的拉出监听器，需实现DrawerListener的如下4个方法：</p><ol><li>onDrawerSlide：抽屉面板滑动时触发。</li><li>onDrawerOpened：抽屉面板打开时触发。</li><li>onDrawerClosed：抽屉面板关闭时触发。</li><li>onDrawerStateChanged：抽屉面板的状态发生变化时触发。</li></ol></li><li><p>removeDrawerListener：移除抽屉面板的拉出监听器。</p></li><li><p>closeDrawers：关闭所有抽屉面板。</p></li><li><p>openDrawer：打开指定抽屉面板。</p></li><li><p>closeDrawer：关闭指定抽屉面板。</p></li><li><p>isDrawerOpen：判断指定抽屉面板是否打开。</p></li></ul><p>​       抽屉布局不仅可以拉出左侧抽屉面板，还可以拉出右侧抽屉面板。左侧面板与右侧面板的区别在于：左侧面板在布局文件中的layout_gravity属性为left，右侧面板在布局文件中的layout_gravity属性为right。</p><p>下面是使用DrawerLayout的布局文件：</p><p>drawer_layout.xml:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;androidx.drawerlayout.widget.DrawerLayout</span><br><span class="line">        android:id=<span class="string">"@+id/dl_layout"</span></span><br><span class="line">        android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">        android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">        tools:context=<span class="string">".ui.DrawerLayoutActivity"</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;LinearLayout</span><br><span class="line">            android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">            android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">            android:orientation=<span class="string">"vertical"</span>&gt;</span><br><span class="line"></span><br><span class="line">            &lt;LinearLayout</span><br><span class="line">                android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">                android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">                android:orientation=<span class="string">"horizontal"</span>&gt;</span><br><span class="line"></span><br><span class="line">                &lt;Button</span><br><span class="line">                    android:id=<span class="string">"@+id/btn_drawer_left"</span></span><br><span class="line">                    android:layout_width=<span class="string">"0dp"</span></span><br><span class="line">                    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">                    android:layout_weight=<span class="string">"1"</span></span><br><span class="line">                    android:gravity=<span class="string">"center"</span></span><br><span class="line">                    android:text=<span class="string">"打开左边侧滑"</span></span><br><span class="line">                    android:textColor=<span class="string">"@color/black"</span></span><br><span class="line">                    android:textSize=<span class="string">"17sp"</span> /&gt;</span><br><span class="line"></span><br><span class="line">                &lt;Button</span><br><span class="line">                    android:id=<span class="string">"@+id/btn_drawer_right"</span></span><br><span class="line">                    android:layout_width=<span class="string">"0dp"</span></span><br><span class="line">                    android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">                    android:layout_weight=<span class="string">"1"</span></span><br><span class="line">                    android:gravity=<span class="string">"center"</span></span><br><span class="line">                    android:text=<span class="string">"打开右边侧滑"</span></span><br><span class="line">                    android:textColor=<span class="string">"@color/black"</span></span><br><span class="line">                    android:textSize=<span class="string">"17sp"</span> /&gt;</span><br><span class="line">            &lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:id=<span class="string">"@+id/tv_drawer_center"</span></span><br><span class="line">                android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">                android:layout_height=<span class="string">"0dp"</span></span><br><span class="line">                android:layout_weight=<span class="string">"1"</span></span><br><span class="line">                android:gravity=<span class="string">"top|center"</span></span><br><span class="line">                android:paddingTop=<span class="string">"30dp"</span></span><br><span class="line">                android:text=<span class="string">"这里是首页"</span></span><br><span class="line">                android:textColor=<span class="string">"@color/black"</span></span><br><span class="line">                android:textSize=<span class="string">"17sp"</span> /&gt;</span><br><span class="line">        &lt;/LinearLayout&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 抽屉布局左边的侧滑列表视图，layout_gravity属性设定了它的对齐方式 --&gt;</span><br><span class="line">        &lt;ListView</span><br><span class="line">            android:id=<span class="string">"@+id/lv_drawer_left"</span></span><br><span class="line">            android:layout_width=<span class="string">"150dp"</span></span><br><span class="line">            android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">            android:layout_gravity=<span class="string">"left"</span></span><br><span class="line">            android:background=<span class="string">"#ffdd99"</span> /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 抽屉布局右边的侧滑列表视图，layout_gravity属性设定了它的对齐方式 --&gt;</span><br><span class="line">        &lt;ListView</span><br><span class="line">            android:id=<span class="string">"@+id/lv_drawer_right"</span></span><br><span class="line">            android:layout_width=<span class="string">"150dp"</span></span><br><span class="line">            android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">            android:layout_gravity=<span class="string">"right"</span></span><br><span class="line">            android:background=<span class="string">"#99ffdd"</span> /&gt;</span><br><span class="line">    &lt;/androidx.drawerlayout.widget.DrawerLayout&gt;</span><br></pre></td></tr></tbody></table></figure><p>activity:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DrawerLayoutActivity</span> : <span class="type">BaseActivity</span>&lt;<span class="type">ActivityDrawerLayoutBinding</span>&gt;</span>() {</span><br><span class="line">    <span class="comment">// 左侧菜单项的标题数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> titleArr = arrayOf(<span class="string">"首页"</span>, <span class="string">"新闻"</span>, <span class="string">"娱乐"</span>, <span class="string">"博客"</span>, <span class="string">"论坛"</span>)</span><br><span class="line">    <span class="comment">// 右侧菜单项的标题数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> settingArray = arrayOf(<span class="string">"我的"</span>, <span class="string">"设置"</span>, <span class="string">"关于"</span>)</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> ActivityDrawerLayoutBinding.<span class="title">initBinding</span><span class="params">()</span></span> {</span><br><span class="line">        dlLayout.addDrawerListener(SlidingListener())</span><br><span class="line">        btnDrawerLeft.setOnClickListener {</span><br><span class="line">            <span class="comment">// 左侧菜单已打开</span></span><br><span class="line">            <span class="keyword">if</span> (dlLayout.isDrawerOpen(lvDrawerLeft)){</span><br><span class="line">                dlLayout.closeDrawer(lvDrawerLeft)</span><br><span class="line">            } <span class="keyword">else</span> { <span class="comment">// 左侧菜单未打开</span></span><br><span class="line">                dlLayout.openDrawer(lvDrawerLeft)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        btnDrawerRight.setOnClickListener {</span><br><span class="line">            <span class="comment">// 左侧菜单已打开</span></span><br><span class="line">            <span class="keyword">if</span> (dlLayout.isDrawerOpen(lvDrawerRight)){</span><br><span class="line">                dlLayout.closeDrawer(lvDrawerRight)</span><br><span class="line">            } <span class="keyword">else</span> { <span class="comment">// 左侧菜单未打开</span></span><br><span class="line">                dlLayout.openDrawer(lvDrawerRight)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        initListDrawer()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化侧滑的菜单列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initListDrawer</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">val</span> leftAdapter = ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>,R.layout.item_select,titleArr)</span><br><span class="line">        mBinding.lvDrawerLeft.adapter = leftAdapter</span><br><span class="line">        mBinding.lvDrawerLeft.setOnItemClickListener { parent, view, position, id -&gt;</span><br><span class="line">            run {</span><br><span class="line">                <span class="keyword">val</span> text = titleArr[position]</span><br><span class="line">                mBinding.tvDrawerCenter.text = <span class="string">"这里是<span class="subst">${text}</span>页面"</span></span><br><span class="line">                <span class="comment">// 关闭所有抽屉</span></span><br><span class="line">                mBinding.dlLayout.closeDrawers()</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 下面初始化右侧菜单的列表视图</span></span><br><span class="line">        <span class="keyword">val</span> rightAdapter = ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>,R.layout.item_select,settingArray)</span><br><span class="line">        mBinding.lvDrawerRight.adapter = rightAdapter</span><br><span class="line">        mBinding.lvDrawerRight.setOnItemClickListener { parent, view, position, id -&gt;</span><br><span class="line">            run {</span><br><span class="line">                <span class="keyword">val</span> text = settingArray[position]</span><br><span class="line">                mBinding.tvDrawerCenter.text = <span class="string">"这里是<span class="subst">${text}</span>页面"</span></span><br><span class="line">                <span class="comment">// 关闭所有抽屉</span></span><br><span class="line">                mBinding.dlLayout.closeDrawers()</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个抽屉布局的侧滑监听器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">SlidingListener</span>:<span class="type">DrawerLayout.DrawerListener{</span></span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在拉出抽屉的过程中触发</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDrawerSlide</span><span class="params">(drawerView: <span class="type">View</span>, slideOffset: <span class="type">Float</span>)</span></span> {}</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在侧滑抽屉打开后触发</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDrawerOpened</span><span class="params">(drawerView: <span class="type">View</span>)</span></span> {</span><br><span class="line">            <span class="keyword">if</span> (drawerView.id == R.id.lv_drawer_left){</span><br><span class="line">                mBinding.btnDrawerLeft.text = <span class="string">"关闭左边侧滑"</span></span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                mBinding.btnDrawerRight.text = <span class="string">"关闭右边侧滑"</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在侧滑抽屉关闭后触发</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDrawerClosed</span><span class="params">(drawerView: <span class="type">View</span>)</span></span> {</span><br><span class="line">            <span class="keyword">if</span> (drawerView.id == R.id.lv_drawer_left){</span><br><span class="line">                mBinding.btnDrawerLeft.text = <span class="string">"打开左边侧滑"</span></span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                mBinding.btnDrawerRight.text = <span class="string">"打开右边侧滑"</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在侧滑状态变更时触发</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDrawerStateChanged</span><span class="params">(newState: <span class="type">Int</span>)</span></span> {}</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/09/05/%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92/13.png" alt=""></p><h3 id="3-正常下拉与下拉刷新的冲突处理"><a href="#3-正常下拉与下拉刷新的冲突处理" class="headerlink" title="3.正常下拉与下拉刷新的冲突处理"></a>3.正常下拉与下拉刷新的冲突处理</h3><p>​        自定义的下拉刷新布局首先要能够区分是页面的正常下滚还是拉到头部要求刷新。</p><p>​        二者之间的区别很简单，直观上就是判断当前页面是否拉到顶。倘若还没拉到顶，继续下拉动作属于正常的页面滚动；倘若已经拉到顶，继续下拉动作才会拉出头部提示刷新。所以此处需捕捉页面滚动到顶部的事件，相对应的是页面滚动到底部的事件。</p><p>​        鉴于App首页基本采用滚动视图实现页面滚动功能，故而该问题就变成如何监听该视图滚到顶部或者底部。ScrollView提供了滚动行为的变化方法onScrollChanged，通过重写该方法即可判断是否到达顶部或底部。重写后的代码片段如下所示：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>： LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span>： 2022/9/9</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PullDownScrollView</span></span>(context:Context,attrs:AttributeSet):ScrollView(context, attrs) {</span><br><span class="line">    <span class="comment">//横纵方向上的偏移</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mOffsetX = <span class="number">0f</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mOffsetY = <span class="number">0f</span></span><br><span class="line">    <span class="comment">//上次落点的横纵坐标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mLastPosX = <span class="number">0f</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mLastPosY = <span class="number">0f</span></span><br><span class="line">    <span class="comment">// 与边缘线的间距阈值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mInterval = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明一个滚动监听器对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mScrollListener:ScrollListener? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> {</span><br><span class="line">        mInterval = Utils.dip2px(context,<span class="number">3F</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onInterceptTouchEvent</span><span class="params">(ev: <span class="type">MotionEvent</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">        <span class="keyword">var</span> result = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">when</span>(ev?.action){</span><br><span class="line">            MotionEvent.ACTION_DOWN -&gt; {</span><br><span class="line">                mLastPosX = ev.x</span><br><span class="line">                mLastPosY = ev.y</span><br><span class="line">                result = <span class="keyword">super</span>.onInterceptTouchEvent(ev)</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> -&gt; {<span class="comment">// 其余动作，包括手指移动、手指松开等等'</span></span><br><span class="line">                <span class="keyword">val</span> thisPosX = ev!!.x</span><br><span class="line">                <span class="keyword">val</span> thisPosY = ev.y</span><br><span class="line">                <span class="comment">//X轴偏差</span></span><br><span class="line">                mOffsetX += Math.abs(thisPosX - mLastPosX)</span><br><span class="line">                <span class="comment">//Y轴偏差</span></span><br><span class="line">                mOffsetY += Math.abs(thisPosY - mLastPosY)</span><br><span class="line">                mLastPosX = thisPosX</span><br><span class="line">                mLastPosY = thisPosY</span><br><span class="line">                <span class="keyword">if</span>(mOffsetX &lt; mInterval &amp;&amp; mOffsetY &lt; mInterval){</span><br><span class="line">                    <span class="comment">// false表示传给子控件，此时为点击事件</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                } <span class="keyword">else</span> <span class="keyword">if</span> (mOffsetX &lt; mOffsetY){</span><br><span class="line">                    <span class="comment">// true表示不传给子控件，此时为垂直滑动</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    <span class="comment">// false表示传给子控件，此时为水平滑动</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在滚动变更时触发</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onScrollChanged</span><span class="params">(l: <span class="type">Int</span>, t: <span class="type">Int</span>, oldl: <span class="type">Int</span>, oldt: <span class="type">Int</span>)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onScrollChanged(l, t, oldl, oldt)</span><br><span class="line">        <span class="keyword">var</span> isScrolledToTop = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">var</span> isScrolledToBottom = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">when</span>{</span><br><span class="line">            scrollY == <span class="number">0</span> -&gt; {</span><br><span class="line">                isScrolledToTop = <span class="literal">true</span></span><br><span class="line">                isScrolledToBottom = <span class="literal">false</span></span><br><span class="line">            }</span><br><span class="line">            (scrollY + height - paddingTop - paddingBottom) == getChildAt(<span class="number">0</span>).height -&gt; {</span><br><span class="line">                isScrolledToBottom = <span class="literal">true</span></span><br><span class="line">                isScrolledToTop = <span class="literal">false</span></span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> -&gt; {<span class="comment">// 未拉到顶部，也未拉到底部</span></span><br><span class="line">                isScrolledToTop = <span class="literal">false</span></span><br><span class="line">                isScrolledToTop = <span class="literal">false</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 定义一个滚动监听器接口，用于捕捉到达顶部和到达底部的事件</span></span><br><span class="line">        <span class="keyword">if</span> (mScrollListener != <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">if</span> (isScrolledToTop){<span class="comment">// 已经滚动到顶部</span></span><br><span class="line">                <span class="comment">// 触发下拉到顶部的事件</span></span><br><span class="line">                mScrollListener!!.onScrolledToTop()</span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (isScrolledToBottom){ <span class="comment">// 已经滚动到底部</span></span><br><span class="line">                <span class="comment">// 触发上拉到底部的事件</span></span><br><span class="line">                mScrollListener!!.onScrolledToBottom()</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个滚动监听器接口，用于捕捉到达顶部和到达底部的事件</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">ScrollListener</span></span>{</span><br><span class="line">        <span class="comment">// 已经滚动到底部</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">onScrolledToBottom</span><span class="params">()</span></span></span><br><span class="line">        <span class="comment">// 已经滚动到顶部</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">onScrolledToTop</span><span class="params">()</span></span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置滚动监听器</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setScrollListener</span><span class="params">(listener:<span class="type">ScrollListener</span>)</span></span>{</span><br><span class="line">        mScrollListener = listener</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​        只要活动代码设置了滚动视图的滚动监听器，就能由onScrolledToTop方法判断当前页面是否拉到顶了。既然能够知晓到顶与否，同步变更状态栏和工具栏的背景色也就可行了。</p><p>​        考虑到下拉布局在上、滚动视图在下，故它俩的父布局继承线性布局比较合适。新的父视图需要完成以下3项任务：</p><ol><li>在子视图的最前面自动添加一个下拉刷新头部，保证该下拉头部位于整个页面的最上方。</li><li>给前面自定义的滚动视图注册滚动监听器和触摸监听器。其中，滚动监听器用于处理到达顶部和到达底部的事件，触摸监听器用于处理下拉过程中的持续位移。</li><li>重写触摸监听器接口需要实现的onTouch方法。这个是重中之重，因为该方法包含了所有的手势下拉跟踪处理，既要准确响应正常的下拉手势，也要避免误操作不属于下拉的手势，比如下面几种情况就要统筹考虑：<ul><li>水平方向的左右滑动，不做额外处理。</li><li>垂直方向的向上拉动，不做额外处理。</li><li>下拉的时候尚未拉到页面顶部，不做额外处理。</li><li>拉到顶之后继续下拉，则在隐藏工具栏的同时让下拉头部跟着往下滑动。</li><li>下拉刷新过程中松开手势，判断下拉滚动的距离，距离太短则直接缩回头部、不刷新页面，只有距离足够长才会刷新页面，等待刷新完毕再缩回头部。有了新定义的下拉上层布局，搭配自定义的滚动视图就能很方便地实现高仿京东首页的下拉刷新效果了。</li></ul></li></ol><p>布局：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:background</span>=<span class="string">"@color/white"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">tools:context</span>=<span class="string">".ui.PullRefreshActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">com.example.eventstudy.widget.PullDownRefreshLayout</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:id</span>=<span class="string">"@+id/pdrl_main"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="tag">&lt;<span class="name">com.example.eventstudy.widget.PullDownScrollView</span></span></span><br><span class="line"><span class="tag">               <span class="attr">android:id</span>=<span class="string">"@+id/pdsv_main"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">               <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                   <span class="tag">&lt;<span class="name">com.example.eventstudy.widget.BannerPager</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">android:id</span>=<span class="string">"@+id/banner_pager"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">android:layout_height</span>=<span class="string">"300dp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                   <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">android:id</span>=<span class="string">"@+id/tv_flipper"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">android:layout_height</span>=<span class="string">"300dp"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">android:background</span>=<span class="string">"#eeffee"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">android:gravity</span>=<span class="string">"top|center_horizontal"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">android:paddingTop</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">android:text</span>=<span class="string">"请反复下拉页面和上拉页面"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">android:textColor</span>=<span class="string">"@color/black"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">android:textSize</span>=<span class="string">"17sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                   <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">android:layout_height</span>=<span class="string">"1000dp"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">android:background</span>=<span class="string">"#9999ff"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                   <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">android:layout_height</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">android:background</span>=<span class="string">"@color/white"</span> /&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">com.example.eventstudy.widget.PullDownScrollView</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;/<span class="name">com.example.eventstudy.widget.PullDownRefreshLayout</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- title_drag.xml是带搜索框的工具栏布局 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">android:id</span>=<span class="string">"@+id/drag_title"</span> <span class="attr">layout</span>=<span class="string">"@layout/title_drag"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>自定义刷新布局：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PullDownRefreshLayout</span></span>(context:Context,attrs:AttributeSet):LinearLayout(context, attrs),View.OnTouchListener,PullDownScrollView.ScrollListener {</span><br><span class="line">    <span class="comment">// 声明一个下拉滚动视图对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mScrollView:PullDownScrollView? = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 下拉刷新头部的线性布局</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mLinearLayout:LinearLayout? = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 下拉刷新头部的高度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mLayoutHeight = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 落点的位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mOriginPos: PointF? = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 当前的下拉高度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mCurrentHeight = <span class="number">0f</span></span><br><span class="line">    <span class="comment">// 触发工具栏变色的临界滑动距离</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mCriticalDistance =<span class="number">0</span></span><br><span class="line">    <span class="comment">// 声明一个下拉刷新的监听器对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mListener:PullRefreshListener? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> {</span><br><span class="line">        <span class="comment">// 触发工具栏变色的临界滑动距离</span></span><br><span class="line">        mCriticalDistance = Utils.dip2px(context,<span class="number">20F</span>)</span><br><span class="line">        <span class="comment">// 获取默认的下拉刷新头部布局</span></span><br><span class="line">        mLinearLayout = LayoutInflater.from(context).inflate(R.layout.header_drag,<span class="literal">null</span>) <span class="keyword">as</span> LinearLayout</span><br><span class="line">        <span class="comment">// 计算下拉刷新头部布局的高度</span></span><br><span class="line">        mLayoutHeight = Utils.getRealHeight(mLinearLayout)</span><br><span class="line">        <span class="comment">// 间隔是负值，表示不但不远离，反而插了进去</span></span><br><span class="line">        mLinearLayout!!.setPadding(<span class="number">0</span>,-<span class="number">1</span> * mLayoutHeight,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 立刻刷新线性布局（线程安全方式）</span></span><br><span class="line">        mLinearLayout!!.postInvalidate()</span><br><span class="line">        <span class="comment">// 把下拉刷新头部布局添加到最前面</span></span><br><span class="line">        addView(mLinearLayout,<span class="number">0</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 刷新完毕，恢复原页面，也就是仍把下拉头部缩了回去</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">finishRefresh</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">// 恢复主页面</span></span><br><span class="line">        resumePage()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">addView</span><span class="params">(child: <span class="type">View</span>?,index:<span class="type">Int</span>, params: <span class="type">ViewGroup</span>.<span class="type">LayoutParams</span>?)</span></span> {</span><br><span class="line">        <span class="comment">// PullDownRefreshLayout下面要有个PullDownScrollView节点，不然会报错</span></span><br><span class="line">        <span class="keyword">if</span> (child!! <span class="keyword">is</span> PullDownScrollView){</span><br><span class="line">            mScrollView = child <span class="keyword">as</span> PullDownScrollView</span><br><span class="line">            <span class="comment">// 设置触摸监听器，目的是监控拉动的距离</span></span><br><span class="line">            mScrollView?.setOnTouchListener(<span class="keyword">this</span>)</span><br><span class="line">            <span class="comment">// 设置滚动监听器，目的是判断是否拉到顶部或者拉到底部</span></span><br><span class="line">            mScrollView?.setScrollListener(<span class="keyword">this</span>)</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">super</span>.addView(child,index,params)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在拦截触摸事件时触发</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onInterceptTouchEvent</span><span class="params">(ev: <span class="type">MotionEvent</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">        <span class="keyword">val</span> action = ev?.action</span><br><span class="line">        <span class="comment">// 按下动作，记录下拉的起始位置</span></span><br><span class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN){</span><br><span class="line">            mOriginPos = PointF(ev.rawX,ev.rawY)</span><br><span class="line">            mCurrentHeight = mScrollView!!.scrollY.toFloat()</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(ev)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onTouch</span><span class="params">(v: <span class="type">View</span>?, event: <span class="type">MotionEvent</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">        <span class="comment">// 垂直方向的滚动距离小于临界距离，表示接近初始页面，需要把工具栏和状态栏恢复原样。</span></span><br><span class="line">        <span class="comment">// 否则表示页面正在上拉，需要给工具栏和状态栏变色。</span></span><br><span class="line">        <span class="keyword">if</span> (mScrollView!!.scrollY &lt;= mCriticalDistance){</span><br><span class="line">            mListener?.pullDown(mScrollView!!.scaleY*<span class="number">1.0</span> / mCriticalDistance)</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            mListener?.pullUp(mScrollView!!.scaleY * <span class="number">1.0</span> / mCriticalDistance)</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">val</span> action = event?.action</span><br><span class="line">        <span class="comment">// 按下0，松开1，滑动2</span></span><br><span class="line">        <span class="keyword">when</span> {</span><br><span class="line">            event!!.rawY &lt;= mOriginPos!!.y -&gt; {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            }</span><br><span class="line">            mScrollView!!.scrollY &gt; <span class="number">0</span> -&gt; { <span class="comment">// 未拉到顶部，不处理</span></span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">            mScrollView!!.scrollY &lt;= <span class="number">0</span> -&gt; { <span class="comment">// 正在下拉，则隐藏工具栏</span></span><br><span class="line">                mListener!!.hideTitle()</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 计算下拉过程的拉动距离</span></span><br><span class="line">        <span class="keyword">val</span> offsetY = event!!.rawY - mOriginPos!!.y - mCurrentHeight</span><br><span class="line">        <span class="keyword">when</span>(action){</span><br><span class="line">            MotionEvent.ACTION_DOWN -&gt; { <span class="comment">// 按下手指</span></span><br><span class="line">                mOriginPos?.y = event.rawY</span><br><span class="line">            }</span><br><span class="line">            MotionEvent.ACTION_MOVE -&gt; { <span class="comment">// 移动手指</span></span><br><span class="line">                <span class="comment">// 下拉刷新的实际距离减半，看起来不会太突兀</span></span><br><span class="line">                <span class="keyword">val</span> dragOffset:<span class="built_in">Int</span> = ((-<span class="number">1</span> * mLayoutHeight) + offsetY/<span class="number">2</span>).toInt()</span><br><span class="line">                <span class="comment">// 下拉刷新的头部布局露出庐山真面目啦</span></span><br><span class="line">                mLinearLayout?.setPadding(<span class="number">0</span>, dragOffset,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">                <span class="comment">// 立刻刷新线性布局（线程安全方式）</span></span><br><span class="line">                mLinearLayout?.postInvalidate()</span><br><span class="line">            }</span><br><span class="line">            MotionEvent.ACTION_UP -&gt; { <span class="comment">// 松开手指</span></span><br><span class="line">                <span class="comment">// 下拉距离太短，则直接将页面恢复原状。只有下拉距离足够长，才会触发页面刷新动作</span></span><br><span class="line">                <span class="keyword">if</span> (offsetY &lt;= Utils.dip2px(context,<span class="number">150F</span>)){</span><br><span class="line">                    resumePage()</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    mListener!!.pullRefresh()</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">resumePage</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">//设置线性布局上方的空白距离</span></span><br><span class="line">        mLinearLayout?.apply {</span><br><span class="line">            setPadding(<span class="number">0</span>,(-<span class="number">1</span> * mLayoutHeight),<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">            <span class="comment">// 立刻刷新线性布局（线程安全方式）</span></span><br><span class="line">            postInvalidate()</span><br><span class="line">            mListener?.showTitle()</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onScrolledToBottom</span><span class="params">()</span></span> {}</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onScrolledToTop</span><span class="params">()</span></span> {</span><br><span class="line">        mListener?.pullDown(<span class="number">0.0</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个下拉刷新的监听器接口</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">PullRefreshListener</span></span>{</span><br><span class="line">        <span class="comment">// 正在上拉</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">pullUp</span><span class="params">(scale:<span class="type">Double</span>)</span></span></span><br><span class="line">        <span class="comment">// 正在下拉</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">pullDown</span><span class="params">(scale:<span class="type">Double</span>)</span></span></span><br><span class="line">        <span class="comment">// 开始刷新动作</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">pullRefresh</span><span class="params">()</span></span></span><br><span class="line">        <span class="comment">//隐藏标题栏</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">hideTitle</span><span class="params">()</span></span></span><br><span class="line">        <span class="comment">//显示标题栏</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">showTitle</span><span class="params">()</span></span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setPullRefreshListener</span><span class="params">(listener: <span class="type">PullRefreshListener</span>)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.mListener = listener</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>activity:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PullRefreshActivity</span> : <span class="type">BaseActivity</span>&lt;<span class="type">ActivityPullRefreshBinding</span>&gt;</span>(),PullDownRefreshLayout.PullRefreshListener {</span><br><span class="line">    <span class="comment">// 是否正在拖动</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> isDragging = <span class="literal">false</span></span><br><span class="line">    <span class="comment">// 声明一个进度对话框对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mDialog:ProgressDialog? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> ActivityPullRefreshBinding.<span class="title">initBinding</span><span class="params">()</span></span> {</span><br><span class="line">        bannerPager.setImage(ImageList.getDefault())</span><br><span class="line">        <span class="comment">// 设置下拉刷新监听器</span></span><br><span class="line">        pdrlMain.setPullRefreshListener(<span class="keyword">this</span><span class="symbol">@PullRefreshActivity</span>)</span><br><span class="line">        <span class="comment">// 设置广告轮播条的图片点击监听器</span></span><br><span class="line">        bannerPager.setOnBannerListener(<span class="keyword">object</span> :BannerPager.BannerClickListener{</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBannerClick</span><span class="params">(position: <span class="type">Int</span>)</span></span> {</span><br><span class="line">                tvFlipper.text = <span class="string">"您点击了第<span class="subst">${position+<span class="number">1</span>}</span>张图片"</span></span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">        <span class="comment">// 添加悬浮状态栏效果</span></span><br><span class="line">        floatStatusBar()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">floatStatusBar</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">// 让App页面扩展到状态栏区域</span></span><br><span class="line">        StatusBarUtil.fullScreen(<span class="keyword">this</span>)</span><br><span class="line">        <span class="comment">// 标题栏在上方留出一段距离，看起来仍在状态栏下方</span></span><br><span class="line">        <span class="keyword">val</span> titleParams = mBinding.dragTitle.llTitle.layoutParams <span class="keyword">as</span> RelativeLayout.LayoutParams</span><br><span class="line">        <span class="comment">// 标题栏在上方留出一段距离，看起来仍在状态栏下方</span></span><br><span class="line">        titleParams.topMargin = StatusBarUtil.getStatusBarHeight(<span class="keyword">this</span>)</span><br><span class="line">        mBinding.dragTitle.llTitle.layoutParams = titleParams</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始页面刷新</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">beginRefresh</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (mDialog == <span class="literal">null</span> || !mDialog!!.isShowing){</span><br><span class="line">            <span class="comment">// 显示进度对话框</span></span><br><span class="line">            mDialog = ProgressDialog.show(<span class="keyword">this</span>,<span class="string">"请稍等"</span>,<span class="string">"正在努力刷新页面"</span>)</span><br><span class="line">            <span class="comment">// 延迟1秒后启动刷新结束任务</span></span><br><span class="line">            Handler(Looper.myLooper()!!).postDelayed({endRefresh()},<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结束页面刷新</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">endRefresh</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (isDragging){</span><br><span class="line">            <span class="comment">// 关闭进度对话框</span></span><br><span class="line">            mDialog?.dismiss()</span><br><span class="line">            mBinding.pdrlMain.finishRefresh()</span><br><span class="line">            isDragging = <span class="literal">false</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算标题栏与状态栏的渐变背景色</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getTitleBgColor</span><span class="params">(scale:<span class="type">Double</span>)</span></span>:<span class="built_in">Int</span>{</span><br><span class="line">        <span class="keyword">var</span> alpha = Math.round(scale / <span class="number">2</span> * <span class="number">255</span>)</span><br><span class="line">        alpha = Math.min(alpha,<span class="number">255</span>)</span><br><span class="line">        <span class="keyword">return</span> Color.parseColor(<span class="string">"#00000000"</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">pullUp</span><span class="params">(scale: <span class="type">Double</span>)</span></span> {</span><br><span class="line">        <span class="keyword">val</span> bgColor = getTitleBgColor(scale)</span><br><span class="line">        mBinding.dragTitle.llTitle.setBackgroundColor(bgColor)</span><br><span class="line">        mBinding.dragTitle.llTitle.visibility = View.VISIBLE</span><br><span class="line">        mBinding.dragTitle.ivScan.setImageResource(R.drawable.icon_scan_gray)</span><br><span class="line">        mBinding.dragTitle.ivMsg.setImageResource(R.drawable.icon_msg_gray)</span><br><span class="line">        <span class="comment">// 上拉页面，让状态栏背景渐渐变为白色</span></span><br><span class="line">        StatusBarUtil.setStatusBarColor(<span class="keyword">this</span>,bgColor,<span class="literal">true</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">pullDown</span><span class="params">(scale: <span class="type">Double</span>)</span></span> {</span><br><span class="line">        <span class="keyword">val</span> bgColor = getTitleBgColor(scale)</span><br><span class="line">        mBinding.dragTitle.llTitle.setBackgroundColor(bgColor)</span><br><span class="line">        mBinding.dragTitle.llTitle.visibility = View.VISIBLE</span><br><span class="line">        mBinding.dragTitle.ivScan.setImageResource(R.drawable.icon_scan_white)</span><br><span class="line">        mBinding.dragTitle.ivMsg.setImageResource(R.drawable.icon_msg_white)</span><br><span class="line">        <span class="comment">// 下拉到顶了，让状态栏背景渐渐变为透明</span></span><br><span class="line">        StatusBarUtil.setStatusBarColor(<span class="keyword">this</span>,bgColor,<span class="literal">false</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">pullRefresh</span><span class="params">()</span></span> {</span><br><span class="line">        isDragging = <span class="literal">true</span></span><br><span class="line">        beginRefresh()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">hideTitle</span><span class="params">()</span></span> {</span><br><span class="line">        mBinding.dragTitle.llTitle.visibility = View.INVISIBLE</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">showTitle</span><span class="params">()</span></span> {</span><br><span class="line">        mBinding.dragTitle.llTitle.visibility = View.INVISIBLE</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/09/05/%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92/14.png" alt=""></p><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://gitee.com/hluck/android-event-interaction.git" target="_blank" rel="noopener">https://gitee.com/hluck/android-event-interaction.git</a></p><h2 id="实战项目：仿美图秀秀的抠图工具"><a href="#实战项目：仿美图秀秀的抠图工具" class="headerlink" title="实战项目：仿美图秀秀的抠图工具"></a>实战项目：仿美图秀秀的抠图工具</h2></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;按键事件&quot;&gt;&lt;a href=&quot;#按键事件&quot; class=&quot;headerlink&quot; title=&quot;按键事件&quot;&gt;&lt;/a&gt;按键事件&lt;/h2&gt;&lt;h3 id=&quot;1-检测软键盘&quot;&gt;&lt;a href=&quot;#1-检测软键盘&quot; class=&quot;headerlink&quot; title=&quot;1.检测软键盘&quot;&gt;&lt;/a&gt;1.检测软键盘&lt;/h3&gt;&lt;p&gt;​        手机上的输入按键一般不另外处理，直接由系统按照默认情况操作。有时为了改善用户体验，需要让App拦截按键事件，并进行额外处理。拦截输入字符可通过注册文本观测器TextWatcher实现，但该监听器只适用于编辑框控件，无法用于其他控件。因此，&lt;strong&gt;若想让其他控件也能监听按键操作，则要另外调用控件对象的setOnKeyListener方法设置按键监听器，并实现监听器接口OnKeyListener的onKey方法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​        监控按键事件之前，首先要知道每个按键的编码，这样才能根据不同的编码值进行相应的处理。按键编码的取值说明见表2-1。注意，监听器OnKeyListener只会检测控制键，不会检测文本键（字母、数字、标点等）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/09/05/%E4%BA%8B%E4%BB%B6%E4%BA%A4%E4%BA%92/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;​        实际监控结果显示，每次按下控制键时，onKey方法都会收到两次重复编码的按键事件，这是因为该方法把每次按键都分成按下与松开两个动作，所以一次按键变成了两个按键动作。解决这个问题的办法很简单，就是只监控按下动作（KeyEvent.ACTION_DOWN）的按键事件，不监控松开动作（KeyEvent.ACTION_UP）的按键事件。&lt;/p&gt;
&lt;p&gt;​        虽然按键编码表存在主页键、任务键、电源键的定义，但这3个键并不开放给普通App，普通App也不应该拦截这些按键事件。&lt;/p&gt;
&lt;p&gt;相关代码：&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;KeySoftActivity&lt;/span&gt; : &lt;span class=&quot;type&quot;&gt;BaseActivity&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;ActivityKeySoftBinding&lt;/span&gt;&amp;gt;&lt;/span&gt;(),View.OnKeyListener {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; desc = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; ActivityKeySoftBinding.&lt;span class=&quot;title&quot;&gt;initBinding&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        etSoft.setOnKeyListener(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;@KeySoftActivity&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onKey&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(v: &lt;span class=&quot;type&quot;&gt;View&lt;/span&gt;?, keyCode: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;, event: &lt;span class=&quot;type&quot;&gt;KeyEvent&lt;/span&gt;?)&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;Boolean&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (event?.action == KeyEvent.ACTION_DOWN){&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            desc = &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;${desc}&lt;/span&gt;软按键编码是&lt;span class=&quot;subst&quot;&gt;${keyCode}&lt;/span&gt;，动作是按下&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;when&lt;/span&gt;(keyCode){&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                KeyEvent.KEYCODE_ENTER -&amp;gt; desc = &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;${desc}&lt;/span&gt;,按键为回车键&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                KeyEvent.KEYCODE_DEL -&amp;gt; desc = &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;${desc}&lt;/span&gt;,按键为删除键&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                KeyEvent.KEYCODE_SEARCH -&amp;gt; desc = &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;${desc}&lt;/span&gt;,按键为搜索键&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                KeyEvent.KEYCODE_BACK -&amp;gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    desc = &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;${desc}&lt;/span&gt;,按键为返回键&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;//延迟3s后启动页面关闭任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    Handler(Looper.myLooper()!!).postDelayed({finish()},&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                KeyEvent.KEYCODE_VOLUME_UP -&amp;gt; desc = &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;${desc}&lt;/span&gt;,按键为加大音量键&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                KeyEvent.KEYCODE_VOLUME_DOWN -&amp;gt; desc = &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;${desc}&lt;/span&gt;,按键为减小音量键&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            desc = &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;${desc}&lt;/span&gt;&#92;n&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mBinding.tvResult.text = desc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 返回true表示处理完了不再输入该字符，返回false表示给你输入该字符吧&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    }&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
    
      <category term="Android" scheme="https://hluck.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>WanAndriod项目记录</title>
    <link href="https://hluck.github.io/2022/08/24/WanAndriod%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/"/>
    <id>https://hluck.github.io/2022/08/24/WanAndriod%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/</id>
    <published>2022-08-24T03:11:46.214Z</published>
    <updated>2022-09-15T04:40:57.440Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p><a href="https://www.wanandroid.com/blog/show/3056" target="_blank" rel="noopener">项目博客</a></p><h2 id="bug记录"><a href="#bug记录" class="headerlink" title="bug记录"></a>bug记录</h2><h3 id="导入项目bug"><a href="#导入项目bug" class="headerlink" title="导入项目bug"></a>导入项目bug</h3><p><a href="http://t.zoukankan.com/handsometaoa-p-14154049.html" target="_blank" rel="noopener">项目导入报红解决方法</a></p><p><img src="/2022/08/24/WanAndriod%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/2.png" alt=""></p><a id="more"></a><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android.overridePathCheck=true</span><br></pre></td></tr></tbody></table></figure><h2 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h2><img src="/2022/08/24/WanAndriod%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/1.png" style="zoom:80%;"><p>activity_main.xml:</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--此处的fragment可以替换成FragmentContainerView--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/nav_host"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"androidx.navigation.fragment.NavHostFragment"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:defaultNavHost</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:navGraph</span>=<span class="string">"@navigation/nav_graph"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.google.android.material.bottomnavigation.BottomNavigationView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/bottomNavigation"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:itemRippleColor</span>=<span class="string">"@android:color/transparent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:menu</span>=<span class="string">"@menu/bottom_nav"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>首页fragment布局:</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/coordinator_layout"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:context</span>=<span class="string">".ui.home.HomeViewPagerFragment"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">androidx.viewpager2.widget.ViewPager2</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/view_pager"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.google.android.material.appbar.AppBarLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/app_bar_layout"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:theme</span>=<span class="string">"@style/Theme.WanJetpack.AppBarOverlay"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- android:fitsSystemWindows="true"是为了处理当CollapsingToolbarLayout</span></span><br><span class="line"><span class="comment">            折叠后MaterialToolbar还显示的问题，注意与 contentScrim 的区别。--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">com.google.android.material.appbar.CollapsingToolbarLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar_layout"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|snap"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:statusBarScrim</span>=<span class="string">"?attr/colorPrimary"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:toolbarId</span>=<span class="string">"@id/toolbar"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">com.google.android.material.appbar.MaterialToolbar</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:contentInsetStart</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_collapseMode</span>=<span class="string">"parallax"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:text</span>=<span class="string">"@string/tab_home"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:textAppearance</span>=<span class="string">"?attr/textAppearanceHeadline5"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">android:textColor</span>=<span class="string">"?attr/colorPrimaryDark"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">com.google.android.material.appbar.MaterialToolbar</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">com.google.android.material.appbar.CollapsingToolbarLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">com.google.android.material.tabs.TabLayout</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">"@+id/tabs"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">style</span>=<span class="string">"@style/Widget.MaterialComponents.TabLayout.Colored"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:tabIconTint</span>=<span class="string">"@drawable/tab_icon_color_selector"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:tabTextColor</span>=<span class="string">"?attr/colorPrimaryDark"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:tabRippleColor</span>=<span class="string">"@android:color/transparent"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintEnd_toStartOf</span>=<span class="string">"@id/search"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">com.google.android.material.imageview.ShapeableImageView</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:id</span>=<span class="string">"@+id/search"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_width</span>=<span class="string">"32dp"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_height</span>=<span class="string">"32dp"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:layout_marginEnd</span>=<span class="string">"24dp"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">android:src</span>=<span class="string">"@drawable/ic_search"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"@id/tabs"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"@id/tabs"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">com.google.android.material.appbar.AppBarLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.coordinatorlayout.widget.CoordinatorLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>首页文章布局：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:context</span>=<span class="string">".ui.home.HomeArticleFragment"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">androidx.swiperefreshlayout.widget.SwipeRefreshLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/swipeRefreshLayout"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">androidx.recyclerview.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/article_list"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:clipToPadding</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:overScrollMode</span>=<span class="string">"never"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:layoutManager</span>=<span class="string">"androidx.recyclerview.widget.StaggeredGridLayoutManager"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:spanCount</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">tools:listitem</span>=<span class="string">"@layout/list_item_article"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">androidx.swiperefreshlayout.widget.SwipeRefreshLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>相关文章：</p><p><a href="https://mp.weixin.qq.com/s/ppmokK3__Qx1S1cMU8y7Tg" target="_blank" rel="noopener"><strong>使用 ConcatAdapter 顺序连接其他 Adapter</strong></a></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;a href=&quot;https://www.wanandroid.com/blog/show/3056&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;项目博客&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;bug记录&quot;&gt;&lt;a href=&quot;#bug记录&quot; class=&quot;headerlink&quot; title=&quot;bug记录&quot;&gt;&lt;/a&gt;bug记录&lt;/h2&gt;&lt;h3 id=&quot;导入项目bug&quot;&gt;&lt;a href=&quot;#导入项目bug&quot; class=&quot;headerlink&quot; title=&quot;导入项目bug&quot;&gt;&lt;/a&gt;导入项目bug&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://t.zoukankan.com/handsometaoa-p-14154049.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;项目导入报红解决方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/08/24/WanAndriod%E9%A1%B9%E7%9B%AE%E8%AE%B0%E5%BD%95/2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
    
      <category term="Android" scheme="https://hluck.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>图像加工</title>
    <link href="https://hluck.github.io/2022/08/18/%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%B7%A5/"/>
    <id>https://hluck.github.io/2022/08/18/%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%B7%A5/</id>
    <published>2022-08-18T09:10:46.175Z</published>
    <updated>2023-01-05T13:50:27.685Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="图像装饰"><a href="#图像装饰" class="headerlink" title="图像装饰"></a>图像装饰</h2><h3 id="CardView"><a href="#CardView" class="headerlink" title="CardView"></a>CardView</h3><p><img src="/2022/08/18/%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%B7%A5/1.png" alt=""></p><a id="more"></a><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:context</span>=<span class="string">".ui.CardViewActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:paddingLeft</span>=<span class="string">"5dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"卡片视图样式："</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textColor</span>=<span class="string">"@color/black"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:textSize</span>=<span class="string">"17sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Spinner</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/sp_card"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:spinnerMode</span>=<span class="string">"dialog"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">androidx.cardview.widget.CardView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/cv_card"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_gravity</span>=<span class="string">"center_horizontal|top"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:cardCornerRadius</span>=<span class="string">"3dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:cardElevation</span>=<span class="string">"3dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:contentPadding</span>=<span class="string">"20dp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/iv_scene"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"250dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:src</span>=<span class="string">"@drawable/ylxs"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">androidx.cardview.widget.CardView</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>activity:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CardViewActivity</span> : <span class="type">BaseActivity</span>&lt;<span class="type">ActivityCardViewBinding</span>&gt;</span>() {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> cardArray = arrayOf(<span class="string">"圆角与阴影均为3"</span>, <span class="string">"圆角与阴影均为6"</span>, <span class="string">"圆角与阴影均为10"</span>,</span><br><span class="line">        <span class="string">"圆角与阴影均为15"</span>, <span class="string">"圆角与阴影均为20"</span>)</span><br><span class="line">    <span class="comment">//圆角和阴影值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> radiusArray = arrayOf(<span class="number">3</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> ActivityCardViewBinding.<span class="title">initBinding</span><span class="params">()</span></span> {</span><br><span class="line">        initSpinner()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化下拉框</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initSpinner</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">val</span> adapter = ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>,R.layout.item_select,cardArray)</span><br><span class="line">        mBinding.apply {</span><br><span class="line">            spCard.prompt = <span class="string">"请选择卡片类型"</span></span><br><span class="line">            spCard.adapter = adapter</span><br><span class="line">            spCard.onItemSelectedListener = CardSelectedListener()</span><br><span class="line">            spCard.setSelection(<span class="number">0</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下拉选择listener</span></span><br><span class="line">   <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">CardSelectedListener</span>:<span class="type">AdapterView.OnItemSelectedListener{</span></span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onItemSelected</span><span class="params">(parent: <span class="type">AdapterView</span>&lt;*&gt;?, view: <span class="type">View</span>?, position: <span class="type">Int</span>, id: <span class="type">Long</span>)</span></span> {</span><br><span class="line">            <span class="keyword">var</span> radius = Utils.dip2px(<span class="keyword">this</span><span class="symbol">@CardViewActivity</span>,radiusArray[position].toFloat()).toFloat()</span><br><span class="line">            mBinding.apply {</span><br><span class="line">                <span class="comment">// 设置卡片视图的圆角半径</span></span><br><span class="line">                cvCard.radius = radius</span><br><span class="line">                <span class="comment">// 设置卡片视图的阴影长度</span></span><br><span class="line">                cvCard.elevation = radius</span><br><span class="line">                <span class="keyword">val</span> params = cvCard.layoutParams <span class="keyword">as</span> ViewGroup.MarginLayoutParams</span><br><span class="line">                <span class="keyword">val</span> marginValue = radius.toInt()</span><br><span class="line">                <span class="comment">// 设置布局参数的四周空白</span></span><br><span class="line">                params.setMargins(marginValue,marginValue,marginValue,marginValue)</span><br><span class="line">                <span class="comment">// 设置卡片视图的布局参数</span></span><br><span class="line">                cvCard.layoutParams = params</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onNothingSelected</span><span class="params">(parent: <span class="type">AdapterView</span>&lt;*&gt;?)</span></span> {}</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/08/18/%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%B7%A5/2.png" alt=""></p><h3 id="给图像添加装饰"><a href="#给图像添加装饰" class="headerlink" title="给图像添加装饰"></a>给图像添加装饰</h3><p>​        有时需要给图片添加一些小装饰，比如添加图片边框、添加文字水印、添加图标水印等,为此要求自定义图像控件，重写视图的onDraw方法，利用画布工具Canvas来绘制图案。</p><p>Canvas相关用法：<a href="https://hluck.gitee.io/2022/06/28/%E8%87%AA%E5%AE%9A%E4%B9%89View%E4%B8%80/" target="_blank" rel="noopener">自定义View</a></p><p>效果图：</p><p><img src="/2022/08/18/%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%B7%A5/3.png" alt=""></p><ol><li><p>加文本：</p><p><img src="/2022/08/18/%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%B7%A5/4.png" alt=""></p></li><li><p>加logo图：</p><p><img src="/2022/08/18/%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%B7%A5/5.png" alt=""></p></li><li><p>加相框</p><p><img src="/2022/08/18/%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%B7%A5/6.png" alt=""></p></li></ol><p>DecorateImageView:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecorateImageView</span></span>(context: Context, attrs:AttributeSet): ImageView(context, attrs) {</span><br><span class="line">    <span class="comment">// 声明一个画笔对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mPaint = Paint()</span><br><span class="line">    <span class="comment">// 视图宽度、视图高度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mWidth:<span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mHeight:<span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 文字大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mTextSize:<span class="built_in">Int</span> = <span class="number">20</span></span><br><span class="line">    <span class="comment">// 时间戳文本</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mText:String = <span class="string">""</span></span><br><span class="line">    <span class="comment">// 标志图标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mLogo:Bitmap? = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 照片相框</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mFrame:Bitmap? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> {</span><br><span class="line">        <span class="comment">// 设置画笔颜色</span></span><br><span class="line"><span class="comment">//        mPaint.color = Color.WHITE</span></span><br><span class="line">        mPaint.setColor(Color.parseColor(<span class="string">"#FFFFFF"</span>))</span><br><span class="line"><span class="comment">//        mPaint.setColor(Color.parseColor("#FFFFFF"))</span></span><br><span class="line">        <span class="comment">// 设置文字大小</span></span><br><span class="line">        mPaint.textSize = Utils.dip2px(context,mTextSize.toFloat()).toFloat()</span><br><span class="line">        mPaint.isAntiAlias = <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onMeasure</span><span class="params">(widthMeasureSpec: <span class="type">Int</span>, heightMeasureSpec: <span class="type">Int</span>)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec)</span><br><span class="line">        <span class="comment">// 获取视图的实际宽度</span></span><br><span class="line">        mWidth = measuredWidth</span><br><span class="line">        <span class="comment">// 获取视图的实际高度</span></span><br><span class="line">        mHeight = measuredHeight</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint(<span class="meta-string">"DrawAllocation"</span>)</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDraw</span><span class="params">(canvas: <span class="type">Canvas</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas)</span><br><span class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(mText)){</span><br><span class="line">            <span class="comment">//获取指定文本高度</span></span><br><span class="line">            <span class="keyword">val</span> textHeight = MeasureUtil.getTextHeight(mText,mTextSize.toFloat())</span><br><span class="line">            <span class="comment">//在画布上绘制文本</span></span><br><span class="line"><span class="comment">//            canvas?.drawText(mText,0f,mHeight - textHeight,mPaint)</span></span><br><span class="line">            canvas?.drawText(mText,mHeight-<span class="number">95f</span>,textHeight,mPaint)</span><br><span class="line">        }</span><br><span class="line">        mFrame?.let {</span><br><span class="line">            canvas?.drawBitmap(it,<span class="literal">null</span>, Rect(<span class="number">0</span>,<span class="number">0</span>,mWidth,mHeight),mPaint)</span><br><span class="line">        }</span><br><span class="line">        mLogo?.let {</span><br><span class="line">            canvas?.drawBitmap(it,(mWidth-it.width - <span class="number">100</span>).toFloat(),(mHeight - it.height).toFloat(),mPaint)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不显示任何装饰</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">showNone</span><span class="params">()</span></span>{</span><br><span class="line">        mText = <span class="string">""</span></span><br><span class="line">        mLogo = <span class="literal">null</span></span><br><span class="line">        mFrame = <span class="literal">null</span></span><br><span class="line">        <span class="comment">// 立即刷新视图（线程安全方式）</span></span><br><span class="line">        postInvalidate()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示装饰文本</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">showText</span><span class="params">(text:<span class="type">String</span>,isReset:<span class="type">Boolean</span>)</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (isReset){</span><br><span class="line">            showNone()</span><br><span class="line">        }</span><br><span class="line">        mText = text</span><br><span class="line">        postInvalidate()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置文字字体</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setTypeface</span><span class="params">(typeface: <span class="type">Typeface</span>)</span></span>{</span><br><span class="line">        <span class="comment">//设置文字字体</span></span><br><span class="line">        mPaint.typeface = typeface</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示装饰标志</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">showLogo</span><span class="params">(bitmap: <span class="type">Bitmap</span>,isReset:<span class="type">Boolean</span>)</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (isReset){</span><br><span class="line">            showNone()</span><br><span class="line">        }</span><br><span class="line">        mLogo = bitmap</span><br><span class="line">        postInvalidate()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示装饰相框</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">showFrame</span><span class="params">(bitmap: <span class="type">Bitmap</span>,isReset:<span class="type">Boolean</span>)</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (isReset){</span><br><span class="line">            showNone()</span><br><span class="line">        }</span><br><span class="line">        mFrame = bitmap</span><br><span class="line">        postInvalidate()</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="给图像加水波纹"><a href="#给图像加水波纹" class="headerlink" title="给图像加水波纹"></a>给图像加水波纹</h3><p>效果：</p><p><img src="/2022/08/18/%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%B7%A5/7.gif" alt=""></p><p>RippleImageView:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressLint(<span class="meta-string">"AppCompatCustomView"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RippleImageView</span></span>(context: Context, attrs:AttributeSet):ImageView(context, attrs) {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mContext = context</span><br><span class="line">    <span class="comment">// 声明一个画笔对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mPaint = Paint()</span><br><span class="line">    <span class="comment">// 视图宽度、视图高度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mWidth = <span class="number">0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mHeight = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 水波的半径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mRadius = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 半径的增量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mIncrease = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 声明一个处理器对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mHandler = Handler(Looper.myLooper()!!)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> {</span><br><span class="line">        mPaint.isAntiAlias = <span class="literal">true</span></span><br><span class="line">        mIncrease = Utils.dip2px(mContext,<span class="number">5F</span>)</span><br><span class="line">        mPaint.color = Color.WHITE</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onMeasure</span><span class="params">(widthMeasureSpec: <span class="type">Int</span>, heightMeasureSpec: <span class="type">Int</span>)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec)</span><br><span class="line">        <span class="comment">// 获取视图的实际宽度</span></span><br><span class="line">        mWidth = measuredWidth</span><br><span class="line">        <span class="comment">// 获取视图的实际高度</span></span><br><span class="line">        mHeight = measuredHeight</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDraw</span><span class="params">(canvas: <span class="type">Canvas</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas)</span><br><span class="line">        <span class="keyword">if</span> (mRadius &gt; <span class="number">0</span>){</span><br><span class="line">            canvas?.drawCircle((mWidth/<span class="number">2</span>).toFloat(),(mHeight/<span class="number">2</span>).toFloat(),mRadius.toFloat(),mPaint)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 设置水波的颜色</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setRippleColor</span><span class="params">(color:<span class="type">String</span>)</span></span>{</span><br><span class="line">        mPaint.color = Color.parseColor(color)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开始播放水波动画</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">startRipple</span><span class="params">()</span></span>{</span><br><span class="line">        mRadius = <span class="number">0</span></span><br><span class="line">        <span class="comment">// 立即启动水波刷新任务</span></span><br><span class="line">        mHandler.post(mRipple)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个水波刷新任务</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mRipple = <span class="keyword">object</span> :Runnable{</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span> {</span><br><span class="line">            mRadius += mIncrease</span><br><span class="line">            <span class="comment">// 水波半径已超出对角线</span></span><br><span class="line">            <span class="keyword">if</span> (mRadius*mRadius &gt; (mWidth*mWidth/<span class="number">4</span> + mHeight*mHeight/<span class="number">4</span>)){</span><br><span class="line">                mRadius = <span class="number">0</span></span><br><span class="line">                mIncrease = Utils.dip2px(mContext,<span class="number">5f</span>)</span><br><span class="line">            }<span class="keyword">else</span>{<span class="comment">// 水波半径未超出对角线</span></span><br><span class="line">                mIncrease += Utils.dip2px(mContext,<span class="number">1f</span>)</span><br><span class="line">                <span class="comment">// 延迟50毫秒后再次启动水波刷新任务</span></span><br><span class="line">                mHandler.postDelayed(<span class="keyword">this</span>,<span class="number">100</span>)</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 立即刷新视图（线程安全方式）</span></span><br><span class="line">            postInvalidate()</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="位图加工"><a href="#位图加工" class="headerlink" title="位图加工"></a>位图加工</h2><h3 id="转换位图的像素色彩"><a href="#转换位图的像素色彩" class="headerlink" title="转换位图的像素色彩"></a>转换位图的像素色彩</h3><p>​        滤镜特效的加工处理用到了位图工具<strong>Bitmap</strong>，它有主要的三个操作方法，现说明如下：</p><ul><li>createBitmap：创建一个新位图。</li><li>getPixels：获取位图对象所有点的像素数组。</li><li>setPixels：设置位图对象所有点的像素数组。</li></ul><p>更详细的位图加工步骤说明如下：</p><ol><li>调用createBitmap方法创建新的空白位图。</li><li>调用原位图的getPixels方法，把该位图所有像素的色值保存到指定的像素点数组。</li><li>遍历第二步得到的像素点数组，分别获取每个点的灰度、红色、绿色以及蓝色的色值，并按照特定算法调整该点的色值。</li><li>像素点数组全部调整完毕之后，调用新位图的setPixels方法更新所有像素的色值。</li></ol><p>上面四个步骤都做完之后得到的便是经过特效处理的新位图了。</p><p>以常见的几种特效处理为例，它们的加工算法描述如下：</p><ol><li>黑白效果：黑白照片对于彩色照片来说，就好比黑白电视机之于彩色电视机，黑白照片只有灰度的深浅区别，而没有红绿蓝之分。</li><li>怀旧效果：现实生活中的老照片都是泛黄的，而黄色又是由绿色和红色混合而成的，所以怀旧效果为了突出黄色，就得加大绿色和红色的比重，同时降低蓝色的比重。</li><li>底片效果：在数码相机时代之前，占统治地位的是胶卷相机，胶卷底片与洗出来的照片相比，底片的RGB值就是照片的RGB值取反，即：底片的红色=255-照片的红色，底片的绿色=255-照片的绿色，底片的蓝色=255-照片的蓝色。</li><li>模糊效果：要让图片变得模糊起来，每个点的颜色都由附近一片像素颜色混合而成，这样图片中每个景物的边缘就变模糊了。</li></ol><p>原图：</p><p><img src="/2022/08/18/%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%B7%A5/7.png" alt=""></p><p>黑白：</p><p><img src="/2022/08/18/%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%B7%A5/8.png" alt=""></p><p>底片：</p><p><img src="/2022/08/18/%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%B7%A5/9.png" alt=""></p><p>怀旧：</p><p><img src="/2022/08/18/%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%B7%A5/10.png" alt=""></p><p>模糊：</p><p><img src="/2022/08/18/%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%B7%A5/11.png" alt=""></p><h3 id="裁剪位图内部区域"><a href="#裁剪位图内部区域" class="headerlink" title="裁剪位图内部区域"></a>裁剪位图内部区域</h3><p>效果：</p><p><img src="/2022/08/18/%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%B7%A5/12.png" alt=""></p><h3 id="利用矩阵变换位图"><a href="#利用矩阵变换位图" class="headerlink" title="利用矩阵变换位图"></a>利用矩阵变换位图</h3><p>​        Android还支持缩放、旋转、平移等变换操作，不过位图工具不能直接完成这些操作，而要借助于矩阵工具Matrix。</p><p>​        下面是Matrix工具常用的几个矩阵变换方法：</p><ul><li><p>postScale：指定横纵坐标两个方向的缩放比率。</p></li><li><p>postRotate：指定旋转角度。</p></li><li><p>postTranslate：指定横纵坐标两个方向的偏移大小。</p></li><li><p>postSkew：指定横纵坐标两个方向的倾斜比例。</p><p>​        注意上述的几个变换方法仅仅设定了矩阵的变换形式，还得把矩阵对象传给位图工具的createBitmap方法，如此方能完成位图对象的变换操作。</p></li></ul><p>​       以postScale方法为例，它的两个参数分别表示横坐标和纵坐标方向的缩放比率，值为0.5表示缩小成原来的一半，值为2表示放大成原来的两倍。这个比率值还可以是负数，表示在该方向上翻转，即镜像。比如postScale(-1, 1)表示在横坐标上翻转，且纵坐标上保持不变，最终便是镜子那样的水平镜像效果。</p><p>原始：</p><p><img src="/2022/08/18/%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%B7%A5/13.png" alt=""></p><p>翻转：</p><p><img src="/2022/08/18/%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%B7%A5/14.png" alt=""></p><h2 id="自定义图形"><a href="#自定义图形" class="headerlink" title="自定义图形"></a>自定义图形</h2><p>​        内容包括如何在位图和图形之间相互转换以及将位图转换为图形的必要性、如何利用位图着色器剪裁图形内部的指定区域、如何通过画笔在图形内部添加小部件等。</p><h3 id="位图与图形互转"><a href="#位图与图形互转" class="headerlink" title="位图与图形互转"></a>位图与图形互转</h3><p>​        Android的图形管理使用图形工具Drawable类，位图管理使用位图工具Bitmap类。其中，Drawable用于在界面上展示图片，Bitmap用于加工图像数据。</p><p>​        位图图形BitmapDrawable正是二者之间的桥梁，图形对象与位图对象互转都需要它。其中，Bitmap转Drawable的代码如下所示：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把位图对象转换为图形对象     </span></span><br><span class="line">Drawable drawable = <span class="keyword">new</span> BitmapDrawable(getResources(), bitmap);</span><br></pre></td></tr></tbody></table></figure><p>Drawable转Bitmap的代码如下所示：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把图形对象转换为位图对象    </span></span><br><span class="line">Bitmap bitmap = ((BitmapDrawable)drawable).getBitmap();</span><br></pre></td></tr></tbody></table></figure><p>图形对象转成位图对象有个前提，就是该图形原本便是位图格式，否则会转换失败。</p><p>​        位图对象为什么要转成图形对象呢？（ImageView已经存在setImageBitmap方法，根本不用转成图形对象后再调用setImageDrawable方法）这是因为有很多控件只支持设置图形，不支持设置位图，包括但不限于下列场合：</p><ol><li>视图基类View，调用setBackground方法设置背景图形。</li><li>文本视图TextView，调用setCompoundDrawables方法设置上下左右四方向的图标。</li><li>复合按钮CompoundButton，调用setButtonDrawable方法设置左侧的勾选图标。</li></ol><p>​       此外，位图对象转成图形对象之后能够调用Drawable的各个方法。例如，Drawable类有个setAlpha方法，可以设置图形的灰度值。其值为255时表示不透明，此时图形正常显示；其值为0时表示全透明，此时图形完全消失；其值为127时为半透明，此时图形若隐若现。</p><p><img src="/2022/08/18/%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%B7%A5/15.png" alt=""></p><h3 id="剪裁图形内部区域"><a href="#剪裁图形内部区域" class="headerlink" title="剪裁图形内部区域"></a>剪裁图形内部区域</h3><p>​        调用画笔工具的setShader方法，设置位图着色器之后再调用画布工具的draw***方法即可剪裁出指定几何形状的图像。</p><p>CircleDrawable:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleDrawable</span></span>(context: Context,bitmap: Bitmap): BitmapDrawable(context.resources,bitmap) {</span><br><span class="line">    <span class="comment">// 声明一个画笔对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mPaint = Paint()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> {</span><br><span class="line">        <span class="comment">// 创建一个位图着色器，CLAMP表示边缘拉伸</span></span><br><span class="line">        <span class="keyword">val</span> shader = BitmapShader(bitmap,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP)</span><br><span class="line">        <span class="comment">// 设置画笔的着色器对象</span></span><br><span class="line">        mPaint.shader = shader</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">(canvas: <span class="type">Canvas</span>)</span></span> {</span><br><span class="line">        <span class="keyword">val</span> width = bitmap.width</span><br><span class="line">        <span class="keyword">val</span> height = bitmap.height</span><br><span class="line">        <span class="keyword">val</span> radius = Math.min(width,height) / <span class="number">2</span> - <span class="number">4</span></span><br><span class="line">        <span class="comment">// 在画布上绘制圆形，也就是只显示圆形内部的图像</span></span><br><span class="line">        canvas.drawCircle((width/<span class="number">2</span>).toFloat(), (height/<span class="number">2</span>).toFloat(), radius.toFloat(),mPaint)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/08/18/%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%B7%A5/16.png" alt=""></p><h3 id="给图形添加小部件"><a href="#给图形添加小部件" class="headerlink" title="给图形添加小部件"></a>给图形添加小部件</h3><p>​        除了剪裁图形之外，还能给图形添加小部件，比如文字、图标等。原来自定义图形类的时候，重写draw方法等同于重写视图的onDraw方法，因此在draw方法中挥毫泼墨就能添加图案。</p><p>​        以添加文字为例，自定义图形之时，重写draw方法并调用画布对象的drawText方法，即可往图形中加入文字标记。为了让文字更加多姿，还能设置个性化字体，此时用到了字体工具Typeface的createFromAsset方法，该方法允许从assets目录下的字体文件生成字体对象，然后调用画笔对象的setTypeface方法，就能使文字呈现对应的字体样式，像Windows系统常见的楷体、隶书等皆可为我所用。</p><h4 id="添加文字水印"><a href="#添加文字水印" class="headerlink" title="添加文字水印"></a>添加文字水印</h4><p><img src="/2022/08/18/%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%B7%A5/17.png" alt=""></p><h4 id="添加logo水印"><a href="#添加logo水印" class="headerlink" title="添加logo水印"></a>添加logo水印</h4><p><img src="/2022/08/18/%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%B7%A5/18.png" alt=""></p><p>MarkIconDrawable.kt:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>： LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span>： 2022/8/24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MarkIconDrawable</span></span>(context: Context, bitmap: Bitmap): BitmapDrawable(context.resources,bitmap) {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mPaint = Paint()</span><br><span class="line">    <span class="comment">// 水印图标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> marker:Bitmap? = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 水印方位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> mDirection = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> {</span><br><span class="line">        mPaint.color = Color.parseColor(<span class="string">"#FFFFFFFF"</span>)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置水印图标及其方位</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setMarkerIcon</span><span class="params">(bitmap: <span class="type">Bitmap</span>,direction:<span class="type">Int</span>)</span></span>{</span><br><span class="line">        <span class="keyword">val</span> originHeight = getBitmap().height</span><br><span class="line">        <span class="keyword">val</span> markerHeight = bitmap.height</span><br><span class="line">        <span class="keyword">val</span> ratio:<span class="built_in">Double</span> = <span class="number">1.0</span> * originHeight / markerHeight / <span class="number">3</span></span><br><span class="line">        <span class="comment">// 创建缩放后的水印图标</span></span><br><span class="line">        marker = BitmapUtil.getScaleBitmap(bitmap,ratio)</span><br><span class="line">        mDirection = direction</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">draw</span><span class="params">(canvas: <span class="type">Canvas</span>)</span></span> {</span><br><span class="line">        <span class="comment">//注意：这句话不能删，否则原图不显示</span></span><br><span class="line">        <span class="keyword">super</span>.draw(canvas)</span><br><span class="line">        <span class="keyword">if</span> (marker == <span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">val</span> widthGap = bitmap.width - marker!!.width</span><br><span class="line">        Log.e(<span class="string">"Tag"</span>,<span class="string">"<span class="variable">$widthGap</span>"</span>)</span><br><span class="line">        <span class="keyword">val</span> heightGap = bitmap.height - marker!!.height</span><br><span class="line">        Log.e(<span class="string">"Tag"</span>,<span class="string">"<span class="variable">$heightGap</span>"</span>)</span><br><span class="line">        <span class="keyword">when</span>(mDirection){</span><br><span class="line">            <span class="comment">// 在中间</span></span><br><span class="line">            <span class="number">0</span> -&gt; canvas.drawBitmap(marker!!,(widthGap/<span class="number">2</span>).toFloat(),(heightGap/<span class="number">2</span>).toFloat(),mPaint)</span><br><span class="line">            <span class="comment">// 左上角</span></span><br><span class="line">            <span class="number">1</span> -&gt; canvas.drawBitmap(marker!!,<span class="number">0f</span>,<span class="number">0f</span>,mPaint)</span><br><span class="line">            <span class="comment">// 右上角</span></span><br><span class="line">            <span class="number">2</span> -&gt; canvas.drawBitmap(marker!!,widthGap.toFloat(),<span class="number">0f</span>,mPaint)</span><br><span class="line">            <span class="comment">// 左下角</span></span><br><span class="line">            <span class="number">3</span> -&gt; canvas.drawBitmap(marker!!,<span class="number">0f</span>,heightGap.toFloat(),mPaint)</span><br><span class="line">            <span class="comment">// 右下角</span></span><br><span class="line">            <span class="number">4</span> -&gt; canvas.drawBitmap(marker!!,widthGap.toFloat(),heightGap.toFloat(),mPaint)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="大头贴案例"><a href="#大头贴案例" class="headerlink" title="大头贴案例"></a>大头贴案例</h2><p>​                                                    <img src="/2022/08/18/%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%B7%A5/19.png" alt=""></p><p><img src="/2022/08/18/%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%B7%A5/20.png" alt=""></p><h3 id="动态请求权限"><a href="#动态请求权限" class="headerlink" title="动态请求权限"></a>动态请求权限</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.content.pm.PackageManager;</span><br><span class="line"><span class="keyword">import</span> android.os.Build;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.core.app.ActivityCompat;</span><br><span class="line"><span class="keyword">import</span> androidx.core.content.ContextCompat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionUtil</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TAG = <span class="string">"PermissionUtil"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查某个权限。返回true表示已启用该权限，返回false表示未启用该权限</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkPermission</span><span class="params">(Activity act, String permission, <span class="keyword">int</span> requestCode)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> checkPermission(act, <span class="keyword">new</span> String[]{permission}, requestCode);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查多个权限。返回true表示已完全启用权限，返回false表示未完全启用权限</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkPermission</span><span class="params">(Activity act, String[] permissions, <span class="keyword">int</span> requestCode)</span> </span>{</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) {</span><br><span class="line">            <span class="keyword">int</span> check = PackageManager.PERMISSION_GRANTED;</span><br><span class="line">            <span class="comment">// 通过权限数组检查是否都开启了这些权限</span></span><br><span class="line">            <span class="keyword">for</span> (String permission : permissions) {</span><br><span class="line">                check = ContextCompat.checkSelfPermission(act, permission);</span><br><span class="line">                <span class="keyword">if</span> (check != PackageManager.PERMISSION_GRANTED) {</span><br><span class="line">                    <span class="keyword">break</span>; <span class="comment">// 有个权限没有开启，就跳出循环</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (check != PackageManager.PERMISSION_GRANTED) {</span><br><span class="line">                <span class="comment">// 未开启该权限，则请求系统弹窗，好让用户选择是否立即开启权限</span></span><br><span class="line">                ActivityCompat.requestPermissions(act, permissions, requestCode);</span><br><span class="line">                result = <span class="keyword">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查权限结果数组，返回true表示都已经获得授权。返回false表示至少有一个未获得授权</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkGrant</span><span class="params">(<span class="keyword">int</span>[] grantResults)</span> </span>{</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (grantResults != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> grant : grantResults) { <span class="comment">// 遍历权限结果数组中的每条选择结果</span></span><br><span class="line">                <span class="keyword">if</span> (grant != PackageManager.PERMISSION_GRANTED) { <span class="comment">// 未获得授权</span></span><br><span class="line">                    result = <span class="keyword">false</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            result = <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://gitee.com/hluck/image-processing" target="_blank" rel="noopener">项目地址</a></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;图像装饰&quot;&gt;&lt;a href=&quot;#图像装饰&quot; class=&quot;headerlink&quot; title=&quot;图像装饰&quot;&gt;&lt;/a&gt;图像装饰&lt;/h2&gt;&lt;h3 id=&quot;CardView&quot;&gt;&lt;a href=&quot;#CardView&quot; class=&quot;headerlink&quot; title=&quot;CardView&quot;&gt;&lt;/a&gt;CardView&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2022/08/18/%E5%9B%BE%E5%83%8F%E5%8A%A0%E5%B7%A5/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
    
      <category term="Android" scheme="https://hluck.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>WeatherMvvm项目笔记</title>
    <link href="https://hluck.github.io/2022/08/11/WeatherMvvm%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/"/>
    <id>https://hluck.github.io/2022/08/11/WeatherMvvm%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</id>
    <published>2022-08-11T03:17:30.640Z</published>
    <updated>2022-08-21T03:45:52.481Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>出自<a href="https://mp.weixin.qq.com/s/PCkVsD8nPJV3wXkPg_6yDw" target="_blank" rel="noopener">郭霖的MVVM架构开源小项目</a></p><p>项目结构:</p><p><img src="/2022/08/11/WeatherMvvm%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/1.png" alt=""></p><h2 id="构建项目BUG记录"><a href="#构建项目BUG记录" class="headerlink" title="构建项目BUG记录"></a>构建项目BUG记录</h2><p>更改settings.gradle:</p><p>详情：<a href="https://blog.csdn.net/EGM_NB/article/details/125375339" target="_blank" rel="noopener">Bug记录</a></p><h2 id="Retrofit相关"><a href="#Retrofit相关" class="headerlink" title="Retrofit相关"></a>Retrofit相关</h2><p>​    详情请看文章<a href="https://juejin.cn/post/6844904190314037262#heading-18" target="_blank" rel="noopener">Retrofit使用说明书</a></p><a id="more"></a><ol><li><p>api对应接口</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PlaceService</span> </span>{</span><br><span class="line">    <span class="meta">@GET(<span class="meta-string">"api/china"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getProvinces</span><span class="params">()</span></span>: Call&lt;MutableList&lt;Province&gt;&gt;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>Retrofit实例创建类</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> ServiceCreator {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> BASE_URL = <span class="string">"http://guolin.tech/"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> httpClient = OkHttpClient.Builder()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> builder = Retrofit.Builder()</span><br><span class="line">        .baseUrl(BASE_URL)</span><br><span class="line">        .client(httpClient.build())</span><br><span class="line">        .addConverterFactory(ScalarsConverterFactory.create())</span><br><span class="line">        .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> retrofit = builder.build()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">create</span><span class="params">(serviceClass:<span class="type">Class</span>&lt;<span class="type">T</span>&gt;)</span></span>:T = retrofit.create(serviceClass)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>3.使用</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeatherNetwork</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> placeService = ServiceCreator.create(PlaceService::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取省份信息</span></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">fetchProvinceList</span><span class="params">()</span></span> = placeService.getProvinces().await()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Call<span class="type">&lt;T&gt;</span>.<span class="title">await</span><span class="params">()</span></span>:T{</span><br><span class="line">        <span class="keyword">return</span> suspendCoroutine { continuation -&gt;</span><br><span class="line">            enqueue(<span class="keyword">object</span> :Callback&lt;T&gt;{</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResponse</span><span class="params">(call: <span class="type">Call</span>&lt;<span class="type">T</span>&gt;, response: <span class="type">Response</span>&lt;<span class="type">T</span>&gt;)</span></span> {</span><br><span class="line">                    <span class="keyword">val</span> body = response.body()</span><br><span class="line">                    <span class="comment">//将body作为协程的返回值</span></span><br><span class="line">                    <span class="keyword">if</span> (body != <span class="literal">null</span>) continuation.resume(body)</span><br><span class="line">                    <span class="keyword">else</span> continuation.resumeWithException(RuntimeException(<span class="string">"response body is null"</span>))</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onFailure</span><span class="params">(call: <span class="type">Call</span>&lt;<span class="type">T</span>&gt;, t: <span class="type">Throwable</span>)</span></span> {</span><br><span class="line">                    continuation.resumeWithException(t)</span><br><span class="line">                }</span><br><span class="line">            })</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span>{</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> network:WeatherNetwork? = <span class="literal">null</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">getInstance</span><span class="params">()</span></span>:WeatherNetwork{</span><br><span class="line">            <span class="keyword">if</span> (network == <span class="literal">null</span>){</span><br><span class="line">                synchronized(WeatherNetwork::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span>{</span><br><span class="line">                    <span class="keyword">if</span> (network == <span class="literal">null</span>){</span><br><span class="line">                        network = WeatherNetwork()</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> network!!</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在viewModel里使用：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChooseAreaViewModel</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> placeRepository: PlaceRepository):ViewModel() {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> isLoading = MutableLiveData&lt;<span class="built_in">Boolean</span>&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> currentLevel = MutableLiveData&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dataChanged = MutableLiveData&lt;<span class="built_in">Int</span>&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> provinces:MutableList&lt;Province&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> dataList = ArrayList&lt;String&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取省份名称列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getProvinces</span><span class="params">()</span></span>{</span><br><span class="line">        currentLevel.value = ChooseAreaFragment.LEVEL_PROVINCE</span><br><span class="line">        launch {</span><br><span class="line">            provinces = placeRepository.getProvinces()</span><br><span class="line">            dataList.addAll(provinces.map { it.provinceName })</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">launch</span><span class="params">(block:<span class="type">suspend</span> () -&gt; <span class="type">Unit</span>)</span></span> = viewModelScope.launch {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            isLoading.value = <span class="literal">true</span></span><br><span class="line">            dataList.clear()</span><br><span class="line">            block</span><br><span class="line">            dataChanged.value = dataChanged.value?.plus(<span class="number">1</span>)</span><br><span class="line">            isLoading.value = <span class="literal">false</span></span><br><span class="line">        }<span class="keyword">catch</span> (t:Throwable){</span><br><span class="line">            t.printStackTrace()</span><br><span class="line">            Toast.makeText(MyOwnApplication.context,t.message,Toast.LENGTH_SHORT).show()</span><br><span class="line">            dataChanged.value = dataChanged.value?.plus(<span class="number">1</span>)</span><br><span class="line">            isLoading.value = <span class="literal">false</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>UI上使用：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChooseAreaFragment</span> : <span class="type">Fragment</span></span>() {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span>{</span><br><span class="line">        <span class="comment">//省份标识</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">val</span> LEVEL_PROVINCE = <span class="number">0</span></span><br><span class="line">        <span class="comment">//城市标识</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">val</span> LEVEL_CITY = <span class="number">1</span></span><br><span class="line">        <span class="comment">//县标识</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">val</span> LEVEL_COUNTY = <span class="number">2</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> viewModel:ChooseAreaViewModel <span class="keyword">by</span> viewModels{</span><br><span class="line">        InjectorUtil.getChooseAreaModelFactory()</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//加载进度对话框</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> progressDialog:ProgressDialog? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> adapter:ChooseAreaAdapter</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> _binding:FragmentChooseAreaBinding? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> binding <span class="keyword">get</span>() = _binding</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">        savedInstanceState: <span class="type">Bundle</span>?</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: View? {</span><br><span class="line">        _binding = FragmentChooseAreaBinding.inflate(inflater,container,<span class="literal">false</span>)</span><br><span class="line">        _binding?.viewModel = <span class="keyword">this</span>.viewModel</span><br><span class="line">        Log.e(<span class="string">"name"</span>,<span class="string">"<span class="subst">${viewModel.currentLevel}</span>"</span>)</span><br><span class="line">        <span class="keyword">return</span> _binding?.root</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onViewCreated</span><span class="params">(view: <span class="type">View</span>, savedInstanceState: <span class="type">Bundle</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class="line">        adapter = ChooseAreaAdapter(requireContext(),R.layout.simple_item,viewModel.dataList)</span><br><span class="line">        binding!!.listView.adapter = adapter</span><br><span class="line">        observe()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">observe</span><span class="params">()</span></span>{</span><br><span class="line">        viewModel.currentLevel.observe(viewLifecycleOwner) { level -&gt;</span><br><span class="line">            <span class="keyword">when</span> (level) {</span><br><span class="line">                LEVEL_PROVINCE -&gt; {</span><br><span class="line">                    binding!!.tvTitle.text = <span class="string">"中国"</span></span><br><span class="line">                    binding!!.btnBack.visibility = View.GONE</span><br><span class="line">                }</span><br><span class="line">                LEVEL_CITY -&gt; {}</span><br><span class="line">                LEVEL_COUNTY -&gt; {}</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        viewModel.isLoading.observe(viewLifecycleOwner){ isLoading -&gt;</span><br><span class="line">            <span class="keyword">if</span> (isLoading) showProgressDialog() <span class="keyword">else</span> closeProgressDialog()</span><br><span class="line">        }</span><br><span class="line">        viewModel.dataChanged.observe(viewLifecycleOwner){</span><br><span class="line">            adapter.notifyDataSetChanged()</span><br><span class="line">            binding!!.listView.setSelection(<span class="number">0</span>)</span><br><span class="line">            closeProgressDialog()</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (viewModel.dataList.isEmpty()){</span><br><span class="line">            viewModel.getProvinces()</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *显示进度对话框</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">showProgressDialog</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (progressDialog == <span class="literal">null</span>){</span><br><span class="line">            progressDialog = ProgressDialog(activity)</span><br><span class="line">            progressDialog?.setMessage(<span class="string">"正在加载..."</span>)</span><br><span class="line">            progressDialog?.setCanceledOnTouchOutside(<span class="literal">false</span>)</span><br><span class="line">        }</span><br><span class="line">        progressDialog?.show()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭对话框</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">closeProgressDialog</span><span class="params">()</span></span>{</span><br><span class="line">        progressDialog?.dismiss()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁时解除绑定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroyView</span><span class="params">()</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onDestroyView()</span><br><span class="line">        _binding = <span class="literal">null</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​        converterFactory 转换工厂负责将网络返回的数据转化为对应的java数据类型。 Retrofit 默认有一个BuiltInConverters 工厂 将返回的数据转化为<code>okhttp3.ResponseBody</code> 对象。有时候我们可以需要Json字符串，不要转换成对应的对象。这时候就可以用<code>ScalarsConverterFactory</code>转换工厂。它会把请求的数据转换为String。</p></li></ol><h2 id="LitePal"><a href="#LitePal" class="headerlink" title="LitePal"></a>LitePal</h2><p><a href="https://github.com/guolindev/LitePal" target="_blank" rel="noopener">LitePal使用教程</a></p><p>LitePal数据库文件存放位置：</p><ol><li><p>直接去掉storage栏目，或者设置值为internal，位置：默认目录就是放在\data目录下</p></li><li><p>设置值为external，位置：内部存储sdcard\Android\data\你的项目包名\files\databasesandroid–&gt;</p></li><li><p>设置值为例如：dbFile，位置：内存存储\dbFile</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">storage</span> <span class="attr">value</span>=<span class="string">"internal"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="Android网络安全配置"><a href="#Android网络安全配置" class="headerlink" title="Android网络安全配置"></a>Android网络安全配置</h2><p>​        在 Android 7.0了，引入了「Network Security Configuration」，当时默认配置为信任系统内置证书以及用户安装证书，并且允许访问 HTTP 请求。</p><p>​        而在 Android 9.0上，默认只信任系统证书了，并且默认不再允许访问 HTTP 请求。</p><p><img src="/2022/08/11/WeatherMvvm%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/2.png" alt=""></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">network-security-config</span>&gt;</span></span><br><span class="line">    //允许http协议</span><br><span class="line">    <span class="tag">&lt;<span class="name">base-config</span> <span class="attr">cleartextTrafficPermitted</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trust-anchors</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">certificates</span> <span class="attr">src</span>=<span class="string">"system"</span> /&gt;</span> // 信任系统证书</span><br><span class="line">        <span class="tag">&lt;/<span class="name">trust-anchors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">base-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">network-security-config</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:name</span>=<span class="string">".MyOwnApplication"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:networkSecurityConfig</span>=<span class="string">"@xml/network_security_config"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:theme</span>=<span class="string">"@style/Theme.WeatherMvvm"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">tools:targetApi</span>=<span class="string">"n"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>详情请看文章：<a href="https://www.jianshu.com/p/5b7f690fdcaa" target="_blank" rel="noopener">网络安全之NetworkSecurityConfig</a></p><p>官方网络安全说明：<a href="https://developer.android.google.cn/training/articles/security-config" target="_blank" rel="noopener">https://developer.android.google.cn/training/articles/security-config</a></p><p>官方网络安全教程:<a href="https://developer.android.google.cn/codelabs/android-network-security-config#0" target="_blank" rel="noopener">https://developer.android.google.cn/codelabs/android-network-security-config#0</a></p><h2 id="Android数据绑定"><a href="#Android数据绑定" class="headerlink" title="Android数据绑定"></a>Android数据绑定</h2><p><a href="https://developers.google.cn/codelabs/android-databinding?hl=zh-cn#0" target="_blank" rel="noopener">官方教程</a></p><h2 id="LayoutInflater"><a href="#LayoutInflater" class="headerlink" title="LayoutInflater"></a>LayoutInflater</h2><p><a href="https://juejin.cn/post/6976613726036656159#heading-4" target="_blank" rel="noopener">Android 布局打气筒 （一）：玩转 LayoutInflater</a></p><p>效果：</p><img src="/2022/08/11/WeatherMvvm%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/3.png" style="zoom: 80%;"><img src="/2022/08/11/WeatherMvvm%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/4.png" style="zoom:80%;"><img src="/2022/08/11/WeatherMvvm%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/5.png" style="zoom:80%;"></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;出自&lt;a href=&quot;https://mp.weixin.qq.com/s/PCkVsD8nPJV3wXkPg_6yDw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;郭霖的MVVM架构开源小项目&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;项目结构:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2022/08/11/WeatherMvvm%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;构建项目BUG记录&quot;&gt;&lt;a href=&quot;#构建项目BUG记录&quot; class=&quot;headerlink&quot; title=&quot;构建项目BUG记录&quot;&gt;&lt;/a&gt;构建项目BUG记录&lt;/h2&gt;&lt;p&gt;更改settings.gradle:&lt;/p&gt;
&lt;p&gt;详情：&lt;a href=&quot;https://blog.csdn.net/EGM_NB/article/details/125375339&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Bug记录&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Retrofit相关&quot;&gt;&lt;a href=&quot;#Retrofit相关&quot; class=&quot;headerlink&quot; title=&quot;Retrofit相关&quot;&gt;&lt;/a&gt;Retrofit相关&lt;/h2&gt;&lt;p&gt;​    详情请看文章&lt;a href=&quot;https://juejin.cn/post/6844904190314037262#heading-18&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Retrofit使用说明书&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
    
      <category term="Android" scheme="https://hluck.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android KTX扩展</title>
    <link href="https://hluck.github.io/2022/08/10/Android%20KTX%E6%89%A9%E5%B1%95/"/>
    <id>https://hluck.github.io/2022/08/10/Android%20KTX%E6%89%A9%E5%B1%95/</id>
    <published>2022-08-10T09:33:28.411Z</published>
    <updated>2022-08-10T15:33:26.772Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><p>​        Android KTX 是作为 Kotlin 的扩展库存在的。它帮助开发者封装了一些常见的代码块。</p><p>​        Android KTX 分为核心（Core）、集合（Collection）、视图碎片（Fragment）等方面，提供了面向 Android Jetpack 以及其他 Android API 更简单且易于理解和使用的增强 API。从源码上看，Android KTX 充分利用了 Kotlin 编程语言的特性，包括扩展函数、扩展属性、Lambda 表达式、命名参数、参数默认值、协程等。</p><h2 id="Core-KTX"><a href="#Core-KTX" class="headerlink" title="Core KTX"></a>Core KTX</h2><p>​        以 Kotlin 作为默认使用的编程语言创建新项目，则该库会被自动添加。</p><h3 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h3><p>​        Animation 意为动画，在 Core KTX 中提供了一系列简化动画执行监听的 API，扩展了原有的 android.animation.Animator 类。</p><p>​        在 Core KTX 中，当我们想要实现对动画的执行监听时，可使用 Animator 类提供的 doOnStart()、doOnEnd()、doOnPause()、doOnCancel() 等方法。</p><p>​        举个例子，下面这段代码定义了名为 infiniteAlphaAnim 的对象，它定义了无限循环地执行透明度改变的动画效果。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> infiniteAlphaAnim = ObjectAnimator.ofFloat(demoTv, <span class="string">"alpha"</span>, <span class="number">1f</span>, <span class="number">0.3f</span>, <span class="number">1f</span>)</span><br><span class="line">     infiniteAlphaAnim.duration = <span class="number">1000</span></span><br><span class="line">     infiniteAlphaAnim.repeatMode = ValueAnimator.RESTART</span><br><span class="line">     infiniteAlphaAnim.repeatCount = ValueAnimator.INFINITE</span><br></pre></td></tr></tbody></table></figure><p>接着，我们就可以添加动画执行监听器了：</p><a id="more"></a><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">infiniteAlphaAnim.doOnEnd { Log.d(localClassName, <span class="string">"onEnd"</span>) }</span><br><span class="line">     infiniteAlphaAnim.doOnStart { Log.d(localClassName, <span class="string">"onStart"</span>) }</span><br><span class="line">     infiniteAlphaAnim.doOnPause { Log.d(localClassName, <span class="string">"onPause"</span>) }</span><br><span class="line">     infiniteAlphaAnim.doOnResume { Log.d(localClassName, <span class="string">"onResume"</span>) }</span><br><span class="line">     infiniteAlphaAnim.doOnCancel { Log.d(localClassName, <span class="string">"onCancel"</span>) }</span><br><span class="line">     infiniteAlphaAnim.doOnRepeat { Log.d(localClassName, <span class="string">"onRepeat"</span>) }</span><br></pre></td></tr></tbody></table></figure><p>上述代码分别实现了对动画结束、开始、暂停、继续、取消和重复执行的监听。</p><h3 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h3><p>​        Content 意为内容，Core KTX 提供了获取系统级服务、首选项以及属性索引方面的扩展。</p><h4 id="获取系统级服务"><a href="#获取系统级服务" class="headerlink" title="获取系统级服务"></a>获取系统级服务</h4><p>在调用系统级服务前，通常会先取得相应的服务对象。Core KTX 提供了非常简单的获取方式。例如，想要调用有关电源方面的系统级服务时，仅需简单地执行下面一行语句即可：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> powerManagerKtx = ContextCompat.getSystemService(<span class="keyword">this</span>,</span><br><span class="line">PowerManager::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br></pre></td></tr></tbody></table></figure><h4 id="保存首选项值"><a href="#保存首选项值" class="headerlink" title="保存首选项值"></a>保存首选项值</h4><p>​        首选项通常用来保存程序的设置和某些特殊的键值（key-value）对，在实际开发中经常被使用。Core KTX 提供了保存首选项值的简单写法，我们来看下面的代码片段：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sharedPreferences.edit(<span class="literal">false</span>) { putString(<span class="string">"username"</span>, <span class="string">"13800000000"</span>) }</span><br></pre></td></tr></tbody></table></figure><p>​        上面的代码中，sharedPreferences 是 SharedPreferences 对象。其中的 false 值表示是否为 commit() 操作，当值为 false 时，执行 apply()；反之，执行 commit()，默认为 false。大括号里面的内容就是实际的键值对。</p><p>其实就是对相应的 API 进行封装：</p><h4 id="属性索引值检索"><a href="#属性索引值检索" class="headerlink" title="属性索引值检索"></a>属性索引值检索</h4><p>​        属性索引值检索通常多见于自定义 View 中，和传统 TypedArray API 相比，Core KTX 提供了强制使用某个值的方法。换言之，当索引中未定义相应值时，将抛出 IllegalArgumentException 异常。</p><p>​        下面通过对比来说明，先来看传统写法：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> backGroundColor = getColor(R.styleable.PersonInfo_bgColor, Color.BLACK)</span><br></pre></td></tr></tbody></table></figure><p>​        上面的代码的意思是获取索引名为 PersonInfo_bgColor 的值，当该值未定义时，使用 Color.BLACK 作为默认值赋给 backGroundColor。</p><p>​        再来看 Core KTX 中新增的写法：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> backGroundColor = getColorOrThrow(R.styleable.PersonInfo_bgColor)</span><br></pre></td></tr></tbody></table></figure><p>​        上面的代码依旧是获取索引名为 PersonInfo_bgColor 的值。不同的是，当该值未定义时，程序将抛出 IllegalArgumentException 异常。</p><p>​        和 TypedArray API 紧密相关的还有 Context 类中新增的 <strong>withStyledAttributes</strong>() 方法，它对应传统 Context 类中的 obtainStyledAttributes() 方法，我们依旧通过对比来阐述二者的区别。</p><p>先来看传统写法：</p><p><img src="/2022/08/10/Android%20KTX%E6%89%A9%E5%B1%95/1.png" alt=""></p><p>​        传统写法要求在完成取值后调用 TypedArray 对象的 recycle() 方法。由于该方法调用存在普适性，因此 Core KTX 对其进行了封装。新的写法如下：</p><p><img src="/2022/08/10/Android%20KTX%E6%89%A9%E5%B1%95/2.png" alt=""></p><h3 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h3><h4 id="Null-值判定"><a href="#Null-值判定" class="headerlink" title="Null 值判定"></a>Null 值判定</h4><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> cursor.getDoubleOrNull(index)</span><br></pre></td></tr></tbody></table></figure><h4 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h4><p>​        事务操作要求我们依次执行开启事务操作、执行数据库操作、设置操作成功、结束事务操作，总共 4 个步骤。其中，除了执行数据库操作是可变代码外，剩下的 3 个步骤都是固定不变的。因此，Core KTX 对这 3 个步骤进行了封装。下面的代码片段是简化后的实现：</p><p><img src="/2022/08/10/Android%20KTX%E6%89%A9%E5%B1%95/3.png" alt=""></p><p>​        这里要特别注意，exclusive 是用来表示该操作是否独占的布尔变量，其默认值为 true，即独占操作。当我们无须独占时，记得将其赋值为 false。</p><h3 id="Graphics"><a href="#Graphics" class="headerlink" title="Graphics"></a>Graphics</h3><h4 id="绘制任意图形"><a href="#绘制任意图形" class="headerlink" title="绘制任意图形"></a>绘制任意图形</h4><p>​        Core KTX 对 Bitmap 类进行了扩充，为其新增了 applyCanvas() 方法。我们可以通过调用此方法在自定义的 Bitmap 范围内自由地绘制图形。</p><p>例如，想画两个同心圆，仅需要编写以下代码片段即可：</p><p><img src="/2022/08/10/Android%20KTX%E6%89%A9%E5%B1%95/4.png" alt=""></p><p>paint 是 Paint 对象，定义了画笔的颜色和线条风格：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> paint = Paint()</span><br><span class="line">     paint.color = Color.BLUE</span><br><span class="line">     paint.style = Paint.Style.STROKE</span><br><span class="line">     paint.strokeWidth = <span class="number">10F</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/08/10/Android%20KTX%E6%89%A9%E5%B1%95/5.png" alt=""></p><h4 id="获取／改变特定像素点的颜色值"><a href="#获取／改变特定像素点的颜色值" class="headerlink" title="获取／改变特定像素点的颜色值"></a>获取／改变特定像素点的颜色值</h4><p>​        当我们想要获取或者改变 Bitmap 对象中特定像素点的颜色值时，可以使用 Core KTX 提供的封装好的方法。这些方法非常易于理解，下面的代码片段分别为我们展示了获取以及改变特定像素点颜色的方法：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取颜色值 </span></span><br><span class="line">bitmap.<span class="keyword">get</span>(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line"><span class="comment">// 改变颜色值 </span></span><br><span class="line">bitmap.<span class="keyword">set</span>（<span class="number">100</span>, <span class="number">200</span>, Color.RED）</span><br></pre></td></tr></tbody></table></figure><p>上述代码中，100， 200 分别对应 x 坐标与 y 坐标，这个坐标值是相对 Bitmap 对象而言的。</p><p>​        当然，在获取以及设置颜色值之前，我们可能需要判断该点是否存在于 Bitmap 对象中，避免其超出范围导致操作失败。判断某个像素点是否存在的方法是 contain()。对于本例而言，写法是：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitmap.contains(Point(<span class="number">100</span>, <span class="number">200</span>))</span><br></pre></td></tr></tbody></table></figure><h4 id="Color-Int-与-ARGB-互转"><a href="#Color-Int-与-ARGB-互转" class="headerlink" title="Color Int 与 ARGB 互转"></a>Color Int 与 ARGB 互转</h4><p>​        在 Android 8.0 及以上版本的 API 中，我们可以直接采用 Core KTX 封装好的 Int.toColor() 方法得到 Color 对象，然后即可通过 Color 对象的方法获取每条通道的颜色值。反之，也可以通过 Color 对象的 toArgb() 方法获得 Color Int 值，且后者不要求 API 必须满足 8.0 版本。</p><p>​        那么，对于低版本 Android API，就要我们手动实现从 Int 到 Color 的转换了。这个过程，Google 官方给出了答案：</p><p><img src="/2022/08/10/Android%20KTX%E6%89%A9%E5%B1%95/6.png" alt=""></p><p>​        当我们分别传入 - 16776961 和 - 65536 时，前者对应的 ARGB 值为 255,0,0,255，即不透明蓝色，后者对应的 ARGB 值为 255,255,0,0，即不透明红色。</p><h4 id="图像缩放"><a href="#图像缩放" class="headerlink" title="图像缩放"></a>图像缩放</h4><p>Core KTX 提供了对 Bitmap 对象进行缩放的简单实现方法，仅需一行代码即可搞定：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bitmap.scale(<span class="number">100</span>, <span class="number">100</span>, <span class="literal">true</span>)</span><br></pre></td></tr></tbody></table></figure><p>​        在 scale() 方法中依次传入了 3 个值，分别表示缩放后的宽度、高度以及是否进行双线性插值处理，可以起到反锯齿的优化作用，默认值为 true。</p><p>要特别注意，该方法并不对原 Bitmap 对象进行修改，它会返回一个新创建的缩放后的 Bitmap 对象。</p><h4 id="画布变换"><a href="#画布变换" class="headerlink" title="画布变换"></a>画布变换</h4><p>​        前面通过调用 Bitmap 对象的 Scale() 方法实现了对图像的缩放。接下来将介绍画布（Canvas）API 的使用，以实现图像的变换。在进行这种变换时，Bitmap 本身不会有任何变化，它改变的是画布。</p><p>​        在传统 Android API 中，我们可以对画布进行缩放、裁剪、旋转等操作。它的调用过程通常如下面的代码片段所示：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">canvas.save()</span><br><span class="line">canvas.clipRect(<span class="number">0f</span>,<span class="number">0f</span>,<span class="number">200f</span>,<span class="number">200f</span>)</span><br><span class="line">canvas.drawRect(<span class="number">10f</span>, <span class="number">10f</span>, <span class="number">300f</span>, <span class="number">100f</span>, paint_dark)</span><br><span class="line">canvas.restore()</span><br></pre></td></tr></tbody></table></figure><p>​        实际上，无论进行怎样的变换，都需要在开始和结尾调用 save() 和 restore() 方法。现在，通过调用 Core API 简化处理上述代码如下：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">canvas.withClip(<span class="number">0f</span>, <span class="number">0f</span>, <span class="number">200f</span>, <span class="number">200f</span>) { drawRect(<span class="number">10f</span>, <span class="number">10f</span>, <span class="number">300f</span>, <span class="number">200f</span>,</span><br><span class="line">paint_dark) }</span><br></pre></td></tr></tbody></table></figure><p>其他类型的变换方式的实现与此例基本一致</p><h4 id="混合两种颜色"><a href="#混合两种颜色" class="headerlink" title="混合两种颜色"></a>混合两种颜色</h4><p>在某些需求下，我们可能需要混合两种颜色，进而得到一种新的颜色。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = Color.BLUE</span><br><span class="line">color = color.plus(Color.RED)</span><br></pre></td></tr></tbody></table></figure><p>​        从代码本身去理解即可。本例是将蓝色（RGB 值为 0,0,255）与红色（RGB 值为 255,0,0）混合，最终将得到玫红色（RGB 值分别为 255,0,255）。</p><h4 id="Drawable-对象转换为-Bitmap-对象"><a href="#Drawable-对象转换为-Bitmap-对象" class="headerlink" title="Drawable 对象转换为 Bitmap 对象"></a>Drawable 对象转换为 Bitmap 对象</h4><p>​        如果要获取资源目录下图像的 Bitmap 对象，该怎样实现呢？</p><p>​        Core KTX 对 Drawable 类进行了扩展，提供了名为 toBitmap() 的方法。它可以轻松地帮我们完成从 Drawable 对象到 Bitmap 对象的转换。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> bitmap = getDrawable(R.mipmap.android_icon)?.toBitmap()</span><br></pre></td></tr></tbody></table></figure><h3 id="Util"><a href="#Util" class="headerlink" title="Util"></a>Util</h3><p>​        在 Core KTX 中的 Util 包里最值得讲得莫过于 AtomicFile。概括地说，AtomicFile 是对文件进行原子操作的工具类。</p><p>​        在进行文件写操作时，AtomicFile 会使用两个文件来确保原子性：一个文件是原始文件本身，另一个文件则扮演备份的角色。</p><h4 id="写文本文件"><a href="#写文本文件" class="headerlink" title="写文本文件"></a>写文本文件</h4><p>​        借助 Core KTX，我们可以轻松地向文件写入数据。写入的方式有 3 种：文本、byte 数组和文件流，其方法分别为 writeText()、writeBytes() 和 tryWrite()。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> targetFile = File(filesDir.toString() + File.separator + 「test.txt」)</span><br><span class="line"><span class="keyword">val</span> atomicFileExp = AtomicFile（targetFile）</span><br><span class="line">atomicFileExp.writeText（「这是一个测试文本」）</span><br></pre></td></tr></tbody></table></figure><p>​        通过调用 AtomicFile 对象的 writeText() 方法，我们完成了在 App 的 Data 目录下创建 test.txt 文件，并写入一些文字的操作，而传统的写法只允许我们以输出流的方式写文件。该方法默认采用 UTF-8 编码形式将文本写入文件。</p><h4 id="读文本文件"><a href="#读文本文件" class="headerlink" title="读文本文件"></a>读文本文件</h4><p>​        使用 Core KTX 封装的读文件方法非常简单，只需调用 AtomicFile 对象的 readText() 方法即可，代码如下：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> targetFile = File(filesDir.toString() + File.separator + <span class="string">"test.txt"</span>)</span><br><span class="line"><span class="keyword">val</span> atomicFileExp = AtomicFile(targetFile)</span><br><span class="line">Log.d(localClassName,atomicFileExp.readText())</span><br></pre></td></tr></tbody></table></figure><p>​        前面我们向文件中写入了一些文本字符，上述代码的作用即读取这个文件的内容，并输出到 Logcat 中。</p><p>​        需要注意的是，该方法将返回文件的全部内容。readFully() 在原始的 AtomicFile.java 类中，该方法封装了以输入流的方式读取文件全部内容的方法。需要注意的是，在调用该方法时，请权衡内存资源消耗。</p><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>​        View 意为视图，Core KTX 扩展了传统的 android.view.View、android.view.ViewGroup 等类，在某些特定的场景下，为开发者提供了极大的方便。</p><h4 id="简化的监听器实现"><a href="#简化的监听器实现" class="headerlink" title="简化的监听器实现"></a>简化的监听器实现</h4><p>​        Core KTX 提供了简化的 View 监听器实现，除了前文中提到的 doOnPreDraw() 方法外，还有 doOnAttach()、doOnDetach()、doOnLayout() 和 doOnNextLayout()。它们分别对应传统写法中的 addOnAttachStateChangeListener() 和 addOnLayoutChangeListener() 方法及其回调。</p><p>​    例如，我们想对某个 View 添加 attach 监听：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">demoTv.doOnAttach { Log.d(localClassName, <span class="string">"doOnAttach"</span>) }</span><br></pre></td></tr></tbody></table></figure><h4 id="View-截图转-Bitmap"><a href="#View-截图转-Bitmap" class="headerlink" title="View 截图转 Bitmap"></a>View 截图转 Bitmap</h4><p>​        在某些产品需求中，需要将指定的 View 保存为图片，而要实现这个功能，首要任务就是将其转换为 Bitmap，再将 Bitmap 对象编码为 base64 进行传输或存为图片以备后用。后面这一步较为简单，仅需调用 bitmap 对象的 compress() 方法即可。接下来讨论前一步，即如何将 View 截图为 Bitmap 对象。</p><p>​        Core KTX 封装了该步骤的实现，我们仅需调用 view 对象的 drawToBitmap() 方法即可。下面的代码为我们演示截取 TextView 为 Bitmap 并显示在 TextView 下方的实现：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">demoIv.setImageBitmap(demoTv.drawToBitmap())</span><br></pre></td></tr></tbody></table></figure><p>​    没错，只需要一行代码。demoIv 是 ImageView 对象，在 demoTv 的下方。demoTv 是 TextView 对象，显示的文本是「Hello World!」。给 TextView 截个图。</p><p>​        这里需要注意一点，当 View 还没有完成绘制时，调用该方法会引发崩溃，其原因是：View needs to be laid out before calling drawToBitmap()，即 View 需要完成绘制后才能调用 drawToBitmap() 方法。比较保险的做法是借助 View 的 postDelayed() 方法实现，具体写法如下：</p><p><img src="/2022/08/10/Android%20KTX%E6%89%A9%E5%B1%95/7.png" alt=""></p><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p>​        Collection KTX 扩展了 SparseArrayCompat（SparseArray 的低版本兼容 API）和 LongSparseArray，提供了某些常用操作的封装，为日常使用提供了方便。扩展的方法对 SparseArrayCompat 和 LongSparseArray 大体相同。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation "androidx.collection:collection-ktx:1.1.0"</span><br></pre></td></tr></tbody></table></figure><h4 id="获取集合中所有的-Key-和-Value"><a href="#获取集合中所有的-Key-和-Value" class="headerlink" title="获取集合中所有的 Key 和 Value"></a>获取集合中所有的 Key 和 Value</h4><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 获取所有 Key</span></span><br><span class="line"><span class="keyword">val</span> intIt = map.keyIterator()</span><br><span class="line"><span class="comment">// 获取所有 Value</span></span><br><span class="line"><span class="keyword">val</span> valueIt = map.valueIterator()</span><br></pre></td></tr></tbody></table></figure><p>​        在使用时，我们可以使用 Iterator 的 hasNext() 方法作为遍历条件，使用 next() 方法取值。下面的代码将演示如何获取并使用 Key 值和 Value 值：</p><p><img src="/2022/08/10/Android%20KTX%E6%89%A9%E5%B1%95/8.png" alt=""></p><h4 id="集合的遍历"><a href="#集合的遍历" class="headerlink" title="集合的遍历"></a>集合的遍历</h4><p>​        Collection KTX 提供的遍历方法名为 forEach()，下面的代码将为我们演示遍历的方法：</p><p><img src="/2022/08/10/Android%20KTX%E6%89%A9%E5%B1%95/9.png" alt=""></p><p>​        上面的代码是得分获奖的示例。其中，Key 代表分数，是 Int 类型值；Value 表示名字，是 String 类型值。在 forEach() 遍历中，通过对分数的条件筛选得到获奖结果。要特别注意的是，程序在一开始指明了整个集合的大小为 10，并不意味着 Key 值的范围是 0~9，它只代表集合中元素的个数。</p><h4 id="集合元素的增加与替换"><a href="#集合元素的增加与替换" class="headerlink" title="集合元素的增加与替换"></a>集合元素的增加与替换</h4><p>​        为了完成某些特定的需求，我们需要对集合中的元素进行增加或替换。SparseArrayCompat 和 LongSparseArray 中提供了相应的方法：putIfAbsent()，该方法会通过对原有集合进行修改达到元素增加或替换的效果。当我们不想修改原集合，而是想要得到一个新的集合时，Collection KTX 中提供的方法就派上用场了。<strong>在 Collection KTX 中提供了名为 plus() 的方法，它用于合并两个集合，并生成包含合并结果的新的集合。</strong></p><p>举个例子，现有两个集合 map 和 map2，它们按照如下代码赋值：</p><p><img src="/2022/08/10/Android%20KTX%E6%89%A9%E5%B1%95/10.png" alt=""></p><p>接下来，调用 map 对象的 plus() 方法将其与 map2 对象数据合并，并将结果赋值给 map3 对象。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> map3 = map.plus(map2)</span><br></pre></td></tr></tbody></table></figure><p> map 和 map2 中同时包含 Key 为 3 的数据，当发生合并时，map2 的数据会覆盖 map 中的数据。</p><p>如果调用 map2 对象的 plus() 方法，与 map 对象发生合并    </p><p>由于 Key 的值在集合发生插入时被自动以升序排序，因此无论以何种方式合并，其结果都是升序的。</p><h2 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation "androidx.fragment:fragment-ktx:1.2.5"</span><br></pre></td></tr></tbody></table></figure><h4 id="Fragment-事务操作"><a href="#Fragment-事务操作" class="headerlink" title="Fragment 事务操作"></a>Fragment 事务操作</h4><p><img src="/2022/08/10/Android%20KTX%E6%89%A9%E5%B1%95/11.png" alt=""></p><p>​        很显然，beginTransaction() 方法被简化掉了，最终的提交方式由一个布尔值来选择。当该值为 true 时，执行 commitAllowingStateLoss()；反之，执行 commit()，默认值为 false。</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;​        Android KTX 是作为 Kotlin 的扩展库存在的。它帮助开发者封装了一些常见的代码块。&lt;/p&gt;
&lt;p&gt;​        Android KTX 分为核心（Core）、集合（Collection）、视图碎片（Fragment）等方面，提供了面向 Android Jetpack 以及其他 Android API 更简单且易于理解和使用的增强 API。从源码上看，Android KTX 充分利用了 Kotlin 编程语言的特性，包括扩展函数、扩展属性、Lambda 表达式、命名参数、参数默认值、协程等。&lt;/p&gt;
&lt;h2 id=&quot;Core-KTX&quot;&gt;&lt;a href=&quot;#Core-KTX&quot; class=&quot;headerlink&quot; title=&quot;Core KTX&quot;&gt;&lt;/a&gt;Core KTX&lt;/h2&gt;&lt;p&gt;​        以 Kotlin 作为默认使用的编程语言创建新项目，则该库会被自动添加。&lt;/p&gt;
&lt;h3 id=&quot;Animation&quot;&gt;&lt;a href=&quot;#Animation&quot; class=&quot;headerlink&quot; title=&quot;Animation&quot;&gt;&lt;/a&gt;Animation&lt;/h3&gt;&lt;p&gt;​        Animation 意为动画，在 Core KTX 中提供了一系列简化动画执行监听的 API，扩展了原有的 android.animation.Animator 类。&lt;/p&gt;
&lt;p&gt;​        在 Core KTX 中，当我们想要实现对动画的执行监听时，可使用 Animator 类提供的 doOnStart()、doOnEnd()、doOnPause()、doOnCancel() 等方法。&lt;/p&gt;
&lt;p&gt;​        举个例子，下面这段代码定义了名为 infiniteAlphaAnim 的对象，它定义了无限循环地执行透明度改变的动画效果。&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; infiniteAlphaAnim = ObjectAnimator.ofFloat(demoTv, &lt;span class=&quot;string&quot;&gt;&quot;alpha&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.3f&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1f&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     infiniteAlphaAnim.duration = &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     infiniteAlphaAnim.repeatMode = ValueAnimator.RESTART&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     infiniteAlphaAnim.repeatCount = ValueAnimator.INFINITE&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;接着，我们就可以添加动画执行监听器了：&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
    
      <category term="Android" scheme="https://hluck.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Appcompat UI组件</title>
    <link href="https://hluck.github.io/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/"/>
    <id>https://hluck.github.io/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/</id>
    <published>2022-08-09T06:04:58.056Z</published>
    <updated>2022-08-10T13:22:16.104Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="App-Bar"><a href="#App-Bar" class="headerlink" title="App Bar"></a>App Bar</h2><p>​    即APP应用栏（ToolBar）</p><p><strong>1.添加ToolBar控件</strong></p><p>​    修改 activity_main.xml 的内容，添加如下代码：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.appcompat.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/tb"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:elevation</span>=<span class="string">"4dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:theme</span>=<span class="string">"@style/Widget.MaterialComponents.Toolbar"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​        去掉默认的主题，以便去掉默认的ActionBar</p><p>​        分别打开位于 values 和 values-night 的 <strong>themes.xml</strong>，修改名为 Theme.AppBarDemo 的 parent 属性值为 Theme.MaterialComponents.DayNight.NoActionBar。</p><p>​    <strong>2.在ToolBar上添加菜单：</strong></p><p>在项目的 res 目录下新建 menu 目录，并创建菜单 XML 文档。本例将其命名为 activity_main_menu.xml，内容如下：</p><a id="more"></a><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/activity_main_menu_item1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_baseline_search_24"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"@string/activity_main_menu_item_1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:actionViewClass</span>=<span class="string">"androidx.appcompat.widget.SearchView"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"ifRoom"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/activity_main_menu_item2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_baseline_help_24"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"@string/activity_main_menu_item_2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"never"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/activity_main_menu_item3"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"@string/activity_main_menu_item_3"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"never"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​        我们使用 app:showAsAction 来表示菜单的显示方式。它常见的取值为 ifRoom 和 never。前者表示当空间允许时，显示完整的菜单名称或图标，当空间不够时，会以折叠的方式将没有显示的菜单放进「更多」按钮中；后者表示无论空间是否允许，一律放进「更多」按钮中。这种被放进「更多」按钮的菜单称为「溢出菜单」</p><ol start="3"><li><p>为ToolBar选项添加搜索功能（添加了actionViewClass属性）</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/activity_main_menu_item1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/ic_baseline_search_24"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"@string/activity_main_menu_item_1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:actionViewClass</span>=<span class="string">"androidx.appcompat.widget.SearchView"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"ifRoom"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br></pre></td></tr></tbody></table></figure><p>复写的 onCreateOptionsMenu()；方法中添加用于搜索的 SearchView 控件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">class MainActivity : BaseActivity&lt;ActivityMainBinding&gt;() {</span><br><span class="line"></span><br><span class="line">    override fun ActivityMainBinding.initBinding() {</span><br><span class="line">        <span class="comment">//设置ToolBar对象作为AppBar使用</span></span><br><span class="line">        setSupportActionBar(mBinding.tb)</span><br><span class="line">        <span class="comment">//设置标题</span></span><br><span class="line">        tb.title = getString(R.string.app_name)</span><br><span class="line">        <span class="comment">//设置子标题</span></span><br><span class="line">        tb.setSubtitle(<span class="string">"hello"</span>)</span><br><span class="line">        <span class="comment">//设置图标</span></span><br><span class="line">        tb.setLogo(R.drawable.ic_launcher_foreground)</span><br><span class="line">        <span class="comment">//修改返回键图标</span></span><br><span class="line">        tb.setNavigationIcon(android.R.drawable.ic_delete)</span><br><span class="line">        <span class="comment">//返回键生效，启用返回键</span></span><br><span class="line">        supportActionBar?.setDisplayHomeAsUpEnabled(<span class="keyword">true</span>)</span><br><span class="line">        <span class="comment">//实现菜单点击动作的监听</span></span><br><span class="line">        tb.setOnMenuItemClickListener {</span><br><span class="line">            when(it.itemId){</span><br><span class="line">                R.id.activity_main_menu_item1 -&gt; {</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span><span class="meta">@MainActivity</span>,<span class="string">"Search"</span>,Toast.LENGTH_SHORT).show()</span><br><span class="line">                }</span><br><span class="line">                R.id.activity_main_menu_item2 -&gt; {</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span><span class="meta">@MainActivity</span>,<span class="string">"Menu_1"</span>,Toast.LENGTH_SHORT).show()</span><br><span class="line">                }</span><br><span class="line">                R.id.activity_main_menu_item3 -&gt; {</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span><span class="meta">@MainActivity</span>,<span class="string">"Menu_2"</span>,Toast.LENGTH_SHORT).show()</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span><span class="meta">@setOnMenuItemClickListener</span> <span class="keyword">false</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">onOptionsItemSelected</span><span class="params">(item: MenuItem)</span>: Boolean </span>{</span><br><span class="line">        <span class="comment">//定义返回键动作</span></span><br><span class="line">        <span class="keyword">if</span> (item.itemId == android.R.id.home){</span><br><span class="line">            finish()</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关联菜单布局</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> menu Menu</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">override fun <span class="title">onCreateOptionsMenu</span><span class="params">(menu: Menu?)</span>: Boolean </span>{</span><br><span class="line">        menuInflater.inflate(R.menu.activity_main_menu,menu)</span><br><span class="line">        <span class="comment">//为搜索View添加搜索事件回调</span></span><br><span class="line">        val searchManager = getSystemService(Context.SEARCH_SERVICE) as SearchManager</span><br><span class="line">        val searchView: SearchView = menu!!.findItem(R.id.activity_main_menu_item1).actionView as SearchView</span><br><span class="line">        searchView.setSearchableInfo(searchManager.getSearchableInfo(componentName))</span><br><span class="line">        searchView.setOnQueryTextListener(object :SearchView.OnQueryTextListener{</span><br><span class="line"></span><br><span class="line">            <span class="function">override fun <span class="title">onQueryTextSubmit</span><span class="params">(query: String?)</span>: Boolean </span>{</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span><span class="meta">@MainActivity</span>,<span class="string">"搜索：${query}"</span>,Toast.LENGTH_SHORT).show()</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="function">override fun <span class="title">onQueryTextChange</span><span class="params">(newText: String?)</span>: Boolean </span>{</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span></span><br><span class="line">            }</span><br><span class="line">        })</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/1.png" alt=""></p><p><img src="/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/2.png" alt=""></p><p><img src="/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/3.png" alt=""></p></li></ol><h3 id="ToolBar小结"><a href="#ToolBar小结" class="headerlink" title="ToolBar小结"></a>ToolBar小结</h3><p>显示 ToolBar 的方法：</p><ol><li><p>隐藏掉默认的 ActionBar。</p></li><li><p>调用 setSupportActionBar()；方法，参数为 ToolBar 对象。</p></li></ol><p>ToolBar 的构成：</p><ul><li>返回按钮。</li><li>图标。</li><li>标题与子标题。</li><li>菜单项。</li><li>搜索栏。</li></ul><p>ToolBar 的样式：</p><ul><li>继承 Base.Widget.AppCompat.Toolbar、Base.Widget.AppCompat.Light.PopupMenu.Overflow 和 Base.Widget.AppCompat.ListPopupWindow，再自定义属性值。</li></ul><h2 id="AppCompatActivity-与AppCompatDelegate"><a href="#AppCompatActivity-与AppCompatDelegate" class="headerlink" title="AppCompatActivity 与AppCompatDelegate"></a>AppCompatActivity 与AppCompatDelegate</h2><h3 id="AppCompatActivity"><a href="#AppCompatActivity" class="headerlink" title="AppCompatActivity"></a>AppCompatActivity</h3><p>​        AppCompatActivity 提供了在旧版本 Android 操作系统（兼容的最低版本为 Android 2.1）上使用新特性的兼容处理。主要包含：</p><ul><li>对 ToolBar 控件的支持。</li><li>对暗黑／明亮主题的支持。</li><li>对 DrawerLayout 控件的支持。</li></ul><h3 id="AppCompatDelegate"><a href="#AppCompatDelegate" class="headerlink" title="AppCompatDelegate"></a>AppCompatDelegate</h3><p>​        Delegate 意为「委托」，它是 AppCompatActivity 和 Activity 之间的「桥梁」。当我们的项目不得不继承 Activity，却还想使用某些新版本 Android 的特性时，AppCompatDelegate 就可以派上用场了。</p><p>通过 AppCompatDelegate 使用 ToolBar:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">AppCompatCallback</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AppCompatDelegate appCompatDelegate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"><span class="comment">//        setContentView(R.layout.activity_main);</span></span><br><span class="line">        appCompatDelegate = AppCompatDelegate.create(<span class="keyword">this</span>, <span class="keyword">this</span>);</span><br><span class="line">        appCompatDelegate.onCreate(savedInstanceState);</span><br><span class="line">        appCompatDelegate.setContentView(R.layout.activity_main);</span><br><span class="line">        Toolbar toolbar = (Toolbar) findViewById(R.id.activity_main_tb);</span><br><span class="line">        appCompatDelegate.setSupportActionBar(toolbar);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSupportActionModeStarted</span><span class="params">(ActionMode mode)</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSupportActionModeFinished</span><span class="params">(ActionMode mode)</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActionMode <span class="title">onWindowStartingSupportActionMode</span><span class="params">(ActionMode.Callback callback)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onPostCreate(savedInstanceState);</span><br><span class="line">        appCompatDelegate.onPostCreate(savedInstanceState);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span><span class="params">(@NonNull Configuration newConfig)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onConfigurationChanged(newConfig);</span><br><span class="line">        appCompatDelegate.onConfigurationChanged(newConfig);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onStart();</span><br><span class="line">        appCompatDelegate.onStart();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onStop();</span><br><span class="line">        appCompatDelegate.onStop();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        appCompatDelegate.onDestroy();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostResume</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onPostResume();</span><br><span class="line">        appCompatDelegate.onPostResume();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSaveInstanceState</span><span class="params">(@NonNull Bundle outState)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.onSaveInstanceState(outState);</span><br><span class="line">        appCompatDelegate.onSaveInstanceState(outState);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(CharSequence title)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>.setTitle(title);</span><br><span class="line">        appCompatDelegate.setTitle(title);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="AppCompatDialogFragment"><a href="#AppCompatDialogFragment" class="headerlink" title="AppCompatDialogFragment"></a>AppCompatDialogFragment</h2><ol><li><p>简单对话框</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>： LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span>： 2022/8/9</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：简单对话框</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleDialogFragment</span></span>(onButtonClicked:OnButtonClicked):AppCompatDialogFragment() {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> clicked = onButtonClicked</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">OnButtonClicked</span></span>{</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">onPositiveButtonClicked</span><span class="params">()</span></span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">onNegativeButtonClicked</span><span class="params">()</span></span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateDialog</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span>: Dialog {</span><br><span class="line"><span class="comment">//        val builder = activity?.let { AlertDialog.Builder(it) }</span></span><br><span class="line">        <span class="keyword">val</span> builder = AlertDialog.Builder(requireContext())</span><br><span class="line">        builder.setMessage(<span class="string">"您确定这样做吗？"</span>)</span><br><span class="line">            .setPositiveButton(<span class="string">"确定"</span>) { dialog, which -&gt;</span><br><span class="line">                clicked.onPositiveButtonClicked()</span><br><span class="line">            }</span><br><span class="line">            .setNegativeButton(<span class="string">"取消"</span>){ dialog, which -&gt;</span><br><span class="line">                      clicked.onNegativeButtonClicked()</span><br><span class="line">            }</span><br><span class="line">        <span class="keyword">return</span> builder.create()</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单对话框</span></span><br><span class="line">        btn1.setOnClickListener {</span><br><span class="line">            SimpleDialogFragment(<span class="keyword">object</span> : SimpleDialogFragment.OnButtonClicked{</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPositiveButtonClicked</span><span class="params">()</span></span> {</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, <span class="string">"确定"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onNegativeButtonClicked</span><span class="params">()</span></span> {</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, <span class="string">"取消"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                }</span><br><span class="line">            }).show(supportFragmentManager,<span class="string">"SimpleDialog"</span>)</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/4.png" alt=""></p></li><li><p>单选对话框</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>： LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span>： 2022/8/9</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：单选对话框</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleSelectListDialogFragment</span></span>(selectItems: Array&lt;String&gt;, onItemSelected:OnItemSelected):AppCompatDialogFragment() {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> listener = onItemSelected</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> items = selectItems</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">OnItemSelected</span></span>{</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">onItemSelected</span><span class="params">(index:<span class="type">Int</span>)</span></span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateDialog</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span>: Dialog {</span><br><span class="line">        <span class="keyword">val</span> builder = AlertDialog.Builder(requireContext())</span><br><span class="line">        builder.setTitle(<span class="string">"请选择"</span>).setItems(items){ dialog,which -&gt;</span><br><span class="line">            listener.onItemSelected(which)</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> builder.create()</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单选对话框</span></span><br><span class="line"><span class="keyword">val</span> items = arrayOf(<span class="string">"选项1"</span>,<span class="string">"选项2"</span>,<span class="string">"选项3"</span>,<span class="string">"选项4"</span>,<span class="string">"选项5"</span>)</span><br><span class="line">btn2.setOnClickListener {</span><br><span class="line">            SingleSelectListDialogFragment(items,<span class="keyword">object</span> : SingleSelectListDialogFragment.OnItemSelected{</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onItemSelected</span><span class="params">(index: <span class="type">Int</span>)</span></span> {</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, <span class="string">"你选择的是<span class="subst">${items[index]}</span>"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                }</span><br><span class="line">            }).show(supportFragmentManager,<span class="string">"SingleListSelectDialog"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/5.png" alt=""></p></li><li><p>带有确认按钮的对话框</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>： LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span>： 2022/8/9</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：带有确认取消按钮的对话框</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleSelectWithConfirmListDialogFragment</span></span>(items:Array&lt;String&gt;,selectedCall:OnItemSelected):AppCompatDialogFragment() {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> selectItems = items</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> call = selectedCall</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">OnItemSelected</span></span>{</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">onItemSelected</span><span class="params">(index:<span class="type">Int</span>)</span></span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">confirm</span><span class="params">(index: <span class="type">Int</span>)</span></span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">cancel</span><span class="params">()</span></span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateDialog</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span>: Dialog {</span><br><span class="line">        <span class="keyword">val</span> builder = AlertDialog.Builder(requireContext())</span><br><span class="line">            .setTitle(<span class="string">"请选择"</span>).setSingleChoiceItems(selectItems,<span class="number">0</span>){dialog,which -&gt;</span><br><span class="line">                call.onItemSelected(which)</span><br><span class="line">                index = which</span><br><span class="line">            }.setPositiveButton(<span class="string">"确定"</span>){dialog,which -&gt;</span><br><span class="line">                call.confirm(which)</span><br><span class="line">            }</span><br><span class="line">            .setNegativeButton(<span class="string">"取消"</span>){dialog,which -&gt;</span><br><span class="line">                call.cancel()</span><br><span class="line">            }</span><br><span class="line">        <span class="keyword">return</span> builder.create()</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//带有确认按钮的单选对话框</span></span><br><span class="line">btn3.setOnClickListener {</span><br><span class="line">    SingleSelectWithConfirmListDialogFragment(items = items,<span class="keyword">object</span> :SingleSelectWithConfirmListDialogFragment.OnItemSelected{</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onItemSelected</span><span class="params">(index: <span class="type">Int</span>)</span></span> {</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, <span class="string">"<span class="subst">${items[index]}</span>"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">confirm</span><span class="params">(index: <span class="type">Int</span>)</span></span> {</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, <span class="string">"确定"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">cancel</span><span class="params">()</span></span> {</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, <span class="string">"取消"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        }</span><br><span class="line">    }).show(supportFragmentManager,<span class="string">"SingleSelectWithConfirmListDialogFragment"</span>)</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/6.png" alt=""></p></li><li><p>多选对话框</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>： LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span>： 2022/8/9</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：带有确认的多选对话框</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultiSelectWithConfirmListDialogFragment</span></span>(items:Array&lt;String&gt;,isItemSelects:BooleanArray,onItemSelect:OnItemSelected):AppCompatDialogFragment() {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> selectedCall = onItemSelect</span><br><span class="line">    <span class="keyword">val</span> selects = items</span><br><span class="line">    <span class="keyword">val</span> isSelectArr = isItemSelects</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">OnItemSelected</span></span>{</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">onItemSelected</span><span class="params">(index:<span class="type">Int</span>)</span></span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">confirm</span><span class="params">(isItemSelects:<span class="type">BooleanArray</span>)</span></span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">cancel</span><span class="params">()</span></span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateDialog</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span>: Dialog {</span><br><span class="line">        <span class="keyword">val</span> build = AlertDialog.Builder(requireContext())</span><br><span class="line">        build.setTitle(<span class="string">"请选择"</span>)</span><br><span class="line">            .setMultiChoiceItems(selects,isSelectArr</span><br><span class="line">            ) { dialog, which, isChecked -&gt;</span><br><span class="line">                selectedCall.onItemSelected(which)</span><br><span class="line">                isSelectArr[which] = isChecked</span><br><span class="line">            }</span><br><span class="line">            .setPositiveButton(<span class="string">"确定"</span>){dialog,which -&gt;</span><br><span class="line">                selectedCall.confirm(isSelectArr)</span><br><span class="line">            }</span><br><span class="line">            .setNegativeButton(<span class="string">"取消"</span>){dialog,which -&gt;</span><br><span class="line">                selectedCall.cancel()</span><br><span class="line">            }</span><br><span class="line">        <span class="keyword">return</span> build.create()</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多选对话框</span></span><br><span class="line">btn4.setOnClickListener {</span><br><span class="line">    <span class="keyword">val</span> booleanArr = booleanArrayOf(<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>,<span class="literal">false</span>)</span><br><span class="line">    MultiSelectWithConfirmListDialogFragment(items,booleanArr,<span class="keyword">object</span> :MultiSelectWithConfirmListDialogFragment.OnItemSelected{</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onItemSelected</span><span class="params">(index: <span class="type">Int</span>)</span></span> {</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, <span class="string">"选择了<span class="subst">${items[index]}</span>"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">confirm</span><span class="params">(isItemSelects: <span class="type">BooleanArray</span>)</span></span> {</span><br><span class="line">            <span class="keyword">val</span> stringBuilder = StringBuilder()</span><br><span class="line">            <span class="keyword">for</span> (i <span class="keyword">in</span> isItemSelects.indices) {</span><br><span class="line">                <span class="keyword">if</span> (isItemSelects[i]){</span><br><span class="line">                    stringBuilder.append(items[i]+<span class="string">" \n"</span>)</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, <span class="string">"选择了<span class="subst">${stringBuilder.toString()}</span>"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">cancel</span><span class="params">()</span></span> {</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, <span class="string">"取消"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        }</span><br><span class="line">    }).show(supportFragmentManager,<span class="string">"multiSelect"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/7.png" alt=""></p></li><li><p>自定义选项对话框</p><p>自定义选项布局：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">"3dp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:src</span>=<span class="string">"@android:drawable/ic_menu_compass"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/item_single_menu_name_tv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>对话框：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>： LJH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Time</span>： 2022/8/9</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>：自定义选项对话框</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleCustomSelectListDialogFragment</span></span>(selectItems:Array&lt;String&gt;,onItemSelected:OnItemSelected):AppCompatDialogFragment() {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> selectedCall = onItemSelected</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> items = selectItems</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> menuAdapter:MenuAdapter</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">OnItemSelected</span></span>{</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">onItemSelected</span><span class="params">(index:<span class="type">Int</span>)</span></span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateDialog</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span>: Dialog {</span><br><span class="line">        <span class="keyword">val</span> builder = AlertDialog.Builder(requireContext())</span><br><span class="line">        menuAdapter = MenuAdapter(items)</span><br><span class="line">        builder.setTitle(<span class="string">"请选择"</span>)</span><br><span class="line">            .setAdapter(menuAdapter){dialog,which -&gt;</span><br><span class="line">                selectedCall.onItemSelected(which)</span><br><span class="line">            }</span><br><span class="line">        <span class="keyword">return</span> builder.create()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuAdapter</span></span>(selectItems: Array&lt;String&gt;):BaseAdapter(){</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">val</span>  items = selectItems</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getCount</span><span class="params">()</span></span>: <span class="built_in">Int</span> = items.size</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItem</span><span class="params">(position: <span class="type">Int</span>)</span></span>: Any = items[position]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItemId</span><span class="params">(position: <span class="type">Int</span>)</span></span>: <span class="built_in">Long</span> = position.toLong()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getView</span><span class="params">(position: <span class="type">Int</span>,convertView: <span class="type">View</span>?, parent: <span class="type">ViewGroup</span>?)</span></span>: View {</span><br><span class="line">            <span class="keyword">var</span> view:View? = convertView</span><br><span class="line">            <span class="keyword">val</span> inflater = LayoutInflater.from(requireContext())</span><br><span class="line">            <span class="keyword">var</span> holder:ViewHolder? = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">if</span> (convertView == <span class="literal">null</span>){</span><br><span class="line">                view =  inflater.inflate(R.layout.item_single_menu,<span class="literal">null</span>)</span><br><span class="line">                holder = ViewHolder()</span><br><span class="line">                holder.textView = view.findViewById(R.id.item_single_menu_name_tv)</span><br><span class="line">                view.tag = holder</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                holder = convertView.tag <span class="keyword">as</span> ViewHolder</span><br><span class="line">            }</span><br><span class="line">            holder.textView?.text = items[position]</span><br><span class="line">            <span class="keyword">return</span> view!!</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span>{</span><br><span class="line">            <span class="keyword">var</span> textView:TextView? = <span class="literal">null</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义选项对话框</span></span><br><span class="line">        btn5.setOnClickListener {</span><br><span class="line">            Log.d(localClassName,<span class="string">"btn5"</span>)</span><br><span class="line">            SingleCustomSelectListDialogFragment(items,<span class="keyword">object</span> :SingleCustomSelectListDialogFragment.OnItemSelected{</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onItemSelected</span><span class="params">(index: <span class="type">Int</span>)</span></span> {</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, <span class="string">"选择了<span class="subst">${items[index]}</span>"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                }</span><br><span class="line">            }).show(supportFragmentManager,<span class="string">"customSelcet"</span>)</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/8.png" alt=""></p></li></ol><h2 id="AppCompatResources"><a href="#AppCompatResources" class="headerlink" title="AppCompatResources"></a>AppCompatResources</h2><p>​        自从 Android 5.0 开始，Resources 对象引入了两个新方法，分别是 getColorStateList()；和 getDrawable()；。这两个方法在某些需求中非常实用，AppCompatResources 提供了在低版本 Android 中调用这两个方法的途径。</p><h3 id="定义不同点击状态的颜色值"><a href="#定义不同点击状态的颜色值" class="headerlink" title="定义不同点击状态的颜色值"></a>定义不同点击状态的颜色值</h3><p>​        AppCompatResources.getColorStateList()；方法用于处理点击时的颜色变化，借助它可以实现不同点击状态的不同样式。</p><p>​        1. 首先，我们需要通过 XML 文件定义在不同点击状态时的颜色值。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_pressed</span>=<span class="string">"true"</span> <span class="attr">android:color</span>=<span class="string">"#FF0000FF"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:state_focused</span>=<span class="string">"true"</span> <span class="attr">android:color</span>=<span class="string">"#FF018786"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">"#FF000000"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​        2.为控件设置点击状态</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * getColorStateList()；方法用于处理点击时的颜色变化，借助它可以实现不同点击状态的不同样式。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@SuppressLint(<span class="meta-string">"ResourceType"</span>)</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">colorStateListDemo</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">val</span> colorStateList = AppCompatResources.getColorStateList(<span class="keyword">this</span>,R.drawable.selector_button_text)</span><br><span class="line">    </span><br><span class="line">    mBinding.activityMainHelloTv.setTextColor(colorStateList)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​    TextView控件点击后颜色为蓝色：</p><p><img src="/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/9.png" alt=""></p><h3 id="从-resId-获取-Drawable-对象"><a href="#从-resId-获取-Drawable-对象" class="headerlink" title="从 resId 获取 Drawable 对象"></a>从 resId 获取 Drawable 对象</h3><p>​        AppCompatResources.getDrawable()；方法用于从 resId 获取 Drawable 对象以便后面使用。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * getDrawable()；方法用于从 resId 获取 Drawable 对象以便后面使用。</span></span><br><span class="line"><span class="comment">     * getDrawable(): 可以随时调用这个方法获取 Drawable 或 Mipmap 资源。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Drawable?</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">drawableDemo</span><span class="params">()</span></span>: Drawable? {</span><br><span class="line">        <span class="keyword">return</span> AppCompatResources.getDrawable(<span class="keyword">this</span>,R.mipmap.ic_launcher)</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>完整代码：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() {</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> mBinding:ActivityMainBinding</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        mBinding = ActivityMainBinding.inflate(layoutInflater)</span><br><span class="line">        setContentView(mBinding.root)</span><br><span class="line">        colorStateListDemo()</span><br><span class="line">        mBinding.activityMainHelloTv.setOnClickListener {</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>,<span class="string">"hello"</span>,Toast.LENGTH_SHORT).show()</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        mBinding.activityMainIconIv.setImageDrawable(drawableDemo())</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * getColorStateList()；方法用于处理点击时的颜色变化，借助它可以实现不同点击状态的不同样式。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressLint(<span class="meta-string">"ResourceType"</span>)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">colorStateListDemo</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">val</span> colorStateList = AppCompatResources.getColorStateList(<span class="keyword">this</span>,R.drawable.selector_button_text)</span><br><span class="line">        mBinding.activityMainHelloTv.setTextColor(colorStateList)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * getDrawable()；方法用于从 resId 获取 Drawable 对象以便后面使用。</span></span><br><span class="line"><span class="comment">     * getDrawable(): 可以随时调用这个方法获取 Drawable 或 Mipmap 资源。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Drawable?</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">drawableDemo</span><span class="params">()</span></span>: Drawable? {</span><br><span class="line">        <span class="keyword">return</span> AppCompatResources.getDrawable(<span class="keyword">this</span>,R.mipmap.ic_launcher)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/10.png" alt=""></p><h2 id="AnimatedStateListDrawable"><a href="#AnimatedStateListDrawable" class="headerlink" title="AnimatedStateListDrawable"></a>AnimatedStateListDrawable</h2><p>​        AnimatedStateListDrawable 是从 Android 5.0 引入的新 API，它是 Drawable 的子类，用于实现在不同状态下显示不同的图像内容。它有点类似按钮，当用户点击了这个按钮后，按钮从未点击切换到点击状态。但是，这其中的变化只有两个—点击和未点击。而 AnimatedStateListDrawable 为变化提供了更多可能。它允许我们自定义状态发生改变时的执行动画。AnimatedStateListDrawableCompat 让该特性在较低版本的 Android 设备上同样适用。</p><p><strong>定义动画执行脚本</strong></p><p>​    现在，想象这样一个效果：有一个 ImageView，默认显示蓝色，当用户点击这个 ImageView 时，显示为绿色。</p><ol><li><p>第一步是定义动画的执行脚本，在项目 Module 的 drawable 目录下创建一个 XML 文件，名为 anim_image.xml，然后输入以下代码：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">animated-selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    两个 item 元素定义了动画起始和终止的状态和条件，</span></span><br><span class="line"><span class="comment">        transition 元素定义了动画由哪里开始，到哪里结束。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/off"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">"@drawable/blue"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:state_pressed</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/on"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:drawable</span>=<span class="string">"@drawable/green"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:state_pressed</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fromId</span>=<span class="string">"@id/off"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:toId</span>=<span class="string">"@id/on"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">animation-list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:drawable</span>=<span class="string">"@drawable/blue"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:duration</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:drawable</span>=<span class="string">"@drawable/green"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:duration</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">animation-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">animated-selector</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​        整个 animated-selector 由 3 个元素组成。两个 item 元素定义了动画起始和终止的状态和条件，transition 元素定义了动画由哪里开始，到哪里结束。Transition 中的 animation-list 节点定义了动画执行的过程。我们可以在这里添加多个 item 节点，动画开始后，每个 item 节点会依次被执行。</p></li></ol><p><strong>执行动画</strong></p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() {</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> binding: ActivityMainBinding</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        binding = ActivityMainBinding.inflate(layoutInflater)</span><br><span class="line">        setContentView(binding.root)</span><br><span class="line">        initData()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initData</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">val</span> animatedDrawable = AnimatedStateListDrawableCompat.create(<span class="keyword">this</span>,R.drawable.anim_image,<span class="literal">null</span>)</span><br><span class="line">        binding.iv.setImageDrawable(animatedDrawable)</span><br><span class="line">        binding.iv.isClickable = <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​                                                                <img src="/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/11.png" alt=""></p><p>​    由于 ImageView 默认是不可点击的，因此不要忘记执行 setClickable（true）；，使其变为可点击。</p><p>​    完成后运行 App，当用户保持点击 ImageView 不松手时，它将显示为绿色；当用户没有点击或放开手指后，将显示为蓝色。</p><h2 id="ActionMenuView"><a href="#ActionMenuView" class="headerlink" title="ActionMenuView"></a>ActionMenuView</h2><p>​        ActionMenuView 允许我们在界面的任何位置摆放菜单。</p><ol><li><p>要使用 ActionMenuView，首先要定义菜单项</p><p><img src="/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/12.png" alt=""></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/menu_1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"Menu 1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"ifRoom"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/menu_two"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"Menu 2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"ifRoom"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/menu_three"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"Menu 3"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:showAsAction</span>=<span class="string">"never"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>本例中，我们在界面中央添加一个 ActionMenuView，完整的布局文件代码如下：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.appcompat.widget.ActionMenuView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/amv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>由于我们可以在一个界面中添加多个 ActionMenuView，因此需要把它们和对应的菜单项绑定起来。绑定的方法依旧是通过回调的 onCreateOptionsMenu()；方法实现，具体代码片段如下：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateOptionsMenu</span><span class="params">(menu: <span class="type">Menu</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">        menuInflater.inflate(R.menu.action_menu,binding.amv.menu)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onCreateOptionsMenu(menu)</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>总代码：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() {</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> binding: ActivityMainBinding</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        binding = ActivityMainBinding.inflate(layoutInflater)</span><br><span class="line">        setContentView(binding.root)</span><br><span class="line"></span><br><span class="line">        binding.amv.setOnMenuItemClickListener {</span><br><span class="line">            Toast.makeText(<span class="keyword">this</span>, <span class="string">"点击了："</span> + it.title, Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="keyword">return</span><span class="symbol">@setOnMenuItemClickListener</span> <span class="literal">true</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateOptionsMenu</span><span class="params">(menu: <span class="type">Menu</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">        menuInflater.inflate(R.menu.action_menu,binding.amv.menu)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onCreateOptionsMenu(menu)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><p><img src="/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/13.png" alt=""></p><h2 id="AutoCompleteTextView-和MultiAutoCompleteTextView"><a href="#AutoCompleteTextView-和MultiAutoCompleteTextView" class="headerlink" title="AutoCompleteTextView 和MultiAutoCompleteTextView"></a>AutoCompleteTextView 和MultiAutoCompleteTextView</h2><p>​        AutoCompleteTextView 和 MultiAutoCompleteTextView 控件自 Android 诞生之初就存在了，它<strong>提供了输入提示功能，即当用户在文本框中输入的文字和预设的数据匹配时，则弹出匹配的值列表</strong>。只是后者在前者的基础上可以通过分隔符同时搜索多个匹配结果。这样一来，用户可以直接选取列表项作为输入内容，省去了手动输入的麻烦。从名称上看，它虽然叫作 TextView，本质上更像是 EditText。</p><p>​        在 Android 5.0 及之后的版本中，开发者可以调用 setBackgroundTintList()；以及 setBackgroundTintMode()；方法，通过改变色调达到更改背景色的目的。为了兼容较低版本的 Android API，我们可以使用 ViewCompat 类作为「桥梁」，与 AppCompatAutoCompleteTextView 配合使用，达到与高版本 Android 设备显示效果一致的目的。</p><p>​        ViewCompat 提供了常用控件通用的版本兼容能力，比如本例提及的更改背景色调，不仅在 AppCompatAutoCompleteTextView 中存在，AppCompatButton 以及后文的众多控件中同样支持。</p><p>​        对于设置背景色调特性，我们可以通过 ViewCompat 类的静态方法实现，其方法名依然是 setBackgroundTintList ()；和 setBackgroundTintMode()；。</p><p>​        <strong>在调用设定色调相关的 API 时，我们通常使用 PorterDuff 混合模式的值作为参数传递。</strong></p><p>原始图：<img src="/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/14.png" alt=""></p><p><strong>混合方式的名称及混合结果</strong></p><p><img src="/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/15.png" alt=""></p><p>​        现在，我们来实现这些样式：修改默认的输入框下画线颜色，在非活动状态下显示为 colorPrimary 的色值，在输入或取得焦点的状态下显示为 colorPrimaryVariant 的色值。</p><ol><li><p>首先，新建一个 XML 文件，命名为 act_underline.xml，位于 res 下的 color 目录中。完整代码如下：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">"@color/purple_700"</span> <span class="attr">android:state_pressed</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">"@color/purple_700"</span> <span class="attr">android:state_focused</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">"@color/purple_500"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>然后，在布局文件中添加 AppCompatAutoCompleteTextView 控件：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.appcompat.widget.AppCompatAutoCompleteTextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/autoTv"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>最后，来到 MainActivity，设置控件样式：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() {</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> binding: ActivityMainBinding</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> arr = arrayOf(<span class="string">"Alice"</span>, <span class="string">"Bob"</span>, <span class="string">"Cindy"</span>, <span class="string">"David"</span>, <span class="string">"Edward"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        binding = ActivityMainBinding.inflate(layoutInflater)</span><br><span class="line">        setContentView(binding.root)</span><br><span class="line">        initData()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initData</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">val</span> adapter = ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>,android.R.layout.simple_dropdown_item_1line,arr)</span><br><span class="line">        ViewCompat.setBackgroundTintList(binding.autoTv,AppCompatResources.getColorStateList(<span class="keyword">this</span>,R.color.act_underline))</span><br><span class="line">        ViewCompat.setBackgroundTintMode(binding.autoTv,PorterDuff.Mode.SRC_IN)</span><br><span class="line">        binding.autoTv.setAdapter(adapter)</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/16.png" alt=""></p><p><img src="/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/17.png" alt=""></p></li></ol><h2 id="AppCompatButton和AppCompatToggleButton"><a href="#AppCompatButton和AppCompatToggleButton" class="headerlink" title="AppCompatButton和AppCompatToggleButton"></a>AppCompatButton和AppCompatToggleButton</h2><p>​        AppCompatButton 和 AppCompatToggleButton 控件都提供了 3 个常用 API 的兼容实现，分别是自 Android 6.0 引入的 setTextAppearence()；、自 Android 4.0 引入的 setAllCaps()；以及 2.9 节中提及的更改背景色调特性相关的 API。</p><p>​        <strong>setTextAppearence()；用于设置按钮的文本风格，setAllCaps()；用于设定文字是否全部以大写的形式显示。</strong>设置背景色调特性 API 的用法与 2.9 节相同，这里不再赘述。下面以 AppCompatButton 为例进行阐述。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() {</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> binding: ActivityMainBinding</span><br><span class="line"></span><br><span class="line"><span class="comment">//    private val arr = arrayOf("Alice", "Bob", "Cindy", "David", "Edward")</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        binding = ActivityMainBinding.inflate(layoutInflater)</span><br><span class="line">        setContentView(binding.root)</span><br><span class="line">        initData()</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initData</span><span class="params">()</span></span>{</span><br><span class="line">        ViewCompat.setBackgroundTintList(binding.activityMainDemoAcb,AppCompatResources.getColorStateList(<span class="keyword">this</span>,R.color.act_underline))</span><br><span class="line">        ViewCompat.setBackgroundTintMode(binding.activityMainDemoAcb,PorterDuff.Mode.SRC_IN)</span><br><span class="line"></span><br><span class="line">        binding.activityMainDemoAcb.setTextAppearance(<span class="keyword">this</span>, androidx.appcompat.R.style.TextAppearance_AppCompat_Button)</span><br><span class="line">        binding.activityMainDemoAcb.isAllCaps = <span class="literal">false</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/18.png" alt=""></p><p>​        通过 setAllCaps()；修改。当传入的参数为 false 时，按钮文本原样显示；当传入的参数为 true 时，按钮文本所有的小写字符将自动变为大写显示，默认值为 true。</p><h2 id="AppCompatCheckBox和AppCompatRadioButton"><a href="#AppCompatCheckBox和AppCompatRadioButton" class="headerlink" title="AppCompatCheckBox和AppCompatRadioButton"></a>AppCompatCheckBox和AppCompatRadioButton</h2><p>​        AppCompatCheckBox 和 AppCompatRadioButton 仅提供了设置背景色调特性兼容的能力。</p><p>​        需要特别注意的是，设置背景色调特性不可以通过 CompatView 静态方法实现，而要通过 CompoundButtonCompat 静态方法实现。具体代码片段如下：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initData</span><span class="params">()</span></span>{</span><br><span class="line">  CompoundButtonCompat.setButtonTintList(binding.activityMainCb,AppCompatResources.getColorStateList(<span class="keyword">this</span>,R.color.act_underline))</span><br><span class="line">        CompoundButtonCompat.setButtonTintMode(binding.activityMainCb,PorterDuff.Mode.SRC_IN)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/19.png" alt=""></p><h2 id="AppCompatCheckedTextView"><a href="#AppCompatCheckedTextView" class="headerlink" title="AppCompatCheckedTextView"></a>AppCompatCheckedTextView</h2><p>​        AppCompatCheckedTextView 控件则把复选框放在了文字的右侧。此外，我们需要通过 setCheckMarkDrawable（int resId）方法设置复选框的样式。如果不进行设置，AppCompatCheckedTextView 和普通的 TextView 并无二致。</p><p><img src="/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/20.png" alt=""></p><p>xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.appcompat.widget.AppCompatCheckedTextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/activity_main_ctv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Hello World!"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>activity:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() {</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> binding: ActivityMainBinding</span><br><span class="line"></span><br><span class="line"><span class="comment">//    private val arr = arrayOf("Alice", "Bob", "Cindy", "David", "Edward")</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        binding = ActivityMainBinding.inflate(layoutInflater)</span><br><span class="line">        setContentView(binding.root)</span><br><span class="line">        initData()</span><br><span class="line">        binding.activityMainCtv.setOnClickListener{</span><br><span class="line">            binding.activityMainCtv.isChecked = !binding.activityMainCtv.isChecked</span><br><span class="line">            Log.d(localClassName,<span class="string">"选中状态：<span class="subst">${binding.activityMainCtv.isChecked}</span>"</span>)</span><br><span class="line">            <span class="keyword">if</span> (binding.activityMainCtv.isChecked){</span><br><span class="line">                binding.activityMainCtv.setCheckMarkDrawable(android.R.drawable.checkbox_on_background)</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                binding.activityMainCtv.setCheckMarkDrawable(android.R.drawable.checkbox_off_background)</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initData</span><span class="params">()</span></span>{</span><br><span class="line">        binding.activityMainCtv.setCheckMarkDrawable(android.R.drawable.checkbox_off_background)</span><br><span class="line">        <span class="comment">//自 Android 6.0 起,引入了 setTextAppearance（int resId）</span></span><br><span class="line">        binding.activityMainCtv.setTextAppearance(<span class="keyword">this</span>,androidx.appcompat.R.style.TextAppearance_AppCompat_Caption)</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="AppCompatEditText"><a href="#AppCompatEditText" class="headerlink" title="AppCompatEditText"></a>AppCompatEditText</h2><p>​        EditText 是文本输入控件，AppCompatEditText 提供了设置背景色调、自定义文本风格以及<strong>自定义所选文本操作</strong> 3 个高版本 API 特性。</p><ol><li><p>定义操作菜单</p><p>​        当我们选中输入框中的文字后，通常系统会提供一系列默认操作，比如复制、剪切等，如果想添加或取代文本操作，首先要对弹出的菜单进行自定义。</p><p>本例中将添加一个用于回显选中文字的菜单，并将该菜单命名为 edittext_selection_menu.xml，保存于 res 目录的 menu 目录下。完整代码如下：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">menu</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/action_show_text"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"回显选中文本"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>回到布局文件，添加 AppCompatEditText 控件</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.appcompat.widget.AppCompatEditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/activity_main_et"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>回到 MainActivity 的 Java 代码文件，通过 setCustomSelectionActionModeCallback()；方法将菜单项与 AppCompatEditText 绑定，并实现菜单项操作。代码片段如下：</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() {</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> binding: ActivityMainBinding</span><br><span class="line"></span><br><span class="line"><span class="comment">//    private val arr = arrayOf("Alice", "Bob", "Cindy", "David", "Edward")</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequiresApi(Build.VERSION_CODES.M)</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> {</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        binding = ActivityMainBinding.inflate(layoutInflater)</span><br><span class="line">        setContentView(binding.root)</span><br><span class="line">        initData()</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 大于android6setTextAppearance(int resId)</span></span><br><span class="line">    <span class="meta">@RequiresApi(Build.VERSION_CODES.M)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initData</span><span class="params">()</span></span>{</span><br><span class="line">        ViewCompat.setBackgroundTintList(binding.activityMainEt,AppCompatResources.getColorStateList(<span class="keyword">this</span>,R.color.act_underline))</span><br><span class="line">        ViewCompat.setBackgroundTintMode(binding.activityMainEt,PorterDuff.Mode.SRC_IN)</span><br><span class="line">        binding.activityMainEt.setTextAppearance(com.google.android.material.R.style.TextAppearance_AppCompat_Large)</span><br><span class="line">        binding.activityMainEt.customSelectionActionModeCallback = <span class="keyword">object</span> : ActionMode.Callback{</span><br><span class="line">            <span class="comment">//绑定了视图与菜单项</span></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateActionMode</span><span class="params">(mode: <span class="type">ActionMode</span>?, menu: <span class="type">Menu</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">                <span class="keyword">val</span> menuInflater = mode?.menuInflater</span><br><span class="line">                menuInflater?.inflate(R.menu.edittext_selection_menu,menu)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPrepareActionMode</span><span class="params">(mode: <span class="type">ActionMode</span>?, menu: <span class="type">Menu</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            }</span><br><span class="line"><span class="comment">//实现了菜单点击后的具体动作。</span></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onActionItemClicked</span><span class="params">(mode: <span class="type">ActionMode</span>?, item: <span class="type">MenuItem</span>?)</span></span>: <span class="built_in">Boolean</span> {</span><br><span class="line">                <span class="keyword">when</span>(item?.itemId){</span><br><span class="line">                    R.id.action_show_text -&gt; {</span><br><span class="line">                        <span class="keyword">val</span> selectedText = binding.activityMainEt.text.toString().substring(</span><br><span class="line">                            binding.activityMainEt.selectionStart,binding.activityMainEt.selectionEnd)</span><br><span class="line">                        Toast.makeText(<span class="keyword">this</span><span class="symbol">@MainActivity</span>, selectedText, Toast.LENGTH_SHORT).show()</span><br><span class="line">                        <span class="comment">//让菜单消失的方法是 mode.finish()；</span></span><br><span class="line">                        mode?.finish()</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDestroyActionMode</span><span class="params">(mode: <span class="type">ActionMode</span>?)</span></span> {</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/21.png" alt=""></p></li></ol><h2 id="AppCompatImageButton-和-AppCompatImageView"><a href="#AppCompatImageButton-和-AppCompatImageView" class="headerlink" title="AppCompatImageButton 和 AppCompatImageView"></a>AppCompatImageButton 和 AppCompatImageView</h2><p>​        AppCompatImageButton 则继承自 ImageButton，它不仅提供了背景色调设置，还支持图片色调设置。</p><p>​        从 Android 5.0 开始，ImageButton 提供了更改图片色调的 API。我们只需使用一张 SVG 矢量图或 PSD 文件，然后定义它在不同状态下的不同颜色即可。而且，因为使用的是矢量图，素材文件大小会被大概率缩小，并会伴随视图大小不失真地缩放，堪称一举两得。</p><p>​        ImageView 在某些场景下和 ImageButton 面临一样的情况。比如，图片可用与否，甚至我们有时还需要给 ImageView 设置监听器，让它可以响应点击事件。因此，只要学会如何使用 ImageButton，当使用 ImageView 时就会驾轻就熟了。</p><ol><li><p><strong>添加矢量图素材</strong></p><p>​        SVG 或 PSD 素材并不能直接使用，我们需要将其转换为 XML 文件。素材来源可以是自带的图标，也可以是外部的 SVG 或 PSD 文件，我们这里以Android studio自带的图标为例。</p></li><li><p>定义矢量图的色调，具体代码如下：res/color/R.color.icon_btn.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selector</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">"@color/purple_700"</span> <span class="attr">android:state_pressed</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:color</span>=<span class="string">"@color/purple_500"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">selector</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>在布局文件中添加一个 AppCompatImageButton，为了效果更加明显，将该控件的宽高均设置为 200dp。完整代码如下：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.appcompat.widget.AppCompatImageButton</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/activity_main_ib"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"200dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:scaleType</span>=<span class="string">"fitCenter"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>回到 MainActivity 的 Java 代码。如使用 ViewCompat 静态方法类似，这里要使用 ImageViewCompat 类的静态方法设置色调，具体代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ImageViewCompat.setImageTintList(binding.activityMainIb,AppCompatResources.getColorStateList(<span class="keyword">this</span>,R.color.icon_btn))</span><br><span class="line">        ImageViewCompat.setImageTintMode(binding.activityMainIb,PorterDuff.Mode.SRC_IN)</span><br></pre></td></tr></tbody></table></figure><p>​        为什么不能用 ViewCompat 类呢？</p><p>​        这是因为 setImageTintList()；方法并不适用于大部分控件，它基本只用于 ImageView 控件或 ImageView 的子类控件。所以，setImageTintList()；实际上是在 ImageView 中实现的，而 ImageView 实际上是 View 的子类。我们都知道在 Java 中子类可以调用父类中的方法，但父类想要调用子类的方法基本是不可能的。所以，这里无法使用 ViewCompat 类。</p></li><li><p>activity:</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initData</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="comment">//设置图片资源</span></span><br><span class="line">    binding.activityMainIb.setImageResource(R.drawable.image_adb)</span><br><span class="line">   <span class="comment">//设置视图背景色调 ViewCompat.setBackgroundTintList(binding.activityMainIb,AppCompatResources.getColorStateList(this,R.color.bg_btn))</span></span><br><span class="line">    ViewCompat.setBackgroundTintMode(binding.activityMainIb,PorterDuff.Mode.SRC_IN)</span><br><span class="line"></span><br><span class="line">   <span class="comment">//设置图片资源的背景色调 ImageViewCompat.setImageTintList(binding.activityMainIb,AppCompatResources.getColorStateList(this,R.color.icon_btn))</span></span><br><span class="line">    ImageViewCompat.setImageTintMode(binding.activityMainIb,PorterDuff.Mode.SRC_IN)</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>点击前：</p><p><img src="/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/22.png" alt=""></p><p>点击时：</p></li></ol><p><img src="/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/23.png" alt=""></p><h2 id="AppCompatSpinner"><a href="#AppCompatSpinner" class="headerlink" title="AppCompatSpinner"></a>AppCompatSpinner</h2><p>​        AppCompatSpinner 提供了设置背景色调和改变菜单背景的兼容能力。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.appcompat.widget.AppCompatSpinner</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/activity_main_sp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:entries</span>=<span class="string">"@array/person_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initData</span><span class="params">()</span></span>{</span><br><span class="line">        binding.activityMainSp.onItemSelectedListener = <span class="keyword">object</span> :AdapterView.OnItemSelectedListener{</span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onItemSelected</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                parent: <span class="type">AdapterView</span>&lt;*&gt;?,</span></span></span><br><span class="line"><span class="function"><span class="params">                view: <span class="type">View</span>?,</span></span></span><br><span class="line"><span class="function"><span class="params">                position: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                id: <span class="type">Long</span></span></span></span><br><span class="line"><span class="function"><span class="params">            )</span></span> {</span><br><span class="line">                Toast.makeText(</span><br><span class="line">                    <span class="keyword">this</span><span class="symbol">@MainActivity</span>,</span><br><span class="line">                    resources.getStringArray(R.array.person_name)[position], Toast.LENGTH_SHORT</span><br><span class="line">                ).show()</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onNothingSelected</span><span class="params">(parent: <span class="type">AdapterView</span>&lt;*&gt;?)</span></span> {</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        ViewCompat.setBackgroundTintList(binding.activityMainSp,AppCompatResources.getColorStateList(<span class="keyword">this</span>,R.color.sp_bg))</span><br><span class="line">        ViewCompat.setBackgroundTintMode(binding.activityMainSp,PorterDuff.Mode.SRC_IN)</span><br><span class="line">        binding.activityMainSp.setPopupBackgroundResource(R.color.teal_700)</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/24.png" alt=""></p><h2 id="AppCompatTextView"><a href="#AppCompatTextView" class="headerlink" title="AppCompatTextView"></a>AppCompatTextView</h2><p>​        AppCompatTextView 提供了两个兼容性能力，分别是设置背景色调和文本自动缩放。</p><p>​        从 Android 8.0 开始，Android API 引入了自适应文本大小的简易实现。它不仅可以用于 TextView，对于 TextView 的子类，比如 Button 等具有文本显示的控件同样适用。通过 AppCompatTextView 控件，还可以适配到低版本的 Android 中。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">androidx.appcompat.widget.AppCompatTextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/activity_main_tv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"20dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"abcdefghijklmnopqrstuvwxyz"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/25.png" alt=""></p><p>​        调用 setAutoSizeTextTypeWithDefaults()；方法开启自适应缩放。</p><figure class="highlight kotlin"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initData</span><span class="params">()</span></span>{       TextViewCompat.setAutoSizeTextTypeWithDefaults(binding.activityMainTv,TextViewCompat.AUTO_SIZE_TEXT_TYPE_UNIFORM)</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/08/09/Appcompat%20UI%E7%BB%84%E4%BB%B6/26.png" alt=""></p><p>​        对于 setAutoSizeTextTypeWithDefaults()；方法，我们可以传入的参数值通常有两个，分别是 TextView.AUTO_SIZE_TEXT_TYPE_UNIFORM 和 TextView.AUTO_SIZE_TEXT_TYPE_NONE，对应开启自适应文本大小与否。</p><p>​        设定缩放配置实现自定义缩放的方法:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TextViewCompat.setAutoSizeTextTypeUniformWithConfiguration(demoTv, <span class="number">4</span>, <span class="number">15</span>, <span class="number">2</span>,</span><br><span class="line">TypedValue.COMPLEX_UNIT_SP);</span><br></pre></td></tr></tbody></table></figure><p>setAutoSizeTextTypeUniformWithConfiguration()；是实现这种缩放方式的关键，它由 5 个参数构成：</p><ul><li><p>demoTV：AppCompatTextView 对象。</p></li><li><p>4：表示文本缩放的最小值。</p></li><li><p>15：表示文本缩放的最大值。</p></li><li><p>2：表示文本缩放的尝试步长。</p></li><li><p>TypedValue.COMPLEX_UNIT_SP：指定前 3 个参数使用 SP 作为单位。</p><p>​        可以这样理解，当文本无法显示完全时，系统将以步长为单位递减文本大小设定值，直到文本完全显示，或者尝试值小于给定的文本缩放的最小值。</p></li></ul><p>第二种方式是通过定义预设值实现:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TextViewCompat.setAutoSizeTextTypeUniformWithPresetSizes(demoTv, <span class="keyword">new</span> <span class="keyword">int</span>[]{<span class="number">9</span>,</span><br><span class="line"><span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>}, TypedValue.COMPLEX_UNIT_SP);</span><br></pre></td></tr></tbody></table></figure><p>​        通过 setAutoSizeTextTypeUniformWithPresetSizes()；方法定义预设值，需要三个参数，第一个依然是 AppCompatTextView 对象，第二个是预设值的具体数值；第三个则是预设值的单位。</p><p>​        以上面的代码为例，在进行文字缩放时，文字大小只能从 9SP、11SP、13SP 和 15SP 这 4 个值中取。</p><h2 id="Tooltips"><a href="#Tooltips" class="headerlink" title="Tooltips"></a>Tooltips</h2><p>​        Tooltips 是从 Android 8.0 引入的，它的作用是当用户长按或鼠标指针悬停在某个控件时，显示提示文本。</p><p>TooltipCompat 的使用方法很简单，也很唯一，仅需执行它的静态方法即可，示例代码如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TooltipCompat.setTooltipText(demoTv,</span><br><span class="line">getResources().getText(R.string.tool_tip_str));</span><br></pre></td></tr></tbody></table></figure><p>setTooltipText()；方法的两个参数：demoTv 是 TextView 对象，另一个参数则是要显示的文本内容。</p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;App-Bar&quot;&gt;&lt;a href=&quot;#App-Bar&quot; class=&quot;headerlink&quot; title=&quot;App Bar&quot;&gt;&lt;/a&gt;App Bar&lt;/h2&gt;&lt;p&gt;​    即APP应用栏（ToolBar）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.添加ToolBar控件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    修改 activity_main.xml 的内容，添加如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;androidx.appcompat.widget.Toolbar&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/tb&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;?attr/actionBarSize&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:background&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;?attr/colorPrimary&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:elevation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;4dp&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;android:theme&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@style/Widget.MaterialComponents.Toolbar&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;app:layout_constraintLeft_toLeftOf&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;app:layout_constraintRight_toRightOf&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;app:layout_constraintTop_toTopOf&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;parent&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​        去掉默认的主题，以便去掉默认的ActionBar&lt;/p&gt;
&lt;p&gt;​        分别打开位于 values 和 values-night 的 &lt;strong&gt;themes.xml&lt;/strong&gt;，修改名为 Theme.AppBarDemo 的 parent 属性值为 Theme.MaterialComponents.DayNight.NoActionBar。&lt;/p&gt;
&lt;p&gt;​    &lt;strong&gt;2.在ToolBar上添加菜单：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在项目的 res 目录下新建 menu 目录，并创建菜单 XML 文档。本例将其命名为 activity_main_menu.xml，内容如下：&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
    
      <category term="Android" scheme="https://hluck.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>UDP与TCP入门</title>
    <link href="https://hluck.github.io/2022/08/02/UDP%E4%B8%8ETCP%E5%85%A5%E9%97%A8/"/>
    <id>https://hluck.github.io/2022/08/02/UDP%E4%B8%8ETCP%E5%85%A5%E9%97%A8/</id>
    <published>2022-08-02T06:03:25.239Z</published>
    <updated>2022-08-14T08:30:24.533Z</updated>
    
    <content type="html"><![CDATA[<html><head></head><body><h2 id="报文、协议、Mac地址"><a href="#报文、协议、Mac地址" class="headerlink" title="报文、协议、Mac地址"></a>报文、协议、Mac地址</h2><p><strong>1.报文段</strong></p><ul><li>报文段是指TCP/IP协议网络传输中，起着路由导航作用</li><li>用以查询各个网络路由网段、IP地址、交换协议等IP数据包</li><li>报文段充当整个TCP/IP协议数据包的导航路由功能</li><li>报文段在传输过程中会不断的封装成组、包、帧来传输</li><li>封装方式就是添加一些控制信息组成的首部，即报文头</li></ul><p><strong>2.传输协议</strong></p><ul><li>一种规定，约束</li><li>简单来说：A &gt; B的传输数据，B能识别，反之B &gt; A的传输数据A也能识别。这就是协议</li></ul><p><strong>3.Mac地址</strong></p><ul><li>Media Access Control或者Medium Access Control</li><li>译为媒体访问控制，或称物理地址、硬件地址</li><li><strong>用来定义网络设备的位置</strong></li><li>形如：44-45-53-54-00-00 与身份证类似 <a id="more"></a><h2 id="IP、端口以及远程服务器"><a href="#IP、端口以及远程服务器" class="headerlink" title="IP、端口以及远程服务器"></a>IP、端口以及远程服务器</h2></li></ul><ol><li><p><strong>IP地址</strong></p><ul><li><p>互联网协议地址(Internet Protocol Address)</p></li><li><p>是 分配给网络上使用网际协议（Internet Protocol  ,IP)的设备数字 标签</p></li><li><p>常见IP地址分为<strong>IPV4</strong> 与 <strong>IPV6</strong></p></li><li><p>IP地址由32位二进制数组成，常以xxx.xxx.xxx.xxx形式表现，每组xxx代表小于或等于255的10进制数</p><p><strong>IPV4:</strong></p><ul><li>如：208.80.152.2</li><li>分为A、B、C、D、E五大类，其中E类属于特殊保留地址</li><li>总数量：42亿个，最终于2011年2月2日用尽</li><li>如果主机号全是1，那么这个地址为直接广播地址</li><li>IP地址”255.255.255.255”为受限广播地址</li></ul><p><strong>IPV6:</strong></p><ul><li>总共有128位长，IPV6地址的表达形式，一般采用32个十六位进制数。也可以想象为1632个</li><li>由两个逻辑部分组成:一个64位的网络前缀和一个64位的主机地址，主机地址通常根据物理地址自动生成，叫做EUI-64(或者64位扩展唯一标识)</li><li>2001：0db8:85a3:0000:1319:8a2e:0370:7344</li><li>IPV4转换为IPV6一定可行，IPV6转换为IPV4不一定可行</li></ul></li></ul></li><li><p><strong>端口</strong></p><ul><li>如果把IP地址比作一间房子，端口就是出入这间房子的门或窗户</li><li>不同门窗户后有不同的人（代表着不同程序的进程），房子中的用户与外界交流的出口</li><li>外界鸽子（信息）飞到不同窗户也就是给不同的人（程序进程）传递信息</li><li>从0到1023号端口以及1024到49151号端口都是特殊端口</li><li>计算机之间依照互联网传输层TCP/IP协议的协议通信，不同协议对应不同端口</li><li>49152到65535号端口属于”动态端口”范围，没有端口可以被正式的注册占用</li></ul></li></ol><p><img src="/2022/08/02/UDP%E4%B8%8ETCP%E5%85%A5%E9%97%A8/1.png" alt=""></p><p><strong>数据传输层次：</strong></p><p><img src="/2022/08/02/UDP%E4%B8%8ETCP%E5%85%A5%E9%97%A8/2.png" alt=""></p><p>3.<strong>远程服务器：</strong></p><ul><li>局域网：一般而言，家里的环境以及公司相互电脑之间环境都属于局域网</li><li>我与你们之间的电脑属于互联网，而非局域网</li><li>默认的：我的电脑无法直接链接到你们的电脑：不在同一局域网，可通过远程服务器通信</li></ul><p><img src="/2022/08/02/UDP%E4%B8%8ETCP%E5%85%A5%E9%97%A8/3.png" alt=""></p><p><img src="/2022/08/02/UDP%E4%B8%8ETCP%E5%85%A5%E9%97%A8/4.png" alt=""></p><h2 id="Socket-UDP"><a href="#Socket-UDP" class="headerlink" title="Socket UDP"></a>Socket UDP</h2><h3 id="UDP是什么"><a href="#UDP是什么" class="headerlink" title="UDP是什么"></a>UDP是什么</h3><ul><li>User Datagram Protocol</li><li><strong>用户数据报协议，又称用户数据报文协议</strong></li><li>是一个简单的面向<strong>数据报</strong>的<strong>传输层</strong>协议，正式规范为RFC 768</li><li>用户数据协议，非连接协议</li></ul><h5 id="为什么不可靠"><a href="#为什么不可靠" class="headerlink" title="为什么不可靠"></a>为什么不可靠</h5><ol><li>一旦把应用程序发给网络层的数据发送出去，就不保留数据备份</li><li>UDP在IP数据报的头部仅仅加入了复用和数据校验（字段）</li><li>发送端产生数据，接收端从网络中抓取数据</li><li>结构简单，无校验，速度快，容易丢包，可广播</li></ol><h5 id="UDP能做什么"><a href="#UDP能做什么" class="headerlink" title="UDP能做什么"></a>UDP能做什么</h5><ul><li>DNS,TFTP,SNMP</li><li>视频，音频，普通数据（无关紧要数据）</li></ul><p><img src="/2022/08/02/UDP%E4%B8%8ETCP%E5%85%A5%E9%97%A8/5.png" alt=""></p><h5 id="UDP包最大长度"><a href="#UDP包最大长度" class="headerlink" title="UDP包最大长度"></a>UDP包最大长度</h5><ul><li>16位 -&gt; 2字节 存储长度信息</li><li>2^16 -1 = 64k -1 = 65536 -1 = 65535</li><li>自身协议占用：32 + 32位 = 64位 = 8字节，而在IP层进行封装后的IP包头占去20字节。</li><li><strong>65535 - 8 - 20 = 65507 byte</strong></li></ul><h4 id="UDP核心API"><a href="#UDP核心API" class="headerlink" title="UDP核心API"></a>UDP核心API</h4><h5 id="API-DatagramSocket"><a href="#API-DatagramSocket" class="headerlink" title="API-DatagramSocket"></a>API-DatagramSocket</h5><ul><li>用于接收与发送UDP的类</li><li>负责发送某一个UDP包,或者接收UDP包</li><li>不同于TCP，UDP并没有合并到Socket API中</li><li>DatagramSocket()创建简单实例，不指定端口与IP</li><li>DatagramSocket(int port)创建监听某端口的实例</li><li>DatagramSocket(int port,InetAddress localAddr)创建固定端口指定IP的实例</li><li>receive(DatagramPacket d) : 接收</li><li>send（DatagramPacket d) :发送</li><li>setSoTimeout(int timeout):设置超时，毫秒</li><li>close()关闭，释放资源</li></ul><h5 id="API-DatagramPacket"><a href="#API-DatagramPacket" class="headerlink" title="API-DatagramPacket"></a>API-DatagramPacket</h5><ul><li>用于处理报文</li><li>将byte数组、目标地址、目标端口等数据包封装成报文或者将报文拆卸成byte数组</li><li>是UDP的发送实体，也是UDP的接收实体</li><li>DatagramPacket(byte[] buf,int offset,int length,InetAddress address,int port):</li><li>前面3个参数指定buff的使用区间</li><li>后面2个参数指定目标机器地址，与端口（<strong>发送端地址，端口</strong>）</li><li>DatagramPacket(byte[] buf,int length,SocketAddress address)</li><li>前面2个参数指定buff的使用区间</li><li>SocketAddress 相当于InetAddress + port</li><li>setData(byte[] buf,int offset,int length)</li><li>setData(byte[] buf)</li><li>setLength(int length)</li><li>getData()、getOffset()、getLength()</li><li>setAddress(InetAddress iaddr)、setPort(int port)</li><li>getAddress()、getPort()</li><li>setSocketAddress(SocketAddress address)</li><li>getSocketAddress()</li></ul><h4 id="UDP单播、广播、多播"><a href="#UDP单播、广播、多播" class="headerlink" title="UDP单播、广播、多播"></a>UDP单播、广播、多播</h4><p>单播：1对1</p><p>多播（组播）：1对多，一次给一个组发</p><p>广播：给所有设备发送</p><h5 id="IP地址类别"><a href="#IP地址类别" class="headerlink" title="IP地址类别"></a>IP地址类别</h5><p><img src="/2022/08/02/UDP%E4%B8%8ETCP%E5%85%A5%E9%97%A8/6.png" alt=""></p><h5 id="广播地址"><a href="#广播地址" class="headerlink" title="广播地址"></a>广播地址</h5><ul><li>255.255.255.255 为受限广播地址</li><li>C网广播地址一般为：xxx.xxx.xxx.255(192.168.1.255)</li><li>D类IP地址为多播预留</li></ul><h5 id="IP地址构成"><a href="#IP地址构成" class="headerlink" title="IP地址构成"></a>IP地址构成</h5><p><img src="/2022/08/02/UDP%E4%B8%8ETCP%E5%85%A5%E9%97%A8/7.png" alt=""></p><h5 id="广播地址运算"><a href="#广播地址运算" class="headerlink" title="广播地址运算"></a>广播地址运算</h5><p>比如：</p><p><img src="/2022/08/02/UDP%E4%B8%8ETCP%E5%85%A5%E9%97%A8/8.png" alt=""></p><p>根据子网掩码：</p><ul><li>255.255.255.192 -&gt; 11111111.11111111.11111111.11000000</li><li>可划分网段：最后八位2个1，即：2^2 = 4 个</li><li>0<del>63、64</del>127、128<del>191、192</del>255</li><li>由于例子IP在第一个网段，所以广播地址：192.168.124.63</li></ul><h5 id="广播通信问题"><a href="#广播通信问题" class="headerlink" title="广播通信问题"></a>广播通信问题</h5><p><img src="/2022/08/02/UDP%E4%B8%8ETCP%E5%85%A5%E9%97%A8/9.png" alt=""></p><p>如图，主机一发送广播后主机二不能收到，因为不在同一个网段，广播地址不一样。</p><h4 id="局域网搜索案例"><a href="#局域网搜索案例" class="headerlink" title="局域网搜索案例"></a>局域网搜索案例</h4><ol><li><p>UDP接收消息并回送功能实现</p><p>UDP接收者：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ljh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> UDPProvider.java</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createTime</span> 2022年08月03日</span></span><br><span class="line"><span class="comment"> * UDP服务提供者，用于提供服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPProvider</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        System.out.println(<span class="string">"UDPProvider started..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//作为接收者，接收指定为20000端口的数据</span></span><br><span class="line">        DatagramSocket datagramSocket = <span class="keyword">new</span> DatagramSocket(<span class="number">20000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建接收实体</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">512</span>];</span><br><span class="line">        DatagramPacket receivePacket = <span class="keyword">new</span> DatagramPacket(buf, buf.length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收</span></span><br><span class="line">        datagramSocket.receive(receivePacket);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印接收到的信息与发送者的信息</span></span><br><span class="line">        <span class="comment">//发送者的IP地址</span></span><br><span class="line">        String ip = receivePacket.getAddress().getHostAddress();</span><br><span class="line">        <span class="keyword">int</span> port = receivePacket.getPort();</span><br><span class="line">        <span class="keyword">int</span> dataLength = receivePacket.getLength();</span><br><span class="line">        String receiveDate = <span class="keyword">new</span> String(receivePacket.getData(), <span class="number">0</span>, dataLength);</span><br><span class="line">        System.out.println(<span class="string">"UDPProvider receive from ip:"</span>+ip+<span class="string">"\tport:"</span>+port+<span class="string">"\tdata:"</span>+receiveDate);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建一份回送数据</span></span><br><span class="line">        String responseData = <span class="string">"Receive data with len :"</span> + dataLength;</span><br><span class="line">        <span class="keyword">byte</span>[] receiveDateBytes = responseData.getBytes();</span><br><span class="line">        <span class="comment">//直接根据发送者构建一份回送信息</span></span><br><span class="line">        DatagramPacket responsePacket = <span class="keyword">new</span> DatagramPacket(receiveDateBytes,</span><br><span class="line">                receiveDateBytes.length,</span><br><span class="line">                receivePacket.getAddress(),</span><br><span class="line">                receivePacket.getPort());</span><br><span class="line"></span><br><span class="line">        datagramSocket.send(responsePacket);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"UDPProvider finished..."</span>);</span><br><span class="line">        datagramSocket.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>UDP搜索者：搜索提供方</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ljh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> UDPSearcher.java</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createTime</span> 2022年08月03日</span></span><br><span class="line"><span class="comment"> * UDP搜索者，用于搜索服务支持方</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPSearcher</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        System.out.println(<span class="string">"UDPSearcher started..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//作为搜索方，让系统自动分配端口</span></span><br><span class="line">        DatagramSocket datagramSocket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建一份请求数据</span></span><br><span class="line">        String requestData = <span class="string">"Only the dead do not make mistakes."</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] requestDateBytes = requestData.getBytes();</span><br><span class="line">        <span class="comment">//直接根据发送者构建一份回送信息</span></span><br><span class="line">        DatagramPacket requestPacket = <span class="keyword">new</span> DatagramPacket(requestDateBytes,</span><br><span class="line">                requestDateBytes.length);</span><br><span class="line">        <span class="comment">//发送端的Ip</span></span><br><span class="line">        requestPacket.setAddress(InetAddress.getLocalHost());</span><br><span class="line">        <span class="comment">//目标端口</span></span><br><span class="line">        requestPacket.setPort(<span class="number">20000</span>);</span><br><span class="line">        <span class="comment">//发送</span></span><br><span class="line">        datagramSocket.send(requestPacket);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建接收实体</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">512</span>];</span><br><span class="line">        DatagramPacket receivePacket = <span class="keyword">new</span> DatagramPacket(buf, buf.length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收</span></span><br><span class="line">        datagramSocket.receive(receivePacket);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印接收到的信息与发送者的信息</span></span><br><span class="line">        <span class="comment">//发送者的IP地址</span></span><br><span class="line">        String ip = receivePacket.getAddress().getHostAddress();</span><br><span class="line">        <span class="keyword">int</span> port = receivePacket.getPort();</span><br><span class="line">        <span class="keyword">int</span> dataLength = receivePacket.getLength();</span><br><span class="line">        String receiveDate = <span class="keyword">new</span> String(receivePacket.getData(), <span class="number">0</span>, dataLength);</span><br><span class="line">        System.out.println(<span class="string">"UDPSearcher receive from ip:"</span>+ip+<span class="string">"\tport:"</span>+port+<span class="string">"\tdata:"</span>+receiveDate);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"UDPSearcher finished..."</span>);</span><br><span class="line">        datagramSocket.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/08/02/UDP%E4%B8%8ETCP%E5%85%A5%E9%97%A8/10.png" alt=""></p><p><img src="/2022/08/02/UDP%E4%B8%8ETCP%E5%85%A5%E9%97%A8/11.png" alt=""></p></li><li><p>UDP局域网广播发送实现</p></li><li><p>UDP局域网回送消息实现</p></li></ol><p>己方，监听20000端口，并回送指定30000端口数据</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ljh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> UDPProvider.java</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createTime</span> </span></span><br><span class="line"><span class="comment"> * UDP提供者，用于提供服务,监听端口信息，然后回送</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPProvider</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//生成一份唯一标识</span></span><br><span class="line">        String sn = UUID.randomUUID().toString();</span><br><span class="line">        Provider provider = <span class="keyword">new</span> Provider(sn);</span><br><span class="line">        provider.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取任意键信息后可以退出</span></span><br><span class="line">        System.in.read();</span><br><span class="line">        provider.exit();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Provider</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>{</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String sn;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> done = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">private</span> DatagramSocket datagramSocket = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Provider</span><span class="params">(String sn)</span></span>{</span><br><span class="line">            <span class="keyword">super</span>();</span><br><span class="line">            <span class="keyword">this</span>.sn = sn;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">super</span>.run();</span><br><span class="line">            System.out.println(<span class="string">"UDPProvider started..."</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="comment">//作为接收者，接收指定为20000端口的数据</span></span><br><span class="line">                datagramSocket = <span class="keyword">new</span> DatagramSocket(<span class="number">20000</span>);</span><br><span class="line">                <span class="keyword">while</span> (!done){</span><br><span class="line">                    <span class="comment">//构建接收实体</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">512</span>];</span><br><span class="line">                    DatagramPacket receivePacket = <span class="keyword">new</span> DatagramPacket(buf, buf.length);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//接收对方暗号</span></span><br><span class="line">                    datagramSocket.receive(receivePacket);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//打印接收到的信息与发送者的信息</span></span><br><span class="line">                    <span class="comment">//发送者的IP地址</span></span><br><span class="line">                    String ip = receivePacket.getAddress().getHostAddress();</span><br><span class="line">                    <span class="keyword">int</span> port = receivePacket.getPort();</span><br><span class="line">                    <span class="keyword">int</span> dataLength = receivePacket.getLength();</span><br><span class="line">                    String receiveData = <span class="keyword">new</span> String(receivePacket.getData(), <span class="number">0</span>, dataLength);</span><br><span class="line">                    System.out.println(<span class="string">"UDPProvider receive from ip:"</span>+ip+<span class="string">"\tport:"</span>+port+<span class="string">"\tdata:"</span>+receiveData);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//对方端口</span></span><br><span class="line">                    <span class="keyword">int</span> responsePort = MessageCreator.parsePort(receiveData);</span><br><span class="line">                    <span class="keyword">if</span> (responsePort != -<span class="number">1</span>){</span><br><span class="line">                        <span class="comment">//构建一份回送数据</span></span><br><span class="line">                        String responseData = MessageCreator.buildWithSn(sn);</span><br><span class="line">                        <span class="keyword">byte</span>[] receiveDateBytes = responseData.getBytes();</span><br><span class="line">                        <span class="comment">//构建一份回送信息</span></span><br><span class="line">                        DatagramPacket responsePacket = <span class="keyword">new</span> DatagramPacket(receiveDateBytes,</span><br><span class="line">                                receiveDateBytes.length,</span><br><span class="line">                                receivePacket.getAddress(),</span><br><span class="line">                                responsePort);</span><br><span class="line"></span><br><span class="line">                        datagramSocket.send(responsePacket);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }<span class="keyword">catch</span> (IOException e){</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }<span class="keyword">finally</span> {</span><br><span class="line">                close();</span><br><span class="line">            }</span><br><span class="line">            System.out.println(<span class="string">"UDPProvider finished..."</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>{</span><br><span class="line">            <span class="keyword">if</span> (datagramSocket != <span class="keyword">null</span>){</span><br><span class="line">                datagramSocket.close();</span><br><span class="line">                datagramSocket = <span class="keyword">null</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">exit</span><span class="params">()</span></span>{</span><br><span class="line">            done = <span class="keyword">true</span>;</span><br><span class="line">            close();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>搜索端，发送20000端口数据暗号，监听30000端口回复</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ljh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> UDPSearcher.java</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createTime</span> 2022年08月03日</span></span><br><span class="line"><span class="comment"> * UDP搜索者，用于搜索服务支持方</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPSearcher</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LISTEN_PORT = <span class="number">30000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>{</span><br><span class="line">        <span class="comment">//做好监听3000端口的准备，并显示对方回复数据</span></span><br><span class="line">        Listener listen = listen();</span><br><span class="line">        <span class="comment">//给所有监听20000端口的端发送广播，告诉他们给30000端口回复数据</span></span><br><span class="line">        sendBroadcast();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取任意键盘信息退出</span></span><br><span class="line">        System.in.read();</span><br><span class="line">        listen.getDevicesAndClose();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Listener <span class="title">listen</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        System.out.println(<span class="string">"UDPSearcher start listen..."</span>);</span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">        Listener listener = <span class="keyword">new</span> Listener(LISTEN_PORT, countDownLatch);</span><br><span class="line">        listener.start();</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        <span class="keyword">return</span> listener;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送广播</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendBroadcast</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        System.out.println(<span class="string">"UDPSearcher started..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//作为搜索方，让系统自动分配端口</span></span><br><span class="line">        DatagramSocket datagramSocket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建一份请求数据</span></span><br><span class="line">        String requestData = MessageCreator.buildWithPort(LISTEN_PORT);</span><br><span class="line">        <span class="keyword">byte</span>[] requestDateBytes = requestData.getBytes();</span><br><span class="line">        <span class="comment">//直接根据发送者构建一份回送信息</span></span><br><span class="line">        DatagramPacket requestPacket = <span class="keyword">new</span> DatagramPacket(requestDateBytes,</span><br><span class="line">                requestDateBytes.length);</span><br><span class="line">        <span class="comment">//广播地址</span></span><br><span class="line">        requestPacket.setAddress(InetAddress.getByName(<span class="string">"255.255.255.255"</span>));</span><br><span class="line">        <span class="comment">//发送的目标端口</span></span><br><span class="line">        requestPacket.setPort(<span class="number">20000</span>);</span><br><span class="line">        <span class="comment">//发送</span></span><br><span class="line">        datagramSocket.send(requestPacket);</span><br><span class="line">        datagramSocket.close();</span><br><span class="line">        <span class="comment">//完成</span></span><br><span class="line">        System.out.println(<span class="string">"UDPSearcher finished..."</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Device</span></span>{</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> port;</span><br><span class="line">        <span class="keyword">final</span> String ip;</span><br><span class="line">        <span class="keyword">final</span> String sn;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Device</span><span class="params">(<span class="keyword">int</span> port, String ip, String sn)</span> </span>{</span><br><span class="line">            <span class="keyword">this</span>.port = port;</span><br><span class="line">            <span class="keyword">this</span>.ip = ip;</span><br><span class="line">            <span class="keyword">this</span>.sn = sn;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Device{"</span> +</span><br><span class="line">                    <span class="string">"port="</span> + port +</span><br><span class="line">                    <span class="string">", ip='"</span> + ip + <span class="string">'\''</span> +</span><br><span class="line">                    <span class="string">", sn='"</span> + sn + <span class="string">'\''</span> +</span><br><span class="line">                    <span class="string">'}'</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Listener</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> listenPort;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> CountDownLatch countDownLatch;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Device&gt; devices = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> done = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">private</span> DatagramSocket ds;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Listener</span><span class="params">(<span class="keyword">int</span> listenPort,CountDownLatch countDownLatch)</span></span>{</span><br><span class="line">            <span class="keyword">super</span>();</span><br><span class="line">            <span class="keyword">this</span>.listenPort = listenPort;</span><br><span class="line">            <span class="keyword">this</span>.countDownLatch = countDownLatch;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">super</span>.run();</span><br><span class="line">            <span class="comment">//通知已经启动</span></span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                ds = <span class="keyword">new</span> DatagramSocket(listenPort);</span><br><span class="line">                <span class="keyword">while</span> (!done){</span><br><span class="line">                    <span class="comment">//构建接收体</span></span><br><span class="line">                    <span class="comment">//构建接收实体</span></span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">512</span>];</span><br><span class="line">                    DatagramPacket receivePacket = <span class="keyword">new</span> DatagramPacket(buf, buf.length);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//接收</span></span><br><span class="line">                    ds.receive(receivePacket);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//打印接收到的信息与发送者的信息</span></span><br><span class="line">                    <span class="comment">//发送者的IP地址</span></span><br><span class="line">                    String ip = receivePacket.getAddress().getHostAddress();</span><br><span class="line">                    <span class="keyword">int</span> port = receivePacket.getPort();</span><br><span class="line">                    <span class="keyword">int</span> dataLength = receivePacket.getLength();</span><br><span class="line">                    String receiveData = <span class="keyword">new</span> String(receivePacket.getData(), <span class="number">0</span>, dataLength);</span><br><span class="line">                    System.out.println(<span class="string">"UDPSearcher receive from ip:"</span>+ip+<span class="string">"\tport:"</span>+port+<span class="string">"\tdata:"</span>+receiveData);</span><br><span class="line"></span><br><span class="line">                    String sn = MessageCreator.parseSn(receiveData);</span><br><span class="line">                    <span class="keyword">if</span> (sn!=<span class="keyword">null</span>){</span><br><span class="line">                        Device device = <span class="keyword">new</span> Device(port, ip, sn);</span><br><span class="line">                        devices.add(device);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">            }<span class="keyword">catch</span> (Exception e){</span><br><span class="line"></span><br><span class="line">            }<span class="keyword">finally</span> {</span><br><span class="line">                close();</span><br><span class="line">            }</span><br><span class="line">            System.out.println(<span class="string">"UDPSearcher listener finished."</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>{</span><br><span class="line">            <span class="keyword">if</span> (ds != <span class="keyword">null</span>){</span><br><span class="line">                ds.close();</span><br><span class="line">                ds = <span class="keyword">null</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">exit</span><span class="params">()</span></span>{</span><br><span class="line">            done = <span class="keyword">true</span>;</span><br><span class="line">            close();</span><br><span class="line">        }</span><br><span class="line">        <span class="function">List&lt;Device&gt; <span class="title">getDevicesAndClose</span><span class="params">()</span> </span>{</span><br><span class="line">            done = <span class="keyword">true</span>;</span><br><span class="line">            close();</span><br><span class="line">            <span class="keyword">return</span> devices;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>约定一个通信方式：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ljh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> MessageCreater.java</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createTime</span> 2022年08月04日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageCreator</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SN_HEADER = <span class="string">"收到暗号，我是（SN）："</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PORT_HEADER = <span class="string">"这是暗号，请回电端口（port）："</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建发送暗号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> port</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">buildWithPort</span><span class="params">(<span class="keyword">int</span> port)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> PORT_HEADER + port;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析收到暗号信息，获取对方端口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parsePort</span><span class="params">(String data)</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (data.startsWith(PORT_HEADER)){</span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(data.substring(PORT_HEADER.length()));</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构建回复SN暗号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sn</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">buildWithSn</span><span class="params">(String sn)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> SN_HEADER + sn;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析对方回复SN暗号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">parseSn</span><span class="params">(String data)</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (data.startsWith(SN_HEADER)){</span><br><span class="line">            <span class="keyword">return</span> data.substring(SN_HEADER.length());</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/08/02/UDP%E4%B8%8ETCP%E5%85%A5%E9%97%A8/12.png" alt=""></p><p><img src="/2022/08/02/UDP%E4%B8%8ETCP%E5%85%A5%E9%97%A8/13.png" alt=""></p><h2 id="Socket-TCP"><a href="#Socket-TCP" class="headerlink" title="Socket TCP"></a>Socket TCP</h2><h3 id="TCP是什么"><a href="#TCP是什么" class="headerlink" title="TCP是什么"></a>TCP是什么</h3><ul><li>Transmission Control Protocol(TCP)</li><li>TCP是<strong>传输控制协议</strong>，是一种<strong>面向连接、可靠、基于字节流</strong>的传输层通信协议，由IETF的RFC 793定义</li></ul><h4 id="TCP机制"><a href="#TCP机制" class="headerlink" title="TCP机制"></a>TCP机制</h4><ul><li>三次握手、四次挥手</li><li>具有校验机制、可靠、数据传输稳定</li></ul><p><img src="/2022/08/02/UDP%E4%B8%8ETCP%E5%85%A5%E9%97%A8/14.png" alt=""></p><h4 id="TCP能做什么"><a href="#TCP能做什么" class="headerlink" title="TCP能做什么"></a>TCP能做什么</h4><ul><li>聊天消息传输、推送</li><li>单人语音、视频聊天等</li><li>几乎所有UDP能做到的事都能做，但需要考虑复杂性、性能问题</li><li>无法进行广播、多播等操作</li></ul><h3 id="TCP核心API"><a href="#TCP核心API" class="headerlink" title="TCP核心API"></a>TCP核心API</h3><ul><li>socket():创建一个Socket</li><li>bind():绑定一个Socket到一个本地地址和端口上</li><li>connect():连接到远程套接字</li><li>accept():接受一个新的连接</li><li>write()：把数据写入到Socket输出流</li><li>read():从socket输入流读取数据</li></ul><p><img src="/2022/08/02/UDP%E4%B8%8ETCP%E5%85%A5%E9%97%A8/15.png" alt=""></p><p><img src="/2022/08/02/UDP%E4%B8%8ETCP%E5%85%A5%E9%97%A8/16.png" alt=""></p><h3 id="TCP连接可靠性-三次握手"><a href="#TCP连接可靠性-三次握手" class="headerlink" title="TCP连接可靠性-三次握手"></a>TCP连接可靠性-三次握手</h3><p><img src="/2022/08/02/UDP%E4%B8%8ETCP%E5%85%A5%E9%97%A8/17.png" alt=""></p><p>​        比如打电话：客户端打给服务端说：可以听到我说话吗，然后服务端回复：能听到你说话，你能听到我说话吗，客户端再回复：可以听到。这时，三次握手结束，它们就建立了连接。</p><h3 id="TCP四次挥手"><a href="#TCP四次挥手" class="headerlink" title="TCP四次挥手"></a>TCP四次挥手</h3><p><img src="/2022/08/02/UDP%E4%B8%8ETCP%E5%85%A5%E9%97%A8/18.png" alt=""></p><p>​    首先：发送端向接收端说：我想和你断开连接了，接收端回复说OK你可以断开对我的连接了；这时发送端的输出操作可以断开了，读取操作还保留着，服务端会把还没送答的消息一一送达给接收端，送达完成后，接收端会跟发送端说：他想要关闭连接了。发送端回复说：Ok，你可以断开连接了。</p><h3 id="传输可靠性"><a href="#传输可靠性" class="headerlink" title="传输可靠性"></a>传输可靠性</h3><ul><li>分片发送，排序，顺序发送，顺序组装</li><li>丢弃、超时</li><li>重发机制-定时器</li></ul><h3 id="案例实操"><a href="#案例实操" class="headerlink" title="案例实操"></a>案例实操</h3><h4 id="TCP传输初始化配置-传输数据"><a href="#TCP传输初始化配置-传输数据" class="headerlink" title="TCP传输初始化配置/传输数据"></a>TCP传输初始化配置/传输数据</h4><p>Tools.java:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tools</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">byteArrayToInt</span><span class="params">(<span class="keyword">byte</span>[] b)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> b[<span class="number">3</span>] &amp; <span class="number">0xFF</span> |</span><br><span class="line">                (b[<span class="number">2</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span> |</span><br><span class="line">                (b[<span class="number">1</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">16</span> |</span><br><span class="line">                (b[<span class="number">0</span>] &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">24</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] intToByteArray(<span class="keyword">int</span> a) {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">byte</span>[]{</span><br><span class="line">                (<span class="keyword">byte</span>) ((a &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>),</span><br><span class="line">                (<span class="keyword">byte</span>) ((a &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>),</span><br><span class="line">                (<span class="keyword">byte</span>) ((a &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>),</span><br><span class="line">                (<span class="keyword">byte</span>) (a &amp; <span class="number">0xFF</span>)</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Client:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>{</span><br><span class="line">    <span class="comment">//服务器远程端口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">20000</span>;</span><br><span class="line">    <span class="comment">//当前进程端口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LOCAL_PORT = <span class="number">20001</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//创建clientSocket</span></span><br><span class="line">        Socket socket = createSocket();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        initSocket(socket);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 链接到本地20000端口，超时时间3秒，超过则抛出超时异常</span></span><br><span class="line">        socket.connect(<span class="keyword">new</span> InetSocketAddress(Inet4Address.getLocalHost(), PORT), <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"已发起服务器连接，并进入后续流程～"</span>);</span><br><span class="line">        System.out.println(<span class="string">"客户端信息："</span> + socket.getLocalAddress() + <span class="string">" P:"</span> + socket.getLocalPort());</span><br><span class="line">        System.out.println(<span class="string">"服务器信息："</span> + socket.getInetAddress() + <span class="string">" P:"</span> + socket.getPort());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">// 发送接收数据</span></span><br><span class="line">            todo(socket);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            System.out.println(<span class="string">"异常关闭"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        socket.close();</span><br><span class="line">        System.out.println(<span class="string">"客户端已退出～"</span>);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Socket <span class="title">createSocket</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        // 无代理模式，等效于空构造函数</span></span><br><span class="line"><span class="comment">        Socket socket = new Socket(Proxy.NO_PROXY);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // 新建一份具有HTTP代理的套接字，传输数据将通过www.baidu.com:8080端口转发</span></span><br><span class="line"><span class="comment">        Proxy proxy = new Proxy(Proxy.Type.HTTP,</span></span><br><span class="line"><span class="comment">                new InetSocketAddress(Inet4Address.getByName("www.baidu.com"), 8800));</span></span><br><span class="line"><span class="comment">        socket = new Socket(proxy);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // 新建一个套接字，并且直接链接到本地20000的服务器上</span></span><br><span class="line"><span class="comment">        socket = new Socket("localhost", PORT);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // 新建一个套接字，并且直接链接到本地20000的服务器上</span></span><br><span class="line"><span class="comment">        socket = new Socket(Inet4Address.getLocalHost(), PORT);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        // 新建一个套接字，并且直接链接到本地20000的服务器上，并且绑定到本地20001端口上</span></span><br><span class="line"><span class="comment">        socket = new Socket("localhost", PORT, Inet4Address.getLocalHost(), LOCAL_PORT);</span></span><br><span class="line"><span class="comment">        socket = new Socket(Inet4Address.getLocalHost(), PORT, Inet4Address.getLocalHost(), LOCAL_PORT);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket();</span><br><span class="line">        <span class="comment">// 绑定到本地20001端口</span></span><br><span class="line">        socket.bind(<span class="keyword">new</span> InetSocketAddress(Inet4Address.getLocalHost(), LOCAL_PORT));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> socket;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initSocket</span><span class="params">(Socket socket)</span> <span class="keyword">throws</span> SocketException </span>{</span><br><span class="line">        <span class="comment">// 设置读取超时时间为2秒</span></span><br><span class="line">        socket.setSoTimeout(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否复用未完全关闭的Socket地址，对于指定bind操作后的套接字有效</span></span><br><span class="line">        socket.setReuseAddress(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否开启Nagle算法,收到所有发送包后再回送收到，而不是收一次回复一次</span></span><br><span class="line">        socket.setTcpNoDelay(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否需要在长时无数据响应时发送确认数据（类似心跳包），时间大约为2小时</span></span><br><span class="line">        socket.setKeepAlive(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对于close关闭操作行为进行怎样的处理；默认为false，0</span></span><br><span class="line">        <span class="comment">// false、0：默认情况，关闭时立即返回，底层系统接管输出流，将缓冲区内的数据发送完成</span></span><br><span class="line">        <span class="comment">// true、0：关闭时立即返回，缓冲区数据抛弃，直接发送RST结束命令到对方，并无需经过2MSL等待</span></span><br><span class="line">        <span class="comment">// true、200：关闭时最长阻塞200毫秒，随后按第二情况处理</span></span><br><span class="line">        socket.setSoLinger(<span class="keyword">true</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否让紧急数据内敛，默认false；紧急数据通过 socket.sendUrgentData(1);发送</span></span><br><span class="line">        socket.setOOBInline(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置接收发送缓冲器大小</span></span><br><span class="line">        socket.setReceiveBufferSize(<span class="number">64</span> * <span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line">        socket.setSendBufferSize(<span class="number">64</span> * <span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置性能参数：短链接，延迟，带宽的相对重要性（权重）</span></span><br><span class="line">        socket.setPerformancePreferences(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">todo</span><span class="params">(Socket client)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">// 得到Socket输出流</span></span><br><span class="line">        OutputStream outputStream = client.getOutputStream();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到Socket输入流</span></span><br><span class="line">        InputStream inputStream = client.getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">256</span>];</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.wrap(buffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// byte</span></span><br><span class="line">        byteBuffer.put((<span class="keyword">byte</span>) <span class="number">126</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// char</span></span><br><span class="line">        <span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br><span class="line">        byteBuffer.putChar(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// int</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">2323123</span>;</span><br><span class="line">        byteBuffer.putInt(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// bool</span></span><br><span class="line">        <span class="keyword">boolean</span> b = <span class="keyword">true</span>;</span><br><span class="line">        byteBuffer.put(b ? (<span class="keyword">byte</span>) <span class="number">1</span> : (<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Long</span></span><br><span class="line">        <span class="keyword">long</span> l = <span class="number">298789739</span>;</span><br><span class="line">        byteBuffer.putLong(l);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// float</span></span><br><span class="line">        <span class="keyword">float</span> f = <span class="number">12.345f</span>;</span><br><span class="line">        byteBuffer.putFloat(f);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// double</span></span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">13.31241248782973</span>;</span><br><span class="line">        byteBuffer.putDouble(d);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// String</span></span><br><span class="line">        String str = <span class="string">"Hello你好！"</span>;</span><br><span class="line">        byteBuffer.put(str.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送到服务器</span></span><br><span class="line">        outputStream.write(buffer, <span class="number">0</span>, byteBuffer.position() + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收服务器返回</span></span><br><span class="line">        <span class="keyword">int</span> read = inputStream.read(buffer);</span><br><span class="line">        System.out.println(<span class="string">"收到数量："</span> + read);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 资源释放</span></span><br><span class="line">        outputStream.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Server:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">20000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">//创建服务端</span></span><br><span class="line">        ServerSocket server = createServerSocket();</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        initServerSocket(server);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绑定到本地端口上</span></span><br><span class="line">        server.bind(<span class="keyword">new</span> InetSocketAddress(Inet4Address.getLocalHost(), PORT), <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"服务器准备就绪～"</span>);</span><br><span class="line">        System.out.println(<span class="string">"服务器信息："</span> + server.getInetAddress() + <span class="string">" P:"</span> + server.getLocalPort());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待客户端连接</span></span><br><span class="line">        <span class="keyword">for</span> (; ; ) {</span><br><span class="line">            <span class="comment">// 得到客户端</span></span><br><span class="line">            Socket client = server.accept();</span><br><span class="line">            <span class="comment">// 客户端构建异步线程</span></span><br><span class="line">            ClientHandler clientHandler = <span class="keyword">new</span> ClientHandler(client);</span><br><span class="line">            <span class="comment">// 启动线程</span></span><br><span class="line">            clientHandler.start();</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ServerSocket <span class="title">createServerSocket</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">// 创建基础的ServerSocket</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 绑定到本地端口20000上，并且设置当前可允许等待链接的队列为50个</span></span><br><span class="line">        <span class="comment">//serverSocket = new ServerSocket(PORT);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等效于上面的方案，队列设置为50个</span></span><br><span class="line">        <span class="comment">//serverSocket = new ServerSocket(PORT, 50);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 与上面等同</span></span><br><span class="line">        <span class="comment">// serverSocket = new ServerSocket(PORT, 50, Inet4Address.getLocalHost());</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> serverSocket;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initServerSocket</span><span class="params">(ServerSocket serverSocket)</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        <span class="comment">// 是否复用未完全关闭的地址端口</span></span><br><span class="line">        serverSocket.setReuseAddress(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等效Socket#setReceiveBufferSize</span></span><br><span class="line">        serverSocket.setReceiveBufferSize(<span class="number">64</span> * <span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置serverSocket#accept超时时间</span></span><br><span class="line">        <span class="comment">// serverSocket.setSoTimeout(2000);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置性能参数：短链接，延迟，带宽的相对重要性</span></span><br><span class="line">        serverSocket.setPerformancePreferences(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端消息处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientHandler</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line">        <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">        ClientHandler(Socket socket) {</span><br><span class="line">            <span class="keyword">this</span>.socket = socket;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">super</span>.run();</span><br><span class="line">            System.out.println(<span class="string">"新客户端连接："</span> + socket.getInetAddress() +</span><br><span class="line">                    <span class="string">" P:"</span> + socket.getPort());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="comment">// 得到套接字流</span></span><br><span class="line">                OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">                InputStream inputStream = socket.getInputStream();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">256</span>];</span><br><span class="line">                <span class="keyword">int</span> readCount = inputStream.read(buffer);</span><br><span class="line">                ByteBuffer byteBuffer = ByteBuffer.wrap(buffer, <span class="number">0</span>, readCount);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// byte</span></span><br><span class="line">                <span class="keyword">byte</span> be = byteBuffer.get();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// char</span></span><br><span class="line">                <span class="keyword">char</span> c = byteBuffer.getChar();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// int</span></span><br><span class="line">                <span class="keyword">int</span> i = byteBuffer.getInt();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// bool</span></span><br><span class="line">                <span class="keyword">boolean</span> b = byteBuffer.get() == <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Long</span></span><br><span class="line">                <span class="keyword">long</span> l = byteBuffer.getLong();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// float</span></span><br><span class="line">                <span class="keyword">float</span> f = byteBuffer.getFloat();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// double</span></span><br><span class="line">                <span class="keyword">double</span> d = byteBuffer.getDouble();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// String</span></span><br><span class="line">                <span class="keyword">int</span> pos = byteBuffer.position();</span><br><span class="line">                String str = <span class="keyword">new</span> String(buffer, pos, readCount - pos - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"收到数量："</span> + readCount + <span class="string">" 数据："</span></span><br><span class="line">                        + be + <span class="string">"\n"</span></span><br><span class="line">                        + c + <span class="string">"\n"</span></span><br><span class="line">                        + i + <span class="string">"\n"</span></span><br><span class="line">                        + b + <span class="string">"\n"</span></span><br><span class="line">                        + l + <span class="string">"\n"</span></span><br><span class="line">                        + f + <span class="string">"\n"</span></span><br><span class="line">                        + d + <span class="string">"\n"</span></span><br><span class="line">                        + str + <span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">                outputStream.write(buffer, <span class="number">0</span>, readCount);</span><br><span class="line">                outputStream.close();</span><br><span class="line">                inputStream.close();</span><br><span class="line"></span><br><span class="line">            } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">                System.out.println(<span class="string">"连接异常断开"</span>);</span><br><span class="line">            } <span class="keyword">finally</span> {</span><br><span class="line">                <span class="comment">// 连接关闭</span></span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    socket.close();</span><br><span class="line">                } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"客户端已退出："</span> + socket.getInetAddress() +</span><br><span class="line">                    <span class="string">" P:"</span> + socket.getPort());</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2022/08/02/UDP%E4%B8%8ETCP%E5%85%A5%E9%97%A8/19.png" alt=""></p><p><img src="/2022/08/02/UDP%E4%B8%8ETCP%E5%85%A5%E9%97%A8/20.png" alt=""></p></body></html>]]></content>
    
    <summary type="html">
    
      &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 id=&quot;报文、协议、Mac地址&quot;&gt;&lt;a href=&quot;#报文、协议、Mac地址&quot; class=&quot;headerlink&quot; title=&quot;报文、协议、Mac地址&quot;&gt;&lt;/a&gt;报文、协议、Mac地址&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.报文段&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;报文段是指TCP/IP协议网络传输中，起着路由导航作用&lt;/li&gt;
&lt;li&gt;用以查询各个网络路由网段、IP地址、交换协议等IP数据包&lt;/li&gt;
&lt;li&gt;报文段充当整个TCP/IP协议数据包的导航路由功能&lt;/li&gt;
&lt;li&gt;报文段在传输过程中会不断的封装成组、包、帧来传输&lt;/li&gt;
&lt;li&gt;封装方式就是添加一些控制信息组成的首部，即报文头&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2.传输协议&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一种规定，约束&lt;/li&gt;
&lt;li&gt;简单来说：A &amp;gt; B的传输数据，B能识别，反之B &amp;gt; A的传输数据A也能识别。这就是协议&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3.Mac地址&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Media Access Control或者Medium Access Control&lt;/li&gt;
&lt;li&gt;译为媒体访问控制，或称物理地址、硬件地址&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用来定义网络设备的位置&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;形如：44-45-53-54-00-00 与身份证类似&lt;/li&gt;&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;
    
    </summary>
    
    
    
      <category term="网络编程" scheme="https://hluck.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
